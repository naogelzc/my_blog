/*
 Navicat Premium Data Transfer

 Source Server         : mydb
 Source Server Type    : MySQL
 Source Server Version : 80027
 Source Host           : localhost:3306
 Source Schema         : vue_blog

 Target Server Type    : MySQL
 Target Server Version : 80027
 File Encoding         : 65001

 Date: 19/12/2021 09:41:24
*/

SET NAMES utf8mb4;
SET FOREIGN_KEY_CHECKS = 0;

-- ----------------------------
-- Table structure for blog_container
-- ----------------------------
DROP TABLE IF EXISTS `blog_container`;
CREATE TABLE `blog_container`  (
  `id` int(0) NOT NULL AUTO_INCREMENT COMMENT 'id，自增主键',
  `author` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '发帖者名称',
  `title` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '帖子标题',
  `description` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '帖子简介',
  `container` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '帖子内容',
  `createdate` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '帖子创建时间',
  `tag` varchar(15) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '帖子类型(分类)',
  `lastdate` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL COMMENT '帖子最后修改时间',
  `views` int(0) NULL DEFAULT 0 COMMENT '帖子查看次数',
  `istop` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL COMMENT '帖子顶置标识，yes为顶置, null 为空',
  `ishide` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL COMMENT '帖子隐藏标识，yes为隐藏',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 152 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of blog_container
-- ----------------------------
INSERT INTO `blog_container` VALUES (87, 'admin', 'GIT常用命令使用教程', 'GIT命令最常用的命令，开发者必须要学会的技术', '<h3>首先，在码云(gitee)或者GitHub等代码托管平台建立仓库，然后连接。</h3><p><br></p><p><br></p><h3><strong>设置昵称和邮箱</strong></h3><pre class=\"ql-syntax\" spellcheck=\"false\">git <span class=\"hljs-keyword\">config</span> --<span class=\"hljs-keyword\">global</span> user<span class=\"hljs-variable\">.name</span> <span class=\"hljs-string\">\"Your_username\"</span> \ngit <span class=\"hljs-keyword\">config</span> --<span class=\"hljs-keyword\">global</span> user<span class=\"hljs-variable\">.email</span> <span class=\"hljs-string\">\"Your_email\"</span>\n\n如果账号密码有变动 用这个命令 用管理员权限运行 ,重新输入账号密码 应该就能解决了&nbsp;\ngit <span class=\"hljs-keyword\">config</span> --system --unset credential<span class=\"hljs-variable\">.helper</span>\n\n</pre><p><br></p><p><br></p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-symbol\">git</span> init\n<span class=\"hljs-symbol\">git</span> <span class=\"hljs-keyword\">add</span> .\n<span class=\"hljs-symbol\">git</span> commit -m <span class=\"hljs-string\">\"first commit\"</span>\n\n\n<span class=\"hljs-symbol\">git</span> remote <span class=\"hljs-keyword\">add</span> origin https:<span class=\"hljs-comment\">//xxx你的仓库连接.git</span>\n<span class=\"hljs-symbol\">git</span> <span class=\"hljs-keyword\">push</span> -u origin master\n</pre><p><br></p><h3><br></h3><h3><strong>首次推送: git push -u origin 你的仓库名称</strong></h3><p><br></p><h3>之后推送：</h3><h3>第一步：git add .</h3><h3>第二步：git commit -m \"修复了一个bug\"</h3><h3>第三步：git push</h3><p><br></p><p><br></p><h3>新建分支命令: git checkout -b&nbsp;自定义分支名称，例如创建一个dev 分支：</h3><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-symbol\">git</span> checkout -<span class=\"hljs-keyword\">b</span> dev\n</pre><h3><br></h3><p><br></p><p><br></p><h3>合并分支：假如你当前在 dev 分支下开发完成后 ，要与远程的 master 合并 步骤如下：</h3><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\">git add .\ngit commit -m <span class=\"hljs-string\">\"完成xx功能开发\"</span>\ngit push\n\ngit checkout master&nbsp;			<span class=\"hljs-regexp\">//</span>切换分支到 master\ngit pull 	<span class=\"hljs-regexp\">//</span> 如果是协同开发，需要把最新代码拉下来，自己开发的话，可以忽略这个步骤&nbsp;&nbsp;\ngit merge dev&nbsp;	&nbsp;<span class=\"hljs-regexp\">//</span> master 合并 dev\ngit push 		<span class=\"hljs-regexp\">//</span> 提交完成合并\n</pre><p><br></p><p>创建分支</p><pre class=\"ql-syntax\" spellcheck=\"false\">git checkout -<span class=\"hljs-keyword\">b branchName\n</span></pre><p><br></p><h4>强制推送</h4><pre class=\"ql-syntax\" spellcheck=\"false\">git push -u -f origin <span class=\"hljs-keyword\">master</span>\n</pre><p><br></p><p><br></p><h4>查看当前登录账号：</h4><pre class=\"ql-syntax\" spellcheck=\"false\">git config <span class=\"hljs-keyword\">user</span>.name\n</pre><h4><br></h4><h4>查看当前登录邮箱：</h4><pre class=\"ql-syntax\" spellcheck=\"false\">git config user.email\n</pre><p><br></p><p><strong>增加分支同步到远程</strong></p><pre class=\"ql-syntax\" spellcheck=\"false\">git <span class=\"hljs-keyword\">push</span> --<span class=\"hljs-keyword\">set</span>-upstream origin cxy\n</pre><p><br></p><h4><strong>按需合并：</strong></h4><pre class=\"ql-syntax\" spellcheck=\"false\">#假如你的分支名称为 cxy  需要修改了 srcviewscustomerMangementWorkOrderOrderProcessing.vue&nbsp; 文件,并且你推送到名称为 prod-microsoft  的分支，操作如下\n\n# 按需合并单个文件的改动\ngit checkout --patch&nbsp; cxy srcviewscustomerMangementWorkOrderOrderProcessing.vue&nbsp;\n\n\n# 合并整个分支的改动\ngit&nbsp; checkout prod-microsoft&nbsp; <span class=\"hljs-variable\">&amp;&amp;</span>&nbsp; git pull <span class=\"hljs-variable\">&amp;&amp;</span> git <span class=\"hljs-meta\">merge</span> 自己分支\n\n\ngit <span class=\"hljs-meta\">add</span> . <span class=\"hljs-variable\">&amp;&amp;</span>&nbsp; git commit -m <span class=\"hljs-string\">\"修改工单处理新增验证、解决代码冲突\"</span> <span class=\"hljs-variable\">&amp;&amp;</span> git push\n\n</pre><p><br></p><h4>查看差异</h4><p>如果一个文件知道被人修改了，但如果能看看具体修改了什么内容，自然是更好的</p><p>比如你休假两周从国外回来，第一天上班时，已经记不清上次怎么修改的<code style=\"background-color: rgb(243, 244, 244);\">readme.txt</code>，所以，需要用<code style=\"background-color: rgb(243, 244, 244);\">git diff</code>这个命令看看：</p><pre class=\"ql-syntax\" spellcheck=\"false\">git <span class=\"hljs-keyword\">diff </span><span class=\"hljs-comment\"># 查看不同版本之间的文件差异</span>\n</pre><p><br></p><p><br></p><p><strong style=\"color: rgb(51, 51, 51);\">如果想回到上一个版本，应该怎么做呢？</strong></p><p><span style=\"color: rgb(51, 51, 51);\">首先，</span><code style=\"color: rgb(51, 51, 51); background-color: rgb(243, 244, 244);\">Git</code><span style=\"color: rgb(51, 51, 51);\">必须知道当前版本是哪个版本，在</span><code style=\"color: rgb(51, 51, 51); background-color: rgb(243, 244, 244);\">Git</code><span style=\"color: rgb(51, 51, 51);\">中，用</span><code style=\"color: rgb(51, 51, 51); background-color: rgb(243, 244, 244);\">HEAD</code><span style=\"color: rgb(51, 51, 51);\">表示当前版本，上一个版本就是</span><code style=\"color: rgb(51, 51, 51); background-color: rgb(243, 244, 244);\">HEAD^</code><span style=\"color: rgb(51, 51, 51);\">，上上一个版本就是</span><code style=\"color: rgb(51, 51, 51); background-color: rgb(243, 244, 244);\">HEAD^^</code><span style=\"color: rgb(51, 51, 51);\">，当然往上100个版本写100个^比较容易数不过来，所以写成</span><code style=\"color: rgb(51, 51, 51); background-color: rgb(243, 244, 244);\">HEAD~100</code><span style=\"color: rgb(51, 51, 51);\">。</span></p><pre class=\"ql-syntax\" spellcheck=\"false\">git <span class=\"hljs-keyword\">reset</span> <span class=\"hljs-comment\">--hard HEAD^</span>\n</pre><p><br></p><p><br></p><p><strong style=\"color: rgb(51, 51, 51);\">回到指定版本</strong></p><p><span style=\"color: rgb(230, 0, 0);\">使用 git log 查看版本</span><strong style=\"color: rgb(230, 0, 0);\">id</strong><span style=\"color: rgb(230, 0, 0);\">号，通过版本号回退</span></p><pre class=\"ql-syntax\" spellcheck=\"false\">git <span class=\"hljs-keyword\">reset</span> <span class=\"hljs-comment\">--hard &lt;commit id&gt;</span>\n</pre><p><br></p><p><code style=\"background-color: rgb(243, 244, 244); color: rgb(51, 51, 51);\">git log</code><span style=\"color: rgb(51, 51, 51);\"> 命令显示从最近到最远的提交日志，如果嫌输出信息太多，看得眼花缭乱的，可以试试加上</span><code style=\"color: rgb(51, 51, 51); background-color: rgb(243, 244, 244);\">--pretty=oneline</code><span style=\"color: rgb(51, 51, 51);\">参数：</span></p><pre class=\"ql-syntax\" spellcheck=\"false\">git <span class=\"hljs-built_in\">log</span> <span class=\"hljs-comment\">--pretty=oneline</span>\n</pre><p><br></p><p><strong>为什么 commit id 要使用这么长一串字符而不是数字？</strong></p><p>当两个人同时在一个代码上工作时候，分别往各自的本地的版本库提交时，相同的提交号对应着不同的修改，如果使用<code style=\"background-color: rgb(243, 244, 244);\">1,2,3</code>这样的数字不能保证唯一性，所以<code style=\"background-color: rgb(243, 244, 244);\">Git</code>使用<code style=\"background-color: rgb(243, 244, 244);\">SHA-1</code>算法产生<strong>唯一标识符，保证全球唯一</strong>。</p><p>比如程序员甲和乙负责共同开发一个聊天软件，使用<code style=\"background-color: rgb(243, 244, 244);\">Git</code>来版本控制。 <code style=\"background-color: rgb(243, 244, 244);\">Git</code>是分布式版本控制，每个人都有一个版本库。如果<code style=\"background-color: rgb(243, 244, 244);\">Git</code>版本控制用<code style=\"background-color: rgb(243, 244, 244);\">1,2,3</code>这样的数字来生成版本号，那么程序员甲和乙代码合并的时候就会出现问题。版本1到底是谁的？</p><p><code style=\"background-color: rgb(243, 244, 244);\">SVN</code> 是集中式的版本控制，只有一个版本库，所以版本号可以从<code style=\"background-color: rgb(243, 244, 244);\">1,2,3</code>开始。<code style=\"background-color: rgb(243, 244, 244);\">Git</code>是分布式版本控制，每个人都有一个版本库，所以不能从<code style=\"background-color: rgb(243, 244, 244);\">1,2,3</code>开始。</p><p><br></p><p><br></p><p><br></p><h4>撤销修改</h4><p><code style=\"background-color: rgb(243, 244, 244);\">git checkout -- filename</code>可以丢弃工作区的修改：<strong>-- 后面是一个空格</strong></p><p>命令 <code style=\"background-color: rgb(243, 244, 244);\">git checkout -- readme.txt</code> 意思就是，把 <code style=\"background-color: rgb(243, 244, 244);\">readme.txt</code> 文件在工作区的修改全部撤销，这里有两种情况：</p><p>一：<code style=\"background-color: rgb(243, 244, 244);\">readme.txt</code> 自修改后还没有被放到暂存区(<code style=\"background-color: rgb(243, 244, 244);\">git add</code>)，现在，撤销修改就回到和版本库一模一样的状态；</p><p>二：<code style=\"background-color: rgb(243, 244, 244);\">readme.txt</code> 已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。</p><p>总之，就是让这个文件回到最近一次 <code style=\"background-color: rgb(243, 244, 244);\">git commit</code> 或 <code style=\"background-color: rgb(243, 244, 244);\">git add</code> 时的状态。</p><p><strong>注意:</strong></p><p><code style=\"background-color: rgb(243, 244, 244);\">git checkout -- file</code> 命令中的 <code style=\"background-color: rgb(243, 244, 244);\">--</code> 很重要，没有 <code style=\"background-color: rgb(243, 244, 244);\">--</code> ，就变成了<strong>“切换到另一个分支”</strong>的命令，我们在后面的分支管理中会再次遇到 <code style=\"background-color: rgb(243, 244, 244);\">git checkout</code> 命令</p><h4>删除文件</h4><p>一般情况下，你通常直接在文件管理器中把没用的文件删了，或者用<code style=\"background-color: rgb(243, 244, 244);\">rm</code>命令删了：</p><pre class=\"ql-syntax\" spellcheck=\"false\">git <span class=\"hljs-keyword\">rm</span> <span class=\"hljs-keyword\">test</span>.txt\n</pre><p><br></p><p><strong>冲突</strong></p><pre class=\"ql-syntax\" spellcheck=\"false\">选项	含义\nAccept Current Change	接受当前分支1的修改\nAccept Incoming Change	接受pull导入主分支的修改\nAccept Both Change	同时接受两个分支的修改\nCompare Changes	对比修改，主要用于手动修改\n</pre><p><br></p><p><strong>可能出现冲突的几个操作</strong>：</p><p><strong>pull 操作：</strong>更新的时候，可能出现本地代码与更新下来的代码不一致的情况，发生冲突</p><p><strong>push 操作：</strong>与更新操作类似，push 上去的代码<strong>原型</strong>（修改前的代码）与远程的代码不一致，发生冲突</p><p><strong>分支合并：</strong>例如 A 分支合并 B 分支的时候，B 分支的代码<strong>原型</strong>（修改前的代码）与 A 分支不一致，发生冲突</p><p>到此冲突就解决完成了，理一下冲突出现的原因</p><p>由于本地文件和远程文件不一致导致的冲突出现，这个不一致又可能会分为这几种情况：</p><ol><li>修改本地文件前，远程已经与本地不一致了</li><li>修改本地文件时，文件还是一致的，修改的中途或修改后远程被修改了</li></ol><p>对于第一种情况还是比较好处理的，<strong>修改前先 pull 一下，只要保证修改前本地与远程一致即可</strong>，但第二种情况就没办法了，这种情况是避免不了的，公司里面之所以要定义 git 管理规范，就是为了避免这样的情况出现，所以尽量做到自己<strong>要修改其他人也可能修改的文件之前，先确认一下有没有人会改</strong>，没有的话自己再去改，只要<strong>把两个人的修改操作错开</strong>，就可以避免冲突问题了，当然这只是理想情况，因此解决冲突的能力还是一定要会的</p><p><strong>总结：</strong>完成一个小功能，确定没有问题就提交，有事没事更新一下可以最大程度的降低冲突的可能，关键还是要练好解决冲突的能力，即使冲突出现了，也要能够轻松解决</p>', '2021-09-01 10:51:26', 'GIT命令', '2021-11-22 11:29:57', 0, 'null', NULL);
INSERT INTO `blog_container` VALUES (89, 'admin', 'VUE 返回上一页 不刷新页面实现方法', '网上有很多种方法，刚开始看的时候都感觉莫名奇妙，不知道他们说啥，理解能力有限，于是梳理了一下，这里介绍最简单的一种方法，看了基本都能搞懂', '<p>&nbsp;&nbsp;</p><p><strong>一、直接在你的</strong><strong style=\"color: rgb(240, 102, 102);\">router-view </strong><strong>标签外面包一个</strong><strong style=\"color: rgb(240, 102, 102);\">keep-alive</strong><strong>  ，如下所示</strong></p><p><br></p><p><em style=\"color: rgb(127, 132, 142);\">&lt;!--&nbsp;路由占位符&nbsp;--&gt;</em></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;<span style=\"color: rgb(224, 108, 117);\">keep-alive</span>&gt;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;<span style=\"color: rgb(224, 108, 117);\">router-view</span>&nbsp;<span style=\"color: rgb(209, 154, 102);\">v-if</span>=<span style=\"color: rgb(152, 195, 121);\">\"</span><span style=\"color: rgb(229, 192, 123);\">$route</span>.<span style=\"color: rgb(229, 192, 123);\">meta</span>.<span style=\"color: rgb(224, 108, 117);\">keepAlive</span><span style=\"color: rgb(152, 195, 121);\">\"</span>/&gt;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<em style=\"color: rgb(127, 132, 142);\">&lt;!--&nbsp;这里是会被缓存的视图(即不刷新)&nbsp;--&gt;</em></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/<span style=\"color: rgb(224, 108, 117);\">keep-alive</span>&gt;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;<span style=\"color: rgb(224, 108, 117);\">router-view</span>&nbsp;<span style=\"color: rgb(209, 154, 102);\">v-if</span>=<span style=\"color: rgb(152, 195, 121);\">\"</span><span style=\"color: rgb(86, 182, 194);\">!</span><span style=\"color: rgb(229, 192, 123);\">$route</span>.<span style=\"color: rgb(229, 192, 123);\">meta</span>.<span style=\"color: rgb(224, 108, 117);\">keepAlive</span><span style=\"color: rgb(152, 195, 121);\">\"</span>/&gt;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<em style=\"color: rgb(127, 132, 142);\">&lt;!--&nbsp;这里是不会被缓存的视图&nbsp;--&gt;</em></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/<span style=\"color: rgb(224, 108, 117);\">div</span>&gt;</p><p><br></p><p><strong>二、</strong><strong style=\"color: rgb(77, 77, 77);\">配置路由的时候需要加</strong><strong style=\"color: rgb(240, 102, 102);\">&nbsp;keepAlive: true</strong><strong style=\"color: rgb(77, 77, 77);\">&nbsp;参数 ，在你要缓存的页面在</strong>&nbsp;<span style=\"color: rgb(224, 108, 117);\">meta</span>:&nbsp;{&nbsp;<span style=\"color: rgb(224, 108, 117);\">title</span>:&nbsp;<span style=\"color: rgb(152, 195, 121);\">\'首页\'</span>&nbsp;,<span style=\"color: rgb(224, 108, 117);\">keepAlive</span>:<span style=\"color: rgb(209, 154, 102);\">true</span>}里面添加<strong style=\"color: rgb(77, 77, 77);\">（我把完整的代码贴出来）</strong></p><p><br></p><p><span style=\"color: rgb(198, 120, 221);\">import</span>&nbsp;<span style=\"color: rgb(224, 108, 117);\">Vue</span>&nbsp;<span style=\"color: rgb(198, 120, 221);\">from</span>&nbsp;<span style=\"color: rgb(152, 195, 121);\">\'vue\'</span></p><p><span style=\"color: rgb(198, 120, 221);\">import</span>&nbsp;<span style=\"color: rgb(224, 108, 117);\">VueRouter</span>&nbsp;<span style=\"color: rgb(198, 120, 221);\">from</span>&nbsp;<span style=\"color: rgb(152, 195, 121);\">\'vue-router\'</span></p><p><span style=\"color: rgb(198, 120, 221);\">import</span>&nbsp;<span style=\"color: rgb(224, 108, 117);\">Home</span>&nbsp;<span style=\"color: rgb(198, 120, 221);\">from</span>&nbsp;<span style=\"color: rgb(152, 195, 121);\">\'../components/Home\'</span></p><p><span style=\"color: rgb(198, 120, 221);\">import</span>&nbsp;<span style=\"color: rgb(224, 108, 117);\">Main</span>&nbsp;<span style=\"color: rgb(198, 120, 221);\">from</span>&nbsp;<span style=\"color: rgb(152, 195, 121);\">\'../components/main/Main.vue\'</span></p><p><br></p><p><em style=\"color: rgb(127, 132, 142);\">//&nbsp;解决ElementUI导航栏中的vue-router在3.0版本以上重复点菜单报错问题</em></p><p><span style=\"color: rgb(198, 120, 221);\">const</span>&nbsp;<span style=\"color: rgb(97, 175, 239);\">originPush</span>&nbsp;<span style=\"color: rgb(86, 182, 194);\">=</span>&nbsp;<span style=\"color: rgb(229, 192, 123);\">VueRouter</span>.<span style=\"color: rgb(224, 108, 117);\">prototype</span>.<span style=\"color: rgb(97, 175, 239);\">push</span></p><p><span style=\"color: rgb(229, 192, 123);\">VueRouter</span>.<span style=\"color: rgb(224, 108, 117);\">prototype</span>.<span style=\"color: rgb(97, 175, 239);\">push</span>&nbsp;<span style=\"color: rgb(86, 182, 194);\">=</span>&nbsp;<span style=\"color: rgb(198, 120, 221);\">function</span>&nbsp;<span style=\"color: rgb(97, 175, 239);\">push</span>(<em style=\"color: rgb(224, 108, 117);\">location</em>)&nbsp;{</p><p>&nbsp;&nbsp;<span style=\"color: rgb(198, 120, 221);\">return</span>&nbsp;<span style=\"color: rgb(97, 175, 239);\">originPush</span>.<span style=\"color: rgb(97, 175, 239);\">call</span>(<span style=\"color: rgb(229, 192, 123);\">this</span>,<em style=\"color: rgb(224, 108, 117);\">location</em>).<span style=\"color: rgb(97, 175, 239);\">catch</span>(<em style=\"color: rgb(224, 108, 117);\">err</em>&nbsp;<span style=\"color: rgb(198, 120, 221);\">=&gt;</span><em style=\"color: rgb(224, 108, 117);\">err</em>)</p><p>}</p><p><br></p><p><span style=\"color: rgb(229, 192, 123);\">Vue</span>.<span style=\"color: rgb(97, 175, 239);\">use</span>(<span style=\"color: rgb(229, 192, 123);\">VueRouter</span>)</p><p><br></p><p><span style=\"color: rgb(198, 120, 221);\">const</span>&nbsp;<span style=\"color: rgb(229, 192, 123);\">routes</span>&nbsp;<span style=\"color: rgb(86, 182, 194);\">=</span>&nbsp;[</p><p>&nbsp;&nbsp;{</p><p>&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: rgb(224, 108, 117);\">path</span>:&nbsp;<span style=\"color: rgb(152, 195, 121);\">\'/\'</span>,</p><p>&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: rgb(224, 108, 117);\">name</span>:&nbsp;<span style=\"color: rgb(152, 195, 121);\">\'Home\'</span>,</p><p>&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: rgb(224, 108, 117);\">component</span>:&nbsp;<span style=\"color: rgb(224, 108, 117);\">Home</span>,</p><p>&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: rgb(224, 108, 117);\">redirect</span>:&nbsp;<span style=\"color: rgb(152, 195, 121);\">\'Main\'</span>,</p><p>&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: rgb(224, 108, 117);\">children</span>:&nbsp;[</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;<span style=\"color: rgb(224, 108, 117);\">path</span>:&nbsp;<span style=\"color: rgb(152, 195, 121);\">\'/Main\'</span>,&nbsp;<span style=\"color: rgb(224, 108, 117);\">component</span>:&nbsp;<span style=\"color: rgb(224, 108, 117);\">Main</span>,&nbsp;<span style=\"color: rgb(224, 108, 117);\">name</span>:&nbsp;<span style=\"color: rgb(152, 195, 121);\">\'Main\'</span>,&nbsp;<span style=\"color: rgb(224, 108, 117);\">meta</span>:&nbsp;{&nbsp;<span style=\"color: rgb(224, 108, 117);\">title</span>:&nbsp;<span style=\"color: rgb(152, 195, 121);\">\'首页\'</span>&nbsp;,<span style=\"color: rgb(224, 108, 117);\">keepAlive</span>:<span style=\"color: rgb(209, 154, 102);\">true</span>}&nbsp;},</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;<span style=\"color: rgb(224, 108, 117);\">path</span>:&nbsp;<span style=\"color: rgb(152, 195, 121);\">\'/Edit\'</span>,&nbsp;<span style=\"color: rgb(224, 108, 117);\">name</span>:&nbsp;<span style=\"color: rgb(152, 195, 121);\">\'Edit\'</span>,&nbsp;<span style=\"color: rgb(97, 175, 239);\">component</span>:&nbsp;()&nbsp;<span style=\"color: rgb(198, 120, 221);\">=&gt;</span>&nbsp;<span style=\"color: rgb(97, 175, 239);\">import</span>(<em style=\"color: rgb(127, 132, 142);\">/*&nbsp;webpackChunkName:&nbsp;\"Edit\"&nbsp;*/</em>&nbsp;<span style=\"color: rgb(152, 195, 121);\">\'../components/edit/Edit.vue\'</span>),&nbsp;<span style=\"color: rgb(224, 108, 117);\">meta</span>:&nbsp;{&nbsp;<span style=\"color: rgb(224, 108, 117);\">title</span>:&nbsp;<span style=\"color: rgb(152, 195, 121);\">\'发帖\'</span>&nbsp;}&nbsp;},</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;<span style=\"color: rgb(224, 108, 117);\">path</span>:&nbsp;<span style=\"color: rgb(152, 195, 121);\">\'/BlogPage\'</span>,&nbsp;<span style=\"color: rgb(224, 108, 117);\">name</span>:&nbsp;<span style=\"color: rgb(152, 195, 121);\">\'BlogPage\'</span>,&nbsp;<span style=\"color: rgb(97, 175, 239);\">component</span>:&nbsp;()&nbsp;<span style=\"color: rgb(198, 120, 221);\">=&gt;</span>&nbsp;<span style=\"color: rgb(97, 175, 239);\">import</span>(<em style=\"color: rgb(127, 132, 142);\">/*&nbsp;webpackChunkName:&nbsp;\"BlogPage\"&nbsp;*/</em>&nbsp;<span style=\"color: rgb(152, 195, 121);\">\'../components/BlogPage/BlogPage.vue\'</span>),&nbsp;<span style=\"color: rgb(224, 108, 117);\">meta</span>:&nbsp;{&nbsp;<span style=\"color: rgb(224, 108, 117);\">title</span>:&nbsp;<span style=\"color: rgb(152, 195, 121);\">\'展示页面\'</span>,<span style=\"color: rgb(224, 108, 117);\">keepAlive</span>:<span style=\"color: rgb(209, 154, 102);\">false</span>&nbsp;}&nbsp;},</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;<span style=\"color: rgb(224, 108, 117);\">path</span>:&nbsp;<span style=\"color: rgb(152, 195, 121);\">\'/About\'</span>,&nbsp;<span style=\"color: rgb(224, 108, 117);\">name</span>:&nbsp;<span style=\"color: rgb(152, 195, 121);\">\'&nbsp;About\'</span>,&nbsp;<span style=\"color: rgb(97, 175, 239);\">component</span>:&nbsp;()&nbsp;<span style=\"color: rgb(198, 120, 221);\">=&gt;</span>&nbsp;<span style=\"color: rgb(97, 175, 239);\">import</span>(<em style=\"color: rgb(127, 132, 142);\">/*&nbsp;webpackChunkName:&nbsp;\"About\"&nbsp;*/</em>&nbsp;<span style=\"color: rgb(152, 195, 121);\">\'../components/about/About\'</span>),&nbsp;<span style=\"color: rgb(224, 108, 117);\">meta</span>:&nbsp;{&nbsp;<span style=\"color: rgb(224, 108, 117);\">title</span>:&nbsp;<span style=\"color: rgb(152, 195, 121);\">\'关于\'</span>&nbsp;}&nbsp;}</p><p>&nbsp;&nbsp;&nbsp;&nbsp;]</p><p>&nbsp;&nbsp;},</p><p>&nbsp;&nbsp;{</p><p>&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: rgb(224, 108, 117);\">path</span>:&nbsp;<span style=\"color: rgb(152, 195, 121);\">\'/Login\'</span>,</p><p>&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: rgb(224, 108, 117);\">name</span>:&nbsp;<span style=\"color: rgb(152, 195, 121);\">\'Login\'</span>,</p><p>&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: rgb(97, 175, 239);\">component</span>:&nbsp;()&nbsp;<span style=\"color: rgb(198, 120, 221);\">=&gt;</span>&nbsp;<span style=\"color: rgb(97, 175, 239);\">import</span>(<em style=\"color: rgb(127, 132, 142);\">/*&nbsp;webpackChunkName:&nbsp;\"Login\"&nbsp;*/</em>&nbsp;<span style=\"color: rgb(152, 195, 121);\">\'../components/login/Login\'</span>),</p><p>&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: rgb(224, 108, 117);\">meta</span>:&nbsp;{&nbsp;<span style=\"color: rgb(224, 108, 117);\">title</span>:&nbsp;<span style=\"color: rgb(152, 195, 121);\">\'登录页面\'</span>&nbsp;}</p><p>&nbsp;&nbsp;},</p><p>&nbsp;&nbsp;{</p><p>&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: rgb(224, 108, 117);\">path</span>:&nbsp;<span style=\"color: rgb(152, 195, 121);\">\'/Admin\'</span>,</p><p>&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: rgb(224, 108, 117);\">name</span>:&nbsp;<span style=\"color: rgb(152, 195, 121);\">\'Admin\'</span>,</p><p>&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: rgb(97, 175, 239);\">component</span>:&nbsp;()&nbsp;<span style=\"color: rgb(198, 120, 221);\">=&gt;</span>&nbsp;<span style=\"color: rgb(97, 175, 239);\">import</span>(<em style=\"color: rgb(127, 132, 142);\">/*webpackChunkName:\"Admin\"&nbsp;*/</em>&nbsp;<span style=\"color: rgb(152, 195, 121);\">\'../components/Admin\'</span>),</p><p>&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: rgb(224, 108, 117);\">meta</span>:&nbsp;{&nbsp;<span style=\"color: rgb(224, 108, 117);\">title</span>:&nbsp;<span style=\"color: rgb(152, 195, 121);\">\'后台主页\'</span>&nbsp;},</p><p>&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: rgb(224, 108, 117);\">redirect</span>:<span style=\"color: rgb(152, 195, 121);\">\'welcome\'</span>,</p><p>&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: rgb(224, 108, 117);\">children</span>:&nbsp;[</p><p>&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;<span style=\"color: rgb(224, 108, 117);\">path</span>:&nbsp;<span style=\"color: rgb(152, 195, 121);\">\'/container\'</span>,&nbsp;<span style=\"color: rgb(224, 108, 117);\">name</span>:&nbsp;<span style=\"color: rgb(152, 195, 121);\">\'Container\'</span>,&nbsp;<span style=\"color: rgb(97, 175, 239);\">component</span>:&nbsp;()&nbsp;<span style=\"color: rgb(198, 120, 221);\">=&gt;</span>&nbsp;<span style=\"color: rgb(97, 175, 239);\">import</span>(<em style=\"color: rgb(127, 132, 142);\">/*webpackChunkName*/</em>&nbsp;<span style=\"color: rgb(152, 195, 121);\">\'../components/Admin/Container\'</span>),&nbsp;<span style=\"color: rgb(224, 108, 117);\">meta</span>:&nbsp;{&nbsp;<span style=\"color: rgb(224, 108, 117);\">title</span>:&nbsp;<span style=\"color: rgb(152, 195, 121);\">\'文章列表\'</span>&nbsp;}&nbsp;},</p><p>&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;<span style=\"color: rgb(224, 108, 117);\">path</span>:&nbsp;<span style=\"color: rgb(152, 195, 121);\">\'/Welcome\'</span>,&nbsp;<span style=\"color: rgb(224, 108, 117);\">name</span>:&nbsp;<span style=\"color: rgb(152, 195, 121);\">\'Container\'</span>,&nbsp;<span style=\"color: rgb(97, 175, 239);\">component</span>:&nbsp;()&nbsp;<span style=\"color: rgb(198, 120, 221);\">=&gt;</span>&nbsp;<span style=\"color: rgb(97, 175, 239);\">import</span>(<em style=\"color: rgb(127, 132, 142);\">/*webpackChunkName*/</em>&nbsp;<span style=\"color: rgb(152, 195, 121);\">\'../components/Admin/Welcome\'</span>),&nbsp;<span style=\"color: rgb(224, 108, 117);\">meta</span>:&nbsp;{&nbsp;<span style=\"color: rgb(224, 108, 117);\">title</span>:&nbsp;<span style=\"color: rgb(152, 195, 121);\">\'首页\'</span>&nbsp;}&nbsp;}</p><p>&nbsp;&nbsp;&nbsp;&nbsp;]</p><p>&nbsp;&nbsp;}</p><p>&nbsp;]</p><p><br></p><p><br></p><p><strong>三</strong>、&nbsp;<strong style=\"color: rgb(77, 77, 77);\">在</strong><strong style=\"color: rgb(240, 102, 102);\">&nbsp;router.beforeEach&nbsp;</strong><strong style=\"color: rgb(77, 77, 77);\">方法里面来动态修改 </strong><strong style=\"color: rgb(240, 102, 102);\">keepAlive</strong><strong style=\"color: rgb(77, 77, 77);\">&nbsp;的值，我这个代码在index.js页面</strong></p><p><br></p><p><br></p><p><em style=\"color: rgb(127, 132, 142);\">//&nbsp;路由守卫</em></p><p><span style=\"color: rgb(229, 192, 123);\">router</span>.<span style=\"color: rgb(97, 175, 239);\">beforeEach</span>((<em style=\"color: rgb(224, 108, 117);\">to</em>,&nbsp;<em style=\"color: rgb(224, 108, 117);\">from</em>,&nbsp;<em style=\"color: rgb(97, 175, 239);\">next</em>)&nbsp;<span style=\"color: rgb(198, 120, 221);\">=&gt;</span>&nbsp;{</p><p><br></p><p>&nbsp;&nbsp;<em style=\"color: rgb(127, 132, 142);\">//&nbsp;判断是否需要缓存(从BlogPage路径跳转到&nbsp;Main，不刷新&nbsp;Main页面)</em></p><p>&nbsp;&nbsp;<span style=\"color: rgb(198, 120, 221);\">if</span>(<em style=\"color: rgb(224, 108, 117);\">to</em>.<span style=\"color: rgb(224, 108, 117);\">path</span>&nbsp;<span style=\"color: rgb(86, 182, 194);\">===</span>&nbsp;<span style=\"color: rgb(152, 195, 121);\">\'/Main\'</span>&nbsp;<span style=\"color: rgb(86, 182, 194);\">&amp;&amp;</span>&nbsp;<em style=\"color: rgb(224, 108, 117);\">from</em>.<span style=\"color: rgb(224, 108, 117);\">path</span>&nbsp;<span style=\"color: rgb(86, 182, 194);\">===</span>&nbsp;<span style=\"color: rgb(152, 195, 121);\">\'/BlogPage\'</span>)&nbsp;{</p><p>&nbsp;&nbsp;&nbsp;&nbsp;<em style=\"color: rgb(127, 132, 142);\">//&nbsp;让页面缓存，即不刷新页面</em></p><p>&nbsp;&nbsp;&nbsp;&nbsp;<em style=\"color: rgb(224, 108, 117);\">to</em>.<span style=\"color: rgb(224, 108, 117);\">meta</span>.<span style=\"color: rgb(224, 108, 117);\">keepAlive</span>&nbsp;<span style=\"color: rgb(86, 182, 194);\">=</span>&nbsp;<span style=\"color: rgb(209, 154, 102);\">true</span>&nbsp;&nbsp;</p><p>&nbsp;&nbsp;}</p><p>&nbsp;&nbsp;<span style=\"color: rgb(198, 120, 221);\">else</span>&nbsp;{</p><p>&nbsp;&nbsp;&nbsp;&nbsp;<em style=\"color: rgb(224, 108, 117);\">to</em>.<span style=\"color: rgb(224, 108, 117);\">meta</span>.<span style=\"color: rgb(224, 108, 117);\">keepAlivev</span>&nbsp;<span style=\"color: rgb(86, 182, 194);\">=</span>&nbsp;<span style=\"color: rgb(209, 154, 102);\">false</span></p><p>&nbsp;&nbsp;}</p><p><br></p><p>})</p><p><br></p><p><br></p><p><strong>四、总结</strong></p><p><br></p><p><strong>第一步：配置路由，在需要缓存的页面添加</strong><span style=\"color: rgb(224, 108, 117);\">keepAlive</span>:<span style=\"color: rgb(209, 154, 102);\">true，如：</span><span style=\"color: rgb(224, 108, 117);\">meta</span>:&nbsp;{&nbsp;<span style=\"color: rgb(224, 108, 117);\">title</span>:&nbsp;<span style=\"color: rgb(152, 195, 121);\">\'首页\'</span>&nbsp;,<span style=\"color: rgb(224, 108, 117);\">keepAlive</span>:<span style=\"color: rgb(209, 154, 102);\">true</span>}</p><p><br></p><p><strong>第二步：在路由守卫 </strong><strong style=\"color: rgb(240, 102, 102);\">router.beforeEach&nbsp;</strong><strong style=\"color: rgb(77, 77, 77);\">方法里面来动态修改 </strong><strong style=\"color: rgb(240, 102, 102);\">keepAlive</strong><strong style=\"color: rgb(77, 77, 77);\">&nbsp;</strong></p><p><br></p><p><strong>第三步：</strong><strong style=\"color: rgb(240, 102, 102);\">router-view </strong><strong>标签外面包一个</strong><strong style=\"color: rgb(240, 102, 102);\">keep-alive</strong><strong> ，用v-if判断</strong><span style=\"color: rgb(229, 192, 123);\">$route</span>.<span style=\"color: rgb(229, 192, 123);\">meta</span>.<span style=\"color: rgb(224, 108, 117);\">keepAlive</span><strong>是否为真，为真时显示</strong></p><p><br></p><p><br></p><p><br></p><p><br></p>', '2021-09-01 16:26:46', 'vue', NULL, 0, 'null', NULL);
INSERT INTO `blog_container` VALUES (94, '小白', 'Linux目录处理命令ls', '小白的小短文：linux的常用命令ls', '<h1 class=\"ql-align-justify\">ls的常用命令</h1><p class=\"ql-align-justify\"><span class=\"ql-size-large\">1.查看全部的文件（包括隐藏的文件）：</span><span class=\"ql-size-large\" style=\"color: rgb(0, 0, 0);\">ls -a 目录</span></p><p class=\"ql-align-justify\"><span class=\"ql-size-large\" style=\"color: rgb(255, 255, 255); background-color: rgb(0, 0, 0);\">例：[root@ChevyCentos ~]# ls -a /</span></p><p class=\"ql-align-justify\"><br></p><p class=\"ql-align-justify\"><span class=\"ql-size-large\">2.显示文件或目录的详细详细：</span><span class=\"ql-size-large\" style=\"color: rgb(0, 0, 0);\">ls -l 文件或目录</span></p><p class=\"ql-align-justify\"><span class=\"ql-size-large\" style=\"color: rgb(255, 255, 255); background-color: rgb(0, 0, 0);\">例：[root@ChevyCentos ~]# ls -l /</span></p><p class=\"ql-align-justify\"><br></p><p class=\"ql-align-justify\"><span class=\"ql-size-large\">3.显示目录：ls -d 目录</span></p><p class=\"ql-align-justify\"><span class=\"ql-size-large\" style=\"color: rgb(255, 255, 255); background-color: rgb(0, 0, 0);\">例：[root@ChevyCentos ~]# ls -d /bin</span></p><p class=\"ql-align-justify\"><span class=\"ql-size-large\">注：一般不单独使用，结合-l使用（ls -ld）</span></p><p class=\"ql-align-justify\"><span class=\"ql-size-large\" style=\"color: rgb(255, 255, 255); background-color: rgb(0, 0, 0);\">例：[root@ChevyCentos chevyhome]# ls -ld /</span></p><p class=\"ql-align-justify\"><br></p><p class=\"ql-align-justify\"><span class=\"ql-size-large\">4.人性化的一个命令（字节转换为kb、mb）：ls -h</span></p><p class=\"ql-align-justify\"><span class=\"ql-size-large\">注：不会单独使用，一般结合-l使用（ls -lh）</span></p><p class=\"ql-align-justify\"><span class=\"ql-size-large\" style=\"color: rgb(255, 255, 255); background-color: rgb(0, 0, 0);\">例：[root@ChevyCentos chevyhome]# ls -lh /</span></p><p class=\"ql-align-justify\"><br></p><p class=\"ql-align-justify\"><span class=\"ql-size-large\" style=\"color: rgb(51, 51, 51);\">5.查询文件的inode号：ls -i</span></p><p class=\"ql-align-justify\"><span class=\"ql-size-large\" style=\"color: rgb(255, 255, 255); background-color: rgb(0, 0, 0);\">例：[root@ChevyCentos chevyhome]# ls -i /</span></p><p class=\"ql-align-justify\"><span class=\"ql-size-large\">注：inode具有唯一性</span></p>', '2021-09-01 16:55:01', 'linux', '2021-09-02 08:49:40', 0, 'null', NULL);
INSERT INTO `blog_container` VALUES (103, '小白', 'Linux文件或目录信息的详情', '初学者简单说一下Linux文件或目录信息的详情，这里讲解的是ls -l的详情。如有错误请见谅。', '<p class=\"ql-align-justify\"><span class=\"ql-size-large\" style=\"color: rgb(51, 51, 51);\">每天一个小短文进行学习</span></p><p class=\"ql-align-justify\"><br></p><p class=\"ql-align-justify\"><br></p><p class=\"ql-align-justify\"><span class=\"ql-size-large\">我们知道ls -l 可以查找文件或目录的详细信息。</span></p><p class=\"ql-align-justify\"><span class=\"ql-size-large\">如：</span></p><pre class=\"ql-syntax ql-align-justify\" spellcheck=\"false\">[root@ChevyCentos ~]# ls -l /bin\nlrwxrwxrwx.&nbsp;1&nbsp;root&nbsp;root&nbsp;7&nbsp;8月&nbsp;&nbsp;26&nbsp;10:31&nbsp;/bin&nbsp;-&gt;&nbsp;usr/bin\n</pre><p class=\"ql-align-justify\"><br></p><p class=\"ql-align-justify\"><span class=\"ql-size-large\" style=\"color: rgb(0, 0, 0);\">我们看看这一行有什么详细信息吧！！！</span></p><p class=\"ql-align-justify\"><br></p><p class=\"ql-align-justify\"><span class=\"ql-size-large\" style=\"color: rgb(0, 0, 0);\">一、第一个字母（l）是代表软连接，除了这个还有</span></p><p class=\"ql-align-justify\"><span class=\"ql-size-large\" style=\"color: rgb(0, 0, 0);\">（-）代表二进制文件</span></p><pre class=\"ql-syntax ql-align-justify\" spellcheck=\"false\">  -rwxr-xr-x.   1 root root       5343 6月  10 2014 znew\n</pre><p class=\"ql-align-justify\"><span class=\"ql-size-large\" style=\"color: rgb(0, 0, 0);\">（d）代表目录</span></p><pre class=\"ql-syntax ql-align-justify\" spellcheck=\"false\">  drwxr-xr-x.  2 root root     4096 9月   1 10:12 yum.repos.d\n</pre><p class=\"ql-align-justify\"><br></p><p class=\"ql-align-justify\"><br></p><p class=\"ql-align-justify\"><span class=\"ql-size-large\">二、在linux中用户有三类</span></p><p class=\"ql-align-justify\"><strong class=\"ql-size-large\">1.所有者（u）</strong></p><p class=\"ql-align-justify\"><span class=\"ql-size-large\">&nbsp;&nbsp;因为linux系统是多用户的系统，很多人可以登上一个服务器进行操作，所以一个文件或者目录就会有它的所有者</span></p><p class=\"ql-align-justify\"><strong class=\"ql-size-large\">2.所属组（g）</strong></p><p class=\"ql-align-justify\"><span class=\"ql-size-large\">&nbsp;&nbsp;这个就像一个微信群一样，你在里面就是在所属的组</span></p><p class=\"ql-align-justify\"><strong class=\"ql-size-large\">3.其他 （o）</strong></p><p class=\"ql-align-justify\"><span class=\"ql-size-large\">&nbsp;&nbsp;不属于前两类的就是其他人</span></p><p class=\"ql-align-justify\"><br></p><pre class=\"ql-syntax ql-align-justify\" spellcheck=\"false\">lrwxrwxrwx.1 root root 7 8月  26 10:31 /bin -&gt; usr/bin\n</pre><p class=\"ql-align-justify\"><span class=\"ql-size-large\">当我们对这个三类用户有概念了，我们就可以理解rwxrwxrwx的意思了，第一个rwx是所有者的权限，第二个rwx是所属组的权限，第三个rwx是其他人的权限。我们可能会看到一个（-）的，说明对应的人没有这个权限。</span></p><p class=\"ql-align-justify\"><br></p><p class=\"ql-align-justify\"><span class=\"ql-size-large\">r代表读权限，w代表写权限，x代表执行权限</span></p><p class=\"ql-align-justify\"><br></p><p class=\"ql-align-justify\"><span class=\"ql-size-large\">除了这三类用户外，还是有一个超级用户root，它基本没有什么 限制。</span></p><p class=\"ql-align-justify\"><br></p><p class=\"ql-align-justify\"><br></p><p class=\"ql-align-justify\"><span class=\"ql-size-large\">三、第一个root代表所有者，第二个root代表所属组</span></p><pre class=\"ql-syntax ql-align-justify\" spellcheck=\"false\">drwxr-xr-x.&nbsp;&nbsp;2&nbsp;root&nbsp;root&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;67&nbsp;8月&nbsp;&nbsp;26&nbsp;10:37&nbsp;tuned\n</pre><p class=\"ql-align-justify\"><br></p><p class=\"ql-align-justify\"><span class=\"ql-size-large\">四、508代表这个目录（或文件）有大，这里的大小是指字节</span></p><pre class=\"ql-syntax ql-align-justify\" spellcheck=\"false\">-rw-r--r--.&nbsp;&nbsp;1&nbsp;root&nbsp;root&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;508&nbsp;1月&nbsp;&nbsp;27&nbsp;2014&nbsp;updatedb.conf\n</pre><p class=\"ql-align-justify\"><span class=\"ql-size-large\">我们有说过ls -lh，可以把字节大小转换为 kb、mb单位的</span></p><pre class=\"ql-syntax ql-align-justify\" spellcheck=\"false\">drwxr-xr-x.&nbsp;138&nbsp;root&nbsp;root&nbsp;8.0K&nbsp;9月&nbsp;&nbsp;&nbsp;2&nbsp;08:44&nbsp;etc\n</pre><p class=\"ql-align-justify\"><br></p><p class=\"ql-align-justify\"><span class=\"ql-size-large\">五、8月 26 10:41代表该目录（或文件）的修改时间，linux是没有创建时间的，如果目录（或文件）没有被修改过，这个时间就是创建时间</span></p><pre class=\"ql-syntax ql-align-justify\" spellcheck=\"false\">dr-xr-xr-x.&nbsp;&nbsp;&nbsp;4&nbsp;root&nbsp;root&nbsp;4.0K&nbsp;8月&nbsp;&nbsp;26&nbsp;10:41&nbsp;boot\n</pre><p class=\"ql-align-justify\"><br></p><p class=\"ql-align-justify\"><span class=\"ql-size-large\">六、etc代表目录名（或文件名）</span></p><pre class=\"ql-syntax ql-align-justify\" spellcheck=\"false\">drwxr-xr-x.&nbsp;138&nbsp;root&nbsp;root&nbsp;8.0K&nbsp;9月&nbsp;&nbsp;&nbsp;2&nbsp;08:44&nbsp;etc\n</pre><p class=\"ql-align-justify\"><br></p><p class=\"ql-align-justify\"><span class=\"ql-size-large\">今天也是学习的一天呀！！！</span></p>', '2021-09-02 18:55:14', 'linux', '2021-09-02 18:55:41', 0, 'null', NULL);
INSERT INTO `blog_container` VALUES (104, 'admin', '使用JavaScript获取设备信息', 'navigator.userAgent可以获取系统、设备等信息。所以使用Javascript获取用户的设备信息主要是对字符串的裁剪和拼接操作。', '<p><strong>实现代码</strong></p><p><br></p><p>	 <em style=\"color: rgb(127, 132, 142);\">//&nbsp;获取设备信息</em></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: rgb(198, 120, 221);\">let</span>&nbsp;<span style=\"color: rgb(224, 108, 117);\">agent</span>&nbsp;<span style=\"color: rgb(86, 182, 194);\">=</span>&nbsp;<span style=\"color: rgb(229, 192, 123);\">navigator</span>.<span style=\"color: rgb(224, 108, 117);\">userAgent</span></p><p><br></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<em style=\"color: rgb(127, 132, 142);\">//&nbsp;根据括号进行分割</em></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: rgb(198, 120, 221);\">let</span>&nbsp;<span style=\"color: rgb(224, 108, 117);\">left</span>&nbsp;<span style=\"color: rgb(86, 182, 194);\">=</span>&nbsp;<span style=\"color: rgb(224, 108, 117);\">agent</span>.<span style=\"color: rgb(97, 175, 239);\">indexOf</span>(<span style=\"color: rgb(152, 195, 121);\">\'(\'</span>)</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: rgb(198, 120, 221);\">let</span>&nbsp;<span style=\"color: rgb(224, 108, 117);\">right</span>&nbsp;<span style=\"color: rgb(86, 182, 194);\">=</span>&nbsp;<span style=\"color: rgb(224, 108, 117);\">agent</span>.<span style=\"color: rgb(97, 175, 239);\">indexOf</span>(<span style=\"color: rgb(152, 195, 121);\">\')\'</span>)</p><p><br></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<em style=\"color: rgb(127, 132, 142);\">//&nbsp;获取括号里面的内容</em></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: rgb(198, 120, 221);\">let</span>&nbsp;<span style=\"color: rgb(224, 108, 117);\">str</span>&nbsp;<span style=\"color: rgb(86, 182, 194);\">=</span>&nbsp;<span style=\"color: rgb(224, 108, 117);\">agent</span>.<span style=\"color: rgb(97, 175, 239);\">substring</span>(<span style=\"color: rgb(224, 108, 117);\">left</span>&nbsp;<span style=\"color: rgb(86, 182, 194);\">+</span>&nbsp;<span style=\"color: rgb(209, 154, 102);\">1</span>,&nbsp;<span style=\"color: rgb(224, 108, 117);\">right</span>)</p><p><br></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<em style=\"color: rgb(127, 132, 142);\">//&nbsp;以分号(;)分割字符串</em></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: rgb(198, 120, 221);\">let</span>&nbsp;<span style=\"color: rgb(224, 108, 117);\">Str</span>&nbsp;<span style=\"color: rgb(86, 182, 194);\">=</span>&nbsp;<span style=\"color: rgb(224, 108, 117);\">str</span>.<span style=\"color: rgb(97, 175, 239);\">split</span>(<span style=\"color: rgb(152, 195, 121);\">\';\'</span>)</p><p><br></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<em style=\"color: rgb(127, 132, 142);\">//&nbsp;获取系统名称</em></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color: rgb(198, 120, 221);\">let </span><span style=\"color: rgb(224, 108, 117);\">osName</span>&nbsp;<span style=\"color: rgb(86, 182, 194);\">=</span>&nbsp;<span style=\"color: rgb(224, 108, 117);\">Str</span>[<span style=\"color: rgb(209, 154, 102);\">0</span>].<span style=\"color: rgb(97, 175, 239);\">replace</span>(<span style=\"color: rgb(152, 195, 121);\">\'NT\'</span>,<span style=\"color: rgb(152, 195, 121);\">\'\'</span>)</p><p><br></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<em style=\"color: rgb(127, 132, 142);\">//&nbsp;获取系统版本</em></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: rgb(198, 120, 221);\">let </span><span style=\"color: rgb(224, 108, 117);\">osVersion</span>&nbsp;<span style=\"color: rgb(86, 182, 194);\">=</span>&nbsp;<span style=\"color: rgb(224, 108, 117);\">Str</span>[<span style=\"color: rgb(209, 154, 102);\">1</span>]</p><p><br></p><p><br></p><p><strong>总结：</strong></p><p><strong>以上代码，在</strong><strong style=\"color: rgb(230, 0, 0);\">windows</strong><strong>客户端，系统名称，系统版本，均能能正确获取，手机或者其他设备</strong><strong style=\"color: rgb(230, 0, 0);\">系统名</strong><strong>也能获取，但</strong><strong style=\"color: rgb(230, 0, 0);\">系统版本</strong><strong>(</strong><span style=\"color: rgb(224, 108, 117);\">osVersion</span>&nbsp;<span style=\"color: rgb(86, 182, 194);\">=</span>&nbsp;<span style=\"color: rgb(224, 108, 117);\">Str</span>[<span style=\"color: rgb(209, 154, 102);\">1</span>]<strong>)在某些设备可能无法获取，还需进一步判断！！</strong></p><p><br></p><p><br></p>', '2021-09-03 11:01:35', 'JavaScript', NULL, 0, 'null', NULL);
INSERT INTO `blog_container` VALUES (105, '小白', '目录处理命令', '初学者简单说一下Linux目录处理的命令。如有错误请见谅。', '<p class=\"ql-align-justify\"><span class=\"ql-size-large\">​good good study，day day up！！！</span></p><p class=\"ql-align-justify\"><br></p><p class=\"ql-align-justify\"><strong class=\"ql-size-large\">mkdir</strong></p><p class=\"ql-align-justify\"><span class=\"ql-size-large\">&nbsp;&nbsp;&nbsp;学会处理目录的前提是我们要学会如何创建一个新的目录，linux创建目录的命令是mkdir。但只能写一个mkdir我们只能创建一个二级目录，不能同时创建三级、四级等目录。我们在 tmp的临时目录下创建一下。</span></p><pre class=\"ql-syntax ql-align-justify\" spellcheck=\"false\">[root@ChevyCentos ~]# mkdir /tmp/test\n[root@ChevyCentos ~]# ls /tmp\ntest\n</pre><p class=\"ql-align-justify\"><span class=\"ql-size-large\">&nbsp;&nbsp;&nbsp;mkdir还可以同时创建多个目录</span></p><pre class=\"ql-syntax ql-align-justify\" spellcheck=\"false\">[root@ChevyCentos ~]# mkdir /tmp/test1 /tmp/test2\n[root@ChevyCentos ~]# ls /tmp\ntest&nbsp;&nbsp;test1&nbsp;&nbsp;test2\n</pre><p class=\"ql-align-justify\"><span class=\"ql-size-large\">&nbsp;&nbsp;&nbsp;连续创建递归目录的话，我们需要加一个-p的命令</span></p><pre class=\"ql-syntax ql-align-justify\" spellcheck=\"false\">[root@ChevyCentos ~]# mkdir -p /tmp/test3/xuexi\n[root@ChevyCentos ~]# ls -d /tmp/test3/xuexi\n/tmp/test3/xuexi\n</pre><p class=\"ql-align-justify\"><br></p><p class=\"ql-align-justify\"><strong class=\"ql-size-large\">rmdir</strong></p><p class=\"ql-align-justify\"><span class=\"ql-size-large\">&nbsp;&nbsp;&nbsp;&nbsp;一个不常用的删除命令，只能删除空的目录</span></p><pre class=\"ql-syntax ql-align-justify\" spellcheck=\"false\">[root@ChevyCentos ~]# mkdir /tmp/test4\n[root@ChevyCentos ~]# ls -d /tmp/test4\n/tmp/test4\n[root@ChevyCentos ~]# rmdir /tmp/test4\n[root@ChevyCentos ~]# ls -d /tmp/test4\nls:&nbsp;无法访问/tmp/test4:&nbsp;没有那个文件或目录\n</pre><p class=\"ql-align-justify\"><br></p><p class=\"ql-align-justify\"><strong class=\"ql-size-large\">cd</strong></p><p class=\"ql-align-justify\"><strong class=\"ql-size-large\">&nbsp;&nbsp;&nbsp;&nbsp;</strong><span class=\"ql-size-large\">这个命令是进入某个目录中，和window打开一个文件卡一样。只要填写进入的路径就可以了。</span></p><pre class=\"ql-syntax ql-align-justify\" spellcheck=\"false\">[root@ChevyCentos ~]# cd /tmp\n[root@ChevyCentos&nbsp;tmp]#&nbsp;\n[root@ChevyCentos ~]# cd /tmp/test\n[root@ChevyCentos&nbsp;test]#&nbsp;\n</pre><p class=\"ql-align-justify\"><strong class=\"ql-size-large\">&nbsp;&nbsp;&nbsp;&nbsp;</strong><span class=\"ql-size-large\">有进入肯定要退出某个目录，(cd ..)这个命令就可以退后到上一级的目录中。Linux的格式是非常严格的，cd和..中间有一个空格不要忘了。</span></p><pre class=\"ql-syntax ql-align-justify\" spellcheck=\"false\">[root@ChevyCentos ~]# cd /tmp/test\n[root@ChevyCentos test]# cd ..\n[root@ChevyCentos&nbsp;tmp]#&nbsp;\n</pre><p class=\"ql-align-justify\"><strong class=\"ql-size-large\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong><span class=\"ql-size-large\">一级一级的退出，肯定有人觉得好麻烦的吧。有没有一下子全部退出的，答案肯定是有的，直接cd就好了。</span></p><pre class=\"ql-syntax ql-align-justify\" spellcheck=\"false\">[root@ChevyCentos tmp]# cd /tmp/test\n[root@ChevyCentos test]# cd\n[root@ChevyCentos&nbsp;~]#&nbsp;\n</pre><p class=\"ql-align-justify\"><br></p><p class=\"ql-align-justify\"><strong class=\"ql-size-large\">pwd</strong></p><p class=\"ql-align-justify\"><span class=\"ql-size-large\">&nbsp;&nbsp;&nbsp;&nbsp;当我们进入了很多的目录，有搞了很多的事情，忘记了这个目录（或文件）的路径的时候就可以用到这个命令了</span></p><pre class=\"ql-syntax ql-align-justify\" spellcheck=\"false\">[root@ChevyCentos xuexi]# pwd\n/tmp/test3/xuexi\n</pre><p class=\"ql-align-justify\"><br></p><p class=\"ql-align-justify\"><strong class=\"ql-size-large\">cp</strong></p><p class=\"ql-align-justify\"><span class=\"ql-size-large\">&nbsp;&nbsp;&nbsp;此cp非cp，是copy的意思。大家都是懂啦，就像我们一直使用的Ctrl C+V啦。当我们复制文件的时候，不需要加其他的选项命令，直接使用cp就可以了。格式：cp 【原文件路径】【空格】【需要复制到的路径】</span></p><pre class=\"ql-syntax ql-align-justify\" spellcheck=\"false\">[root@ChevyCentos&nbsp;~]#&nbsp;cp&nbsp;/chevyhome/test.msg&nbsp;/tmp\n[root@ChevyCentos ~]# ls -l /tmp/test.msg\n-rw-r--r--.&nbsp;1&nbsp;root&nbsp;root&nbsp;196&nbsp;9月&nbsp;&nbsp;&nbsp;3&nbsp;11:24&nbsp;/tmp/test.msg\n</pre><p class=\"ql-align-justify\"><span class=\"ql-size-large\">&nbsp;&nbsp;&nbsp;当我们需要复制某个目录的时候，在cp后面加一个-r就可以了。会把目录里的文件也一起复制过去，但 不能保留原文件的属性。</span></p><pre class=\"ql-syntax ql-align-justify\" spellcheck=\"false\">[root@ChevyCentos&nbsp;~]#&nbsp;cp&nbsp;-r&nbsp;/chevyhome/&nbsp;/tmp\n[root@ChevyCentos ~]# ls -ld /tmp/chevyhome/\ndrwxrwxrwx.&nbsp;2&nbsp;root&nbsp;root&nbsp;52&nbsp;9月&nbsp;&nbsp;&nbsp;1&nbsp;09:09&nbsp;/tmp/chevyhome\n[root@ChevyCentos ~]# ls -l /tmp/chevyhome/\n总用量 4\n-rw-r--r--. 1 root root   0 9月   3 11:25 test\n-rw-r--r--.&nbsp;1&nbsp;root&nbsp;root&nbsp;196&nbsp;9月&nbsp;&nbsp;&nbsp;3&nbsp;11:25&nbsp;test.msg\n</pre><p class=\"ql-align-justify\"><span class=\"ql-size-large\">&nbsp;&nbsp;&nbsp;当我们需要复制某个文件而且要保留它原来的属性的时候，我们就需要一个-p的选项命令。但cp -p只能复制文件，所以我们需要结合-r一起使用就可以复制原属性的目录和原属性的文件（cp -rp）。</span></p><pre class=\"ql-syntax ql-align-justify\" spellcheck=\"false\">[root@ChevyCentos&nbsp;chevyhome]#&nbsp;cp&nbsp;-p&nbsp;/chevyhome/test.msg&nbsp;/tmp\n[root@ChevyCentos chevyhome]# ls -ld /tmp/test.msg \n-rw-r--r--.&nbsp;1&nbsp;root&nbsp;root&nbsp;196&nbsp;9月&nbsp;&nbsp;&nbsp;1&nbsp;09:09&nbsp;/tmp/test.msg\n[root@ChevyCentos chevyhome]# cp -rp /chevyhome/ /tmp\n[root@ChevyCentos chevyhome]# ls -ld /tmp/chevyhome/\ndrwxrwxrwx. 2 root root 52 9月   1 09:09 /tmp/chevyhome/\n[root@ChevyCentos chevyhome]# ls -l /tmp/chevyhome/\n总用量 4\n-rw-r--r--. 1 root root   0 8月  31 08:52 test\n-rw-r--r--.&nbsp;1&nbsp;root&nbsp;root&nbsp;196&nbsp;9月&nbsp;&nbsp;&nbsp;1&nbsp;09:09&nbsp;test.msg\n</pre><p class=\"ql-align-justify\"><br></p><p class=\"ql-align-justify\"><strong class=\"ql-size-large\">mv</strong></p><p class=\"ql-align-justify\"><span class=\"ql-size-large\">&nbsp;&nbsp;&nbsp;这个命令有两个作用：一是剪切，二是给文件改名。剪切大家应该都很容易就能理解，但为什么改名呢。其实在剪切的过程就可以变成文件的名字，把文件剪切在同一个目录不就等于改名了嘛。</span></p><p class=\"ql-align-justify\"><span class=\"ql-size-large\">&nbsp;&nbsp;&nbsp;1.剪切</span></p><pre class=\"ql-syntax ql-align-justify\" spellcheck=\"false\">[root@ChevyCentos ~]# ls /chevyhome/\ntest  test.msg\n[root@ChevyCentos ~]# ls /tmp\n[root@ChevyCentos ~]# mv /chevyhome/test /tmp/test\n[root@ChevyCentos ~]# ls /tmp\ntest\n[root@ChevyCentos ~]# ls /chevyhome/\ntest.msg\n</pre><p class=\"ql-align-justify\"><span class=\"ql-size-large\">&nbsp;&nbsp;&nbsp;&nbsp;</span></p><pre class=\"ql-syntax ql-align-justify\" spellcheck=\"false\">#剪切过程中改名\n[root@ChevyCentos ~]# ls /chevyhome/\ntest.msg\n[root@ChevyCentos ~]# ls /tmp\ntest\n[root@ChevyCentos ~]# mv /tmp/test /chevyhome/test1\n[root@ChevyCentos ~]# ls /tmp\n[root@ChevyCentos ~]# ls /chevyhome/\ntest1&nbsp;&nbsp;test.msg\n</pre><p class=\"ql-align-justify\"><span class=\"ql-size-large\">&nbsp;&nbsp;&nbsp;2.改名</span></p><pre class=\"ql-syntax ql-align-justify\" spellcheck=\"false\">[root@ChevyCentos ~]# ls /chevyhome/\ntest1  test.msg\n[root@ChevyCentos ~]# ls /tmp\n[root@ChevyCentos ~]# ls /chevyhome/\ntest1  test.msg\n[root@ChevyCentos ~]# mv /chevyhome/test1 /chevyhome/test2\n[root@ChevyCentos ~]# ls /chevyhome/\ntest2&nbsp;&nbsp;test.msg\n</pre><p class=\"ql-align-justify\"><br></p><p class=\"ql-align-justify\"><strong class=\"ql-size-large\">rm</strong></p><p class=\"ql-align-justify\"><span class=\"ql-size-large\">&nbsp;&nbsp;&nbsp;这个命令使用的时候要小心一点啊，不是开玩笑的，等等真的就是删库跑路了。直接使用rm可以删除文件，但不能删除目录。</span></p><pre class=\"ql-syntax ql-align-justify\" spellcheck=\"false\">[root@ChevyCentos ~]# rm /chevyhome/test2\nrm：是否删除普通空文件&nbsp;\"/chevyhome/test2\"？y\n</pre><p class=\"ql-align-justify\"><span class=\"ql-size-large\">&nbsp;&nbsp;&nbsp;当我们没有使用（-f）强制删除时，使用rm删除系统都会问我们一遍是否删除。当我们删除的是目录时，每个文件都会问我们一遍，但使用了 （-f）就不询问直接删除。</span></p><pre class=\"ql-syntax ql-align-justify\" spellcheck=\"false\">[root@ChevyCentos ~]# ls /chevyhome/\ntest3  test.msg\n[root@ChevyCentos ~]# rm -f /chevyhome/test3\n[root@ChevyCentos ~]# ls /chevyhome/\ntest.msg\n</pre><p class=\"ql-align-justify\"><span class=\"ql-size-large\">&nbsp;&nbsp;&nbsp;前面都是删除文件的命令，删除目录加一个选项命令（-r）就行了。加上（-f）就可以直接强制删除目录。</span></p><p class=\"ql-align-justify\"><span class=\"ql-size-large\">&nbsp;&nbsp;&nbsp;rm -r</span></p><pre class=\"ql-syntax ql-align-justify\" spellcheck=\"false\">[root@ChevyCentos ~]# ls /chevyhome/\ntest4  test.msg\n[root@ChevyCentos ~]# rm -r /chevyhome/test4\nrm：是否删除目录 \"/chevyhome/test4\"？y\n[root@ChevyCentos ~]# ls /chevyhome/\ntest.msg\n</pre><p class=\"ql-align-justify\"><span class=\"ql-size-large\">&nbsp;&nbsp;&nbsp;rm -rf</span></p><pre class=\"ql-syntax ql-align-justify\" spellcheck=\"false\">[root@ChevyCentos ~]# ls /chevyhome/\ntest5  test.msg\n[root@ChevyCentos ~]# rm -rf /chevyhome/test5\n[root@ChevyCentos ~]# ls /chevyhome/\ntest.msg\n</pre><p class=\"ql-align-justify\"><br></p><p class=\"ql-align-justify\"><strong class=\"ql-size-large\">重要的事情！！！</strong></p><p class=\"ql-align-justify\"><span class=\"ql-size-large\">千万不要尝试</span><strong class=\"ql-size-large\">rm -rf /*</strong></p><p class=\"ql-align-justify\"><strong class=\"ql-size-large\">系统会直接全部被删除！！！</strong></p><p class=\"ql-align-justify\"><strong class=\"ql-size-large\">我也没尝试过，你们想试一下也是可以的（滑稽）</strong></p><p class=\"ql-align-justify\"><br></p><p class=\"ql-align-justify\"><span class=\"ql-size-large\">今天也是学习的一天！！！</span></p><p><br></p>', '2021-09-04 08:46:27', 'linux', NULL, 0, 'null', NULL);
INSERT INTO `blog_container` VALUES (106, 'admin', '增加回复评论功能', '实现原理:在【根】评论id下进行回复，查询评论时，只需查询根id，就能匹配出该评论下的所有【子评论】回复', '<h3><strong class=\"ql-size-large\">一、数据库设计：</strong></h3><p><br></p><h4><strong class=\"ql-size-large\">1、 blog_container: 用于保存网站帖子相关信息</strong></h4><p><br></p><p><strong style=\"color: rgb(255, 153, 0);\">表字段 </strong><strong>                  </strong><strong style=\"color: rgb(255, 153, 0);\">字段说明</strong></p><p><br></p><p><strong>Id                          主键(文章id)</strong></p><p><br></p><p><strong>Author                 发布人</strong></p><p><br></p><p><strong>Title                     文章主题</strong></p><p><br></p><p><strong>Description         文章简介</strong></p><p><br></p><p><strong>Container            文章主体内容</strong></p><p><br></p><p><strong>Createdate          发布日期</strong></p><p><br></p><p><strong>Tag                      文章类型</strong></p><p><br></p><p><strong>Lastdate              文章最后修改时间</strong></p><p><br></p><p><br></p><p><strong class=\"ql-size-large\">2、comment ：保存评论相关信息</strong></p><p><br></p><p><strong style=\"color: rgb(255, 153, 0);\">表字段 </strong><strong>                         </strong><strong style=\"color: rgb(255, 153, 0);\">字段说明</strong></p><p><br></p><p><strong>Id                                主键(评论者id)</strong></p><p><br></p><h4><strong>blog_container_id     文章id(blog_container数据表的id)，有来区分评论 来自那篇文章</strong></h4><p><br></p><p><strong>username                    评论者名称</strong></p><p><br></p><p><strong>comment                     评论内容</strong></p><p><br></p><p><strong>Createdate                  评论时间</strong></p><p><br></p><p><strong>osName                       评论者的设备系统名称</strong></p><p><br></p><p><strong>osVersion                    评论者的设备版本</strong></p><p><br></p><p><strong>topic_title                    帖子主题(评论的文章标题)</strong></p><p><br></p><p><br></p><p><strong class=\"ql-size-large\">3、comment_replay ：保存回复评论相关信息</strong></p><p><br></p><p><strong style=\"color: rgb(255, 153, 0);\">表字段 </strong><strong>                         </strong><strong style=\"color: rgb(255, 153, 0);\">字段说明</strong></p><p><br></p><p><strong>id                                  主键(回复评论者id)</strong></p><p><br></p><p><strong>comment_id                comment表的id，用于记录该条回复的根ID，查询评论时，只需查询根id，就能匹配出该评论下的所有【子评论】回复</strong></p><p><br></p><p><strong>username                    回复评论者名称</strong></p><p><br></p><p><strong>comment                     回复评论内容</strong></p><p><br></p><p><strong>Createdate                  回复评论时间</strong></p><p><br></p><p><strong>osName                       回复评论者的设备系统名称</strong></p><p><br></p><p><strong>osVersion                    回复评论者的设备版本</strong></p><p><br></p><p><strong>topic_title                    回复帖子主题(评论的文章标题)</strong></p><p><br></p><h4><strong>blog_container_id </strong>    <strong> 当前回复帖子的id（blog_container 表的id）用于区分该条回复来自那篇文章</strong></h4><p><br></p><p><br></p><p><br></p><p><strong>获取所有回复SQL查询代码：</strong><strong style=\"color: rgb(240, 102, 102);\">select comment_replay.* from comment,comment_replay where comment.blog_container_id=$blog_id and comment_replay.comment_id=comment.id</strong></p><p><br></p><p><br></p><p><br></p><h4><strong>    </strong></h4>', '2021-09-05 11:40:18', 'sql', NULL, 0, 'null', NULL);
INSERT INTO `blog_container` VALUES (107, 'admin', '使用PHP爬取Bing每日图形壁纸----作为本网站的壁纸', '使用PHP爬取Bing（必应搜索网）每日图形壁纸，Bing搜索的首页每天都会推送一张很漂亮的图片，把它保存下来，当做电脑桌面或是自己的网站背景图还不是美滋滋…… 微笑', '<p><br></p><p><span class=\"ql-size-large\" style=\"background-color: rgba(255, 255, 255, 0.68); color: rgb(0, 0, 0);\">既然要抓取这张图片，首先就得弄清这张图是从何而来的。经过对必应首页的抓包，我们可以获得首页图的获取API。它的格式是这样的：</span></p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\">http://cn.bing.com/HPImageArchive.aspx?<span class=\"hljs-keyword\">format</span>=js<span class=\"hljs-variable\">&amp;idx</span>=0<span class=\"hljs-variable\">&amp;n</span>=1\n</pre><p><br></p><p><br></p><p><span class=\"ql-size-large\">注意，这里有几个GET参数，它们的作用分别是：</span></p><ul><li><span class=\"ql-size-large\">n，必要参数。这是输出信息的数量。比如n=1，即为1条，以此类推，至多输出8条。</span></li></ul><p><br></p><ul><li><span class=\"ql-size-large\">format，非必要。返回结果的格式，不存在或者等于xml时，输出为xml格式，等于js时，输出json格式</span></li></ul><p><br></p><ul><li><span class=\"ql-size-large\">idx，非必要。不存在或者等于0时，输出当天的图片，-1为已经预备用于明天显示的信息，1则为昨天的图片，以此类推，idx最多获取到前16天的图片信息</span></li></ul><p><span class=\"ql-size-large\"><span class=\"ql-cursor\">﻿</span></span></p><p><span class=\"ql-size-large\">这里将n设定为1、format设定为js、idx设定为1，去发出GET请求，返回的数据是这样的：</span></p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\">{\n&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-string\">\"images\"</span>:&nbsp;[\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-string\">\"startdate\"</span>:&nbsp;<span class=\"hljs-string\">\"20161222\"</span>,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-string\">\"fullstartdate\"</span>:&nbsp;<span class=\"hljs-string\">\"201612221600\"</span>,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-string\">\"enddate\"</span>:&nbsp;<span class=\"hljs-string\">\"20161223\"</span>,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-string\">\"url\"</span>:&nbsp;<span class=\"hljs-string\">\"/az/hprichbg/rb/TheDomeEdinburgh_ZH-CN11993142817_1920x1080.jpg\"</span>,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-string\">\"urlbase\"</span>:&nbsp;<span class=\"hljs-string\">\"/az/hprichbg/rb/TheDomeEdinburgh_ZH-CN11993142817\"</span>,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-string\">\"copyright\"</span>:&nbsp;<span class=\"hljs-string\">\"爱丁堡一家叫做The&nbsp;Dome的夜店，苏格兰&nbsp;(©&nbsp;Marty&nbsp;McKillop/500px)\"</span>,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-string\">\"copyrightlink\"</span>:&nbsp;<span class=\"hljs-string\">\"http://www.bing.com/search?q=The+Dome,+Edinburgh&amp;form=hpcapt&amp;mkt=zh-cn\"</span>,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-string\">\"quiz\"</span>:&nbsp;<span class=\"hljs-string\">\"/search?q=Bing+homepage+quiz&amp;filters=WQOskey:%22HPQuiz_20161222_TheDomeEdinburgh%22&amp;FORM=HPQUIZ\"</span>,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-string\">\"wp\"</span>:&nbsp;false,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-string\">\"hsh\"</span>:&nbsp;<span class=\"hljs-string\">\"376393c9b49c6d8d1a6e7c2d38343105\"</span>,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-string\">\"drk\"</span>:&nbsp;<span class=\"hljs-number\">1</span>,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-string\">\"top\"</span>:&nbsp;<span class=\"hljs-number\">1</span>,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-string\">\"bot\"</span>:&nbsp;<span class=\"hljs-number\">1</span>,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-string\">\"hs\"</span>:&nbsp;[]\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;],\n&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-string\">\"tooltips\"</span>:&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-string\">\"loading\"</span>:&nbsp;<span class=\"hljs-string\">\"正在加载...\"</span>,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-string\">\"previous\"</span>:&nbsp;<span class=\"hljs-string\">\"上一个图像\"</span>,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-string\">\"next\"</span>:&nbsp;<span class=\"hljs-string\">\"下一个图像\"</span>,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-string\">\"walle\"</span>:&nbsp;<span class=\"hljs-string\">\"此图片不能下载用作壁纸。\"</span>,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-string\">\"walls\"</span>:&nbsp;<span class=\"hljs-string\">\"下载今日美图。仅限用作桌面壁纸。\"</span>\n&nbsp;&nbsp;&nbsp;&nbsp;}\n}\n</pre><p><br></p><p><br></p><p><span class=\"ql-size-large\" style=\"background-color: rgba(255, 255, 255, 0.68); color: rgb(0, 0, 0);\">其中的“images”节点下的“url”值便是我们要获取的图像地址。我们把它取出来，再加上Bing的网址前缀(http://cn.bing.com)即组合成了完整的图像地址。比如说上面返回数据的完整图像地址是这样的：</span></p><pre class=\"ql-syntax\" spellcheck=\"false\">http://<span class=\"hljs-keyword\">cn</span>.bing.<span class=\"hljs-keyword\">com</span>/<span class=\"hljs-keyword\">th</span>?id=OHR.GCVenice_ZH-CN0993336331_1920x1080.jpg&amp;rf=LaDigue_1920x1080.jpg&amp;pid=hp\n</pre><p><br></p><p><br></p><p><span class=\"ql-size-large\" style=\"background-color: rgba(255, 255, 255, 0.68); color: rgb(230, 0, 0);\">知道了背景图的获取方式，接下来就是用PHP去动态抓取了。PHP实现代码如下：</span></p><p><br></p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\">&lt;?php\n<span class=\"hljs-variable\">$str</span> = file_get_contents(<span class=\"hljs-string\">\'http://cn.bing.com/HPImageArchive.aspx?idx=0&amp;n=1\'</span>);   <span class=\"hljs-regexp\">//</span> 从bing获取数据\n&nbsp;\n<span class=\"hljs-keyword\">if</span>(preg_match(<span class=\"hljs-string\">\'/&lt;url&gt;([^&lt;]+)&lt;/url&gt;/isU\'</span>, <span class=\"hljs-variable\">$str</span>, <span class=\"hljs-variable\">$matches</span>)) { <span class=\"hljs-regexp\">//</span> 正则匹配抓取图片url<span class=\"hljs-variable\">$imgurl</span> = <span class=\"hljs-string\">\'http://cn.bing.com\'</span>.<span class=\"hljs-variable\">$matches</span>[<span class=\"hljs-number\">1</span>];\n} <span class=\"hljs-keyword\">else</span> {  <span class=\"hljs-regexp\">//</span> 如果由于某些原因，没抓取到图片地址<span class=\"hljs-variable\">$imgurl</span> = <span class=\"hljs-string\">\'http://img.infinitynewtab.com/InfinityWallpaper/2_14.jpg\'</span>; <span class=\"hljs-regexp\">//</span> 使用默认的图像(默认图像链接可修改为自己的)\n}\n&nbsp;\nheader(<span class=\"hljs-string\">\"Location: {$imgurl}\"</span>);    <span class=\"hljs-regexp\">//</span> 跳转至目标图像\n</pre><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><span class=\"ql-size-large\" style=\"background-color: rgba(255, 255, 255, 0.68); color: rgb(0, 0, 0);\">如果想要抓取这张图片并保存到服务器呢？代码如下</span></p><p><br></p><ol><li>&lt;?php</li><li><br></li><li><span style=\"color: rgb(221, 0, 0);\">$path</span>&nbsp;=&nbsp;\'temp\';&nbsp;&nbsp;&nbsp;<span style=\"color: green;\">//设置图片缓存文件夹</span></li><li><span style=\"color: rgb(221, 0, 0);\">$filename</span>&nbsp;=&nbsp;<span style=\"color: black;\">date</span>(<span style=\"color: blue;\">\"Ymd\"</span>)&nbsp;.&nbsp;\'.jpg\';&nbsp;&nbsp;<span style=\"color: green;\">//用年月日来命名新的文件名</span></li><li><span style=\"color: blue;\">if</span>&nbsp;(!<span style=\"color: black;\">file_exists</span>(<span style=\"color: rgb(221, 0, 0);\">$path</span>.\'/\'.&nbsp;<span style=\"color: rgb(221, 0, 0);\">$filename</span>))&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: green;\">//如果文件不存在，则说明今天还没有进行缓存</span></li><li>{</li><li>&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: blue;\">if</span>(!<span style=\"color: black;\">file_exists</span>(<span style=\"color: rgb(221, 0, 0);\">$path</span>))&nbsp;<span style=\"color: green;\">//如果目录不存在</span></li><li>&nbsp;&nbsp;&nbsp;&nbsp;{</li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: black;\">mkdir</span>(<span style=\"color: rgb(221, 0, 0);\">$path</span>,&nbsp;0777);&nbsp;<span style=\"color: green;\">//创建缓存目录</span></li><li>&nbsp;&nbsp;&nbsp;&nbsp;}</li><li>&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: rgb(221, 0, 0);\">$str</span>&nbsp;=&nbsp;<span style=\"color: black;\">file_get_contents</span>(\'http://cn.bing.com/HPImageArchive.aspx?format=js&amp;idx=0&amp;n=1\');<span style=\"color: green;\">&nbsp;//读取必应api，获得相应数据</span></li><li>&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: rgb(221, 0, 0);\">$str</span>&nbsp;=&nbsp;json_decode(<span style=\"color: rgb(221, 0, 0);\">$str</span>,true);</li><li>&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: rgb(221, 0, 0);\">$imgurl</span>&nbsp;=&nbsp;\'http://cn.bing.com\'.$str[\'images\'][0][\'url\'];<span style=\"color: green;\">&nbsp;&nbsp;&nbsp;&nbsp;//获取图片url</span></li><li>&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: rgb(221, 0, 0);\">$img</span>&nbsp;=&nbsp;grabImage(<span style=\"color: rgb(221, 0, 0);\">$imgurl</span>,&nbsp;<span style=\"color: rgb(221, 0, 0);\">$path</span>.\'/\'.<span style=\"color: rgb(221, 0, 0);\">$filename</span>);&nbsp;<span style=\"color: green;\">//读取并保存图片</span></li><li>&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: rgb(221, 0, 0);\">$handle</span>&nbsp;=&nbsp;<span style=\"color: black;\">fopen</span>(<span style=\"color: blue;\">\"dat.txt\"</span>,&nbsp;<span style=\"color: blue;\">\"a\"</span>);&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: green;\">//用于存放图片信息，如果不需要保存图片的相关信息，可以把下面这些去掉。</span></li><li>&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: blue;\">if</span>&nbsp;(<span style=\"color: rgb(221, 0, 0);\">$handle</span>)</li><li>&nbsp;&nbsp;&nbsp;&nbsp;{</li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: rgb(221, 0, 0);\">$copyright</span>&nbsp;=&nbsp;<span style=\"color: rgb(221, 0, 0);\">$str</span>[\'images\'][0][\'copyright\'];&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: green;\">//说明</span></li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: rgb(221, 0, 0);\">$startdate</span>&nbsp;=&nbsp;<span style=\"color: rgb(221, 0, 0);\">$str</span>[\'images\'][0][\'startdate\'];</li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: rgb(221, 0, 0);\">$fullstartdate</span>&nbsp;=&nbsp;<span style=\"color: rgb(221, 0, 0);\">$str</span>[\'images\'][0][\'fullstartdate\'];</li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: rgb(221, 0, 0);\">$enddate</span>&nbsp;=&nbsp;<span style=\"color: rgb(221, 0, 0);\">$str</span>[\'images\'][0][\'enddate\'];</li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: rgb(221, 0, 0);\">$urlbase</span>&nbsp;=&nbsp;<span style=\"color: rgb(221, 0, 0);\">$str</span>[\'images\'][0][\'urlbase\'];</li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: rgb(221, 0, 0);\">$copyrightlink</span>&nbsp;=&nbsp;<span style=\"color: rgb(221, 0, 0);\">$str</span>[\'images\'][0][\'copyrightlink\'];</li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: rgb(221, 0, 0);\">$quiz</span>&nbsp;=&nbsp;<span style=\"color: rgb(221, 0, 0);\">$str</span>[\'images\'][0][\'quiz\'];</li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: rgb(221, 0, 0);\">$wp</span>&nbsp;=&nbsp;<span style=\"color: rgb(221, 0, 0);\">$str</span>[\'images\'][0][\'wp\'];</li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: rgb(221, 0, 0);\">$hsh</span>&nbsp;=&nbsp;<span style=\"color: rgb(221, 0, 0);\">$str</span>[\'images\'][0][\'hsh\'];</li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: rgb(221, 0, 0);\">$drk</span>&nbsp;=&nbsp;<span style=\"color: rgb(221, 0, 0);\">$str</span>[\'images\'][0][\'drk\'];</li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: rgb(221, 0, 0);\">$top</span>&nbsp;=&nbsp;<span style=\"color: rgb(221, 0, 0);\">$str</span>[\'images\'][0][\'top\'];</li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: rgb(221, 0, 0);\">$bot</span>&nbsp;=&nbsp;<span style=\"color: rgb(221, 0, 0);\">$str</span>[\'images\'][0][\'bot\'];</li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: rgb(221, 0, 0);\">$tempArr</span>&nbsp;=&nbsp;<span style=\"color: blue;\">array</span>(<span style=\"color: blue;\">\"imgurl\"</span>=&gt;<span style=\"color: rgb(221, 0, 0);\">$imgurl</span>,<span style=\"color: blue;\">\"copyright\"</span>=&gt;<span style=\"color: rgb(221, 0, 0);\">$copyright</span>,&nbsp;<span style=\"color: blue;\">\"startdate\"</span>=&gt;<span style=\"color: rgb(221, 0, 0);\">$startdate</span>,</li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: blue;\">\"fullstartdate\"</span>=&gt;<span style=\"color: rgb(221, 0, 0);\">$fullstartdate</span>,&nbsp;<span style=\"color: blue;\">\"enddate\"</span>=&gt;&nbsp;<span style=\"color: rgb(221, 0, 0);\">$enddate</span>,&nbsp;<span style=\"color: blue;\">\"urlbase\"</span>=&gt;<span style=\"color: rgb(221, 0, 0);\">$urlbase</span>,</li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: blue;\">\"copyrightlink\"</span>=&gt;&nbsp;<span style=\"color: rgb(221, 0, 0);\">$copyrightlink</span>,&nbsp;<span style=\"color: blue;\">\"quiz\"</span>=&gt;<span style=\"color: rgb(221, 0, 0);\">$quiz</span>,&nbsp;<span style=\"color: blue;\">\"wp\"</span>=&gt;&nbsp;<span style=\"color: rgb(221, 0, 0);\">$wp</span>,</li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: blue;\">\"hsh\"</span>=&gt;<span style=\"color: rgb(221, 0, 0);\">$hsh</span>,<span style=\"color: blue;\">\"drk\"</span>=&gt;<span style=\"color: rgb(221, 0, 0);\">$drk</span>,&nbsp;<span style=\"color: blue;\">\"top\"</span>=&gt;&nbsp;<span style=\"color: rgb(221, 0, 0);\">$top</span>,&nbsp;<span style=\"color: blue;\">\"bot\"</span>=&gt;&nbsp;<span style=\"color: rgb(221, 0, 0);\">$bot</span>);&nbsp;&nbsp;&nbsp;<span style=\"color: green;\">//将相关信息放进数组中</span></li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fwrite(<span style=\"color: rgb(221, 0, 0);\">$handle</span>,&nbsp;json_encode(<span style=\"color: rgb(221, 0, 0);\">$tempArr</span>)&nbsp;.<span style=\"color: blue;\">\" \"</span>);&nbsp;<span style=\"color: green;\">//最终以json格式保存在文本文档中</span></li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fclose(<span style=\"color: rgb(221, 0, 0);\">$handle</span>);</li><li>&nbsp;&nbsp;&nbsp;&nbsp;}</li><li>}</li><li><span style=\"color: green;\">/**</span></li><li><span style=\"color: green;\">&nbsp;*&nbsp;远程抓取图片并保存</span></li><li><span style=\"color: green;\">&nbsp;*&nbsp;@param&nbsp;$url&nbsp;图片url</span></li><li><span style=\"color: green;\">&nbsp;*&nbsp;@param&nbsp;$filename&nbsp;保存名称和路径</span></li><li><span style=\"color: green;\">&nbsp;*/</span></li><li><span style=\"color: blue;\">function</span>&nbsp;grabImage(<span style=\"color: rgb(221, 0, 0);\">$url</span>,&nbsp;<span style=\"color: rgb(221, 0, 0);\">$filename</span>&nbsp;=&nbsp;<span style=\"color: blue;\">\"\"</span>)</li><li>{</li><li>&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: blue;\">if</span>(<span style=\"color: rgb(221, 0, 0);\">$url</span>&nbsp;==&nbsp;<span style=\"color: blue;\">\"\"</span>)&nbsp;<span style=\"color: blue;\">return</span>&nbsp;false;&nbsp;<span style=\"color: green;\">//如果$url地址为空，直接退出</span></li><li>&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: blue;\">if</span>&nbsp;(<span style=\"color: rgb(221, 0, 0);\">$filename</span>&nbsp;==&nbsp;<span style=\"color: blue;\">\"\"</span>)&nbsp;<span style=\"color: green;\">//如果没有指定新的文件名</span></li><li>&nbsp;&nbsp;&nbsp;&nbsp;{</li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: rgb(221, 0, 0);\">$ext</span>&nbsp;=&nbsp;<span style=\"color: black;\">strrchr</span>(<span style=\"color: rgb(221, 0, 0);\">$url</span>,&nbsp;<span style=\"color: blue;\">\".\"</span>);&nbsp;&nbsp;<span style=\"color: green;\">//得到$url的图片格式</span></li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: rgb(221, 0, 0);\">$filename</span>&nbsp;=&nbsp;<span style=\"color: black;\">date</span>(<span style=\"color: blue;\">\"Ymd\"</span>)&nbsp;.&nbsp;<span style=\"color: rgb(221, 0, 0);\">$ext</span>;&nbsp;&nbsp;<span style=\"color: green;\">//用天月面时分秒来命名新的文件名</span></li><li>&nbsp;&nbsp;&nbsp;&nbsp;}</li><li>&nbsp;&nbsp;&nbsp;&nbsp;ob_start();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: green;\">//打开输出</span></li><li>&nbsp;&nbsp;&nbsp;&nbsp;readfile(<span style=\"color: rgb(221, 0, 0);\">$url</span>);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: green;\">//输出图片文件</span></li><li>&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: rgb(221, 0, 0);\">$img</span>&nbsp;=&nbsp;ob_get_contents();&nbsp;&nbsp;&nbsp;<span style=\"color: green;\">//得到浏览器输出</span></li><li>&nbsp;&nbsp;&nbsp;&nbsp;ob_end_clean();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: green;\">//清除输出并关闭</span></li><li>&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: rgb(221, 0, 0);\">$size</span>&nbsp;=&nbsp;<span style=\"color: black;\">strlen</span>(<span style=\"color: rgb(221, 0, 0);\">$img</span>);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: green;\">//得到图片大小</span></li><li>&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: rgb(221, 0, 0);\">$fp2</span>&nbsp;=&nbsp;@<span style=\"color: black;\">fopen</span>(<span style=\"color: rgb(221, 0, 0);\">$filename</span>,&nbsp;<span style=\"color: blue;\">\"a\"</span>);</li><li>&nbsp;&nbsp;&nbsp;&nbsp;fwrite(<span style=\"color: rgb(221, 0, 0);\">$fp2</span>,&nbsp;<span style=\"color: rgb(221, 0, 0);\">$img</span>);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: green;\">//向当前目录写入图片文件，并重新命名</span></li><li>&nbsp;&nbsp;&nbsp;&nbsp;fclose(<span style=\"color: rgb(221, 0, 0);\">$fp2</span>);</li><li>&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: blue;\">return</span>&nbsp;<span style=\"color: rgb(221, 0, 0);\">$filename</span>;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: green;\">//返回新的文件名</span></li></ol><p><br></p><p><br></p><p><span class=\"ql-size-large\" style=\"background-color: rgba(255, 255, 255, 0.68); color: rgb(0, 0, 0);\">如果这个php被访问，它就会自动启动抓取并保存。可以用阿里云监控或其他类型的网站监控服务来实现每天自动运行这个php。</span></p>', '2021-09-05 17:43:03', 'php', '2021-09-07 22:15:50', 0, 'null', NULL);
INSERT INTO `blog_container` VALUES (109, '小白', 'MySQl的增删查改的几种语法格式', '简简单单的一个笔记', '<h1><strong>一、增</strong></h1><p><span class=\"ql-size-large\">&nbsp;1.insert into 表名（字段名,字段名,……） values （值,值,……）;</span></p><p><span class=\"ql-size-large\">&nbsp;2.insert into 表名 set 字段名=值,字段名=值,字段名=值,……;</span></p><h1>二、删</h1><p><span class=\"ql-size-large\">&nbsp;1.单表删除：delete from 表名 【where 筛选条件】;</span></p><p><span class=\"ql-size-large\">&nbsp;2.多表删除：delete 表1的别名,表2的别名 from 表1 别名</span></p><p><span class=\"ql-size-large\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;            &nbsp;inner | left | right&nbsp;join 表2 别名</span></p><p><span class=\"ql-size-large\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;            &nbsp;on 连接条件</span></p><p><span class=\"ql-size-large\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;            &nbsp;where 筛选条件;</span></p><h1><strong>三、查</strong></h1><p><span class=\"ql-size-large\">&nbsp;1.基础查询：select 查询列表 from 表名;</span></p><p><span class=\"ql-size-large\">&nbsp;2.条件查询：select 查询列表 from 表名 where 筛选条件;</span></p><p><span class=\"ql-size-large\">&nbsp;3.排序查询：select 查询列表 from 表名 【where 筛选条件】order by 要排序的列 （asc | desc）;</span></p><p><span class=\"ql-size-large\">&nbsp;4.分组查询：select 查询列表 from 表名&nbsp;【where 分组前筛选条件】group by 分组的字段</span></p><p><span class=\"ql-size-large\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;          【having 分组后的筛选条件】【order by 要排序的列 （asc | desc）】;</span></p><p><span class=\"ql-size-large\">&nbsp;5.多表查询：select 查询列表 from 表1 别名1 【连接类型】 join 表2 别名2 on 连接条件</span></p><p><span class=\"ql-size-large\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;         【where 分组前筛选条件】</span></p><p><span class=\"ql-size-large\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;         【group by 分组的字段】</span></p><p><span class=\"ql-size-large\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;         【having 分组后的筛选条件】</span></p><p><span class=\"ql-size-large\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;         【order by 要排序的列 （asc | desc）】;</span></p><p><span class=\"ql-size-large\">&nbsp;6.分页查询：select 查询列表 from 表名 limit 【offset】,size;</span></p><p><span class=\"ql-size-large\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;           offset=(page-1)*size</span></p><h1><strong>四、改</strong></h1><p><span class=\"ql-size-large\">&nbsp;1.单表修改：update 表名 set 列=值，列=值，…… where 查询条件;</span></p><p><span class=\"ql-size-large\">&nbsp;2.多表修改：update 表1 别名1 inner | left | right&nbsp;join 表2 别名2 on 连接条件</span></p><p><span class=\"ql-size-large\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;           set 列=值,列=值,…… where 查询条件;</span></p>', '2021-09-06 09:12:16', 'SQL', NULL, 0, 'null', NULL);
INSERT INTO `blog_container` VALUES (110, 'admin', '富文本编辑器实现代码高亮问题', '使用vue-quill-editor文本编辑器与 + highlight.js插件实现代码高亮效果', '<p><strong class=\"ql-size-large\">1.安装代码高亮插件</strong></p><pre class=\"ql-syntax\" spellcheck=\"false\">npm install highlight.js --<span class=\"hljs-built_in\">save</span> -<span class=\"hljs-built_in\">dev</span> <span class=\"hljs-comment\">// 代码高亮</span>\n</pre><p><br></p><p><strong class=\"ql-size-large\">2.在 main.js引入 </strong></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-comment\">//&nbsp;引入代码高亮css样式</span>\n<span class=\"hljs-keyword\">import</span>&nbsp;<span class=\"hljs-string\">\'highlight.js/styles/monokai-sublime.css\'</span>\n</pre><p><br></p><p><strong class=\"ql-size-large\">3、在 需要使用富文本框的组件中</strong></p><pre class=\"ql-syntax\" spellcheck=\"false\">// html 代码部分\n<span class=\"hljs-comment\">&lt;!--&nbsp;富文本编辑器&nbsp;--&gt;</span>\n﻿<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">quill-editor</span>&nbsp;<span class=\"hljs-attr\">v-model</span>=<span class=\"hljs-string\">\"editForm.container\"</span>&nbsp;<span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">\"myQuillEditor\"</span>&nbsp;<span class=\"hljs-attr\">:options</span>=<span class=\"hljs-string\">\"editorOption\"</span>&gt;&lt;/<span class=\"hljs-name\">quill-editor</span>&gt;</span>\n</pre><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\">// 引入js\nimport hljs from <span class=\"hljs-string\">\'highlight.js\'</span>;\n\n// data 数据部分\ndata(){ \n  return{ \n    editorOption: {\n       modules: { \n        toolbar: [\n          [<span class=\"hljs-string\">\"bold\"</span>, <span class=\"hljs-string\">\"italic\"</span>, <span class=\"hljs-string\">\"underline\"</span>, <span class=\"hljs-string\">\"strike\"</span>], \n          [<span class=\"hljs-string\">\"blockquote\"</span>, <span class=\"hljs-string\">\"code-block\"</span>], \n          [{ header: <span class=\"hljs-number\">1</span> }, { header: <span class=\"hljs-number\">2</span> }], \n          [{ list: <span class=\"hljs-string\">\"ordered\"</span> }, { list: <span class=\"hljs-string\">\"bullet\"</span> }], \n          [{ script: <span class=\"hljs-string\">\"sub\"</span> }, { script: <span class=\"hljs-string\">\"super\"</span> }], \n          [{ indent: <span class=\"hljs-string\">\"-1\"</span> }, { indent: <span class=\"hljs-string\">\"+1\"</span> }], \n          [{ direction: <span class=\"hljs-string\">\"rtl\"</span> }], \n          [{ size: [<span class=\"hljs-string\">\"small\"</span>, false, <span class=\"hljs-string\">\"large\"</span>, <span class=\"hljs-string\">\"huge\"</span>] }], \n          [{ header: [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, false] }], \n          [{ color: [] }, { background: [] }], \n          [{ font: [] }], [{ align: [] }], \n          [<span class=\"hljs-string\">\"clean\"</span>], [<span class=\"hljs-string\">\"link\"</span>, <span class=\"hljs-string\">\"image\"</span>, <span class=\"hljs-string\">\"video\"</span>]\n                 ],\n           syntax: { \n              highlight: text =&gt; { \n                  return hljs.highlightAuto(text).value; // 这里就是代码高亮需要配置的地方 \n                        }\n                     }\n                  }\n               }\n             }\n         }\n</pre><p><br></p><p><br></p>', '2021-09-06 10:37:30', '前端', NULL, 0, 'null', NULL);
INSERT INTO `blog_container` VALUES (111, 'admin', 'php遍历文件夹获取所有文件', 'php遍历文件夹获取所有文件', '<pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-keyword\">function</span> dir_list(<span class=\"hljs-variable\">$dir</span>) {\n    <span class=\"hljs-regexp\">//</span> 判断temp 文件夹是否存在\n    <span class=\"hljs-keyword\">if</span>(!is_dir(<span class=\"hljs-variable\">$dir</span>)) return false;\n     \n    <span class=\"hljs-regexp\">//</span> 声明一个数组，用于保存文件\n    <span class=\"hljs-variable\">$dir_list</span> = array();\n    \n    <span class=\"hljs-regexp\">//</span> 打开文件夹\n    <span class=\"hljs-variable\">$opendir</span> = opendir(<span class=\"hljs-variable\">$dir</span>);\n    \n    <span class=\"hljs-regexp\">//</span> 打开成功执行事件\n    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-variable\">$opendir</span>) {\n        \n        <span class=\"hljs-regexp\">//</span> readdir 读取文件夹数据，不等于false时表示，读取成功\n        <span class=\"hljs-keyword\">while</span>((<span class=\"hljs-variable\">$file</span> = readdir(<span class=\"hljs-variable\">$opendir</span>)) !== false) {\n            \n            <span class=\"hljs-regexp\">//</span> 如果文件不存在. 或者 .. 证明是文件夹\n            <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-variable\">$file</span> !== <span class=\"hljs-string\">\'.\'</span> &amp;&amp; <span class=\"hljs-variable\">$file</span> !== <span class=\"hljs-string\">\'..\'</span>) {\n                \n                <span class=\"hljs-regexp\">//</span> 继续进入下一级文件夹\n                <span class=\"hljs-variable\">$tem</span> = <span class=\"hljs-variable\">$dir</span> . <span class=\"hljs-string\">\'/\'</span> . <span class=\"hljs-variable\">$file</span>;\n\n                <span class=\"hljs-regexp\">//</span> is_dir() 函数检查指定的文件是否是目录。\n                <span class=\"hljs-keyword\">if</span>(is_dir(<span class=\"hljs-variable\">$tem</span>)) {\n\n                    <span class=\"hljs-variable\">$dir_list</span>[<span class=\"hljs-variable\">$tem</span> . <span class=\"hljs-string\">\'/\'</span>] = <span class=\"hljs-variable\">$file</span> . <span class=\"hljs-string\">\'/\'</span>;\n\n                    dir_list(<span class=\"hljs-variable\">$tem</span>);\n\n                } <span class=\"hljs-keyword\">else</span> {\n                    <span class=\"hljs-regexp\">//</span> 把获取的文件，保存到数组中\n                    <span class=\"hljs-variable\">$dir_list</span>[] = <span class=\"hljs-variable\">$file</span>;\n\n                }\n\n            }\n\n        }\n        <span class=\"hljs-regexp\">//</span> 关闭文件\n        closedir(<span class=\"hljs-variable\">$opendir</span>);\n\n        return <span class=\"hljs-variable\">$dir_list</span>;\n\n    }\n\n}\n \n<span class=\"hljs-regexp\">//</span> 遍历 temp 文件夹所有文件\n<span class=\"hljs-variable\">$dir</span> = dir_list(<span class=\"hljs-string\">\'./temp\'</span>);\n<span class=\"hljs-regexp\">//</span> 打印数据\necho json_encode(<span class=\"hljs-variable\">$dir</span>);\n\n</pre><p><br></p><p><br></p><p><br></p>', '2021-09-06 22:09:03', 'php', NULL, 1, 'null', NULL);
INSERT INTO `blog_container` VALUES (112, 'admin', 'Mysql使用Navicat 连接报错 2003 ', 'Mysql使用Navicat 连接报错 2003 - Can\'t connect to MySQL server on localhost\' (10038)', '<h2>今天使用Mysql使用Navicat 连接报错 2003 - Can\'t connect to MySQL server on localhost\' (10038)</h2><p><br></p><h3>Navicat 连接数据库报错： 2003 - Can’t connect to MySQL server on localhost’ (10038)</h3><p><br></p><p>无法连接到本地主机上的MySQL服务器</p><p>本来以为Mysql的服务没开，到服务里查看发现Mysql的服务都没有，有点尴尬/手动狗头</p><p><br></p><h3>解决办法：</h3><p><strong>1.用管理员命令启动命令符（cmd）</strong></p><p><br></p><p><strong style=\"color: rgb(51, 51, 51);\">2.进入mysql的安装目录的bin目录下执行mysqld.exe -install（我的sql安装位置：</strong><strong>D:appMySQLMySQL Server 5.5in</strong><strong style=\"color: rgb(51, 51, 51);\">）</strong></p><p><br></p><p><strong style=\"color: rgb(51, 51, 51);\">3.启动Mysql服务执行：net start mysql</strong></p>', '2021-09-07 17:14:33', 'SQL', NULL, 1, 'null', NULL);
INSERT INTO `blog_container` VALUES (113, 'admin', 'vue-quill-editor自定义上传图片事件', 'vue-quill-editor自定义上传图片事件：vue-quill-editor组件配合element-ui el-Upload上传图片', '<h2>解决思路</h2><p><br></p><h3>1、使用elementUI的el-upload来上传图片，同时需要隐藏该上传区，当点击富文本编辑器中的图片上传图标时再调用。</h3><h3>2、选择图片后上传至后台，后台再回传图片路径，前端显示图片</h3><p><br></p><p><strong class=\"ql-size-large\">vue-quill-editor</strong></p><pre class=\"ql-syntax\" spellcheck=\"false\">&nbsp;<span class=\"hljs-comment\">&lt;!--&nbsp;富文本编辑器&nbsp;--&gt;</span>\n&nbsp;<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">quill-editor</span>&nbsp;<span class=\"hljs-attr\">v-model</span>=<span class=\"hljs-string\">\"editForm.container\"</span>&nbsp;<span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">\"myQuillEditor\"</span>&nbsp;<span class=\"hljs-attr\">:options</span>=<span class=\"hljs-string\">\"editorOption\"</span>&gt;&lt;/<span class=\"hljs-name\">quill-editor</span>&gt;</span>\n</pre><p><br></p><p><strong class=\"ql-size-large\">el-upload：</strong></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-comment\">&lt;!--&nbsp;图片上传&nbsp;--&gt;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">el-upload</span>&nbsp;<span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">\"display:none\"</span>&nbsp;<span class=\"hljs-attr\">:show-upload-list</span>=<span class=\"hljs-string\">\"false\"</span>&nbsp;<span class=\"hljs-attr\">:on-success</span>=<span class=\"hljs-string\">\"handleSuccess\"</span>&nbsp;<span class=\"hljs-attr\">:format</span>=<span class=\"hljs-string\">\"[\'jpg\',&nbsp;\'jpeg\',&nbsp;\'png\',&nbsp;\'gif\']\"</span>&nbsp;<span class=\"hljs-attr\">:max-size</span>=<span class=\"hljs-string\">\"2048\"</span>&nbsp;<span class=\"hljs-attr\">multiple</span>&nbsp;<span class=\"hljs-attr\">:action</span>=<span class=\"hljs-string\">\"uploadUrl\"</span>&gt;</span>\n<span class=\"hljs-comment\">&lt;!--&nbsp;uploadUrl: 上传链接&nbsp;--&gt;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">el-button</span>&nbsp;<span class=\"hljs-attr\">size</span>=<span class=\"hljs-string\">\"small\"</span>&nbsp;<span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"primary\"</span>&nbsp;<span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"upload-img\"</span>&gt;</span>点击上传<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">el-button</span>&gt;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">el-upload</span>&gt;</span>\n</pre><p><br></p><p><img src=\"http://python.php/vue/vue_blog/vue_blog_server/upload/1631279460666.PNG\"></p><p><br></p><p><br></p><p><strong class=\"ql-size-large\" style=\"color: rgb(77, 77, 77);\">script&gt;中定义图片上传操作：</strong></p><p><img src=\"http://python.php/vue/vue_blog/vue_blog_server/upload/1631279481Snipaste_2021-09-10_20-54-23.PNG\"></p><p><br></p><p><br></p><p><img src=\"http://python.php/vue/vue_blog/vue_blog_server/upload/1631279505Snipaste_2021-09-10_20-56-36.PNG\"></p><p><br></p><p><br></p><p><strong class=\"ql-size-large\">后端获取上传图片代码，这里用PHP实现</strong></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-regexp\">//</span>设置图片保存目录\n<span class=\"hljs-variable\">$path</span> = <span class=\"hljs-string\">\"upload/\"</span>;\n<span class=\"hljs-regexp\">//</span> 如果目录不存在\n<span class=\"hljs-keyword\">if</span>(!file_exists(<span class=\"hljs-variable\">$path</span>)) {\n    <span class=\"hljs-regexp\">//</span> 创建目录\n    mkdir(<span class=\"hljs-variable\">$path</span>,<span class=\"hljs-number\">0777</span>);\n}\n\n<span class=\"hljs-variable\">$file</span> = <span class=\"hljs-variable\">$_FILES</span>[<span class=\"hljs-string\">\'file\'</span>]; <span class=\"hljs-regexp\">//</span> 获取上传的文件\n<span class=\"hljs-variable\">$filename</span>  = <span class=\"hljs-variable\">$file</span>[<span class=\"hljs-string\">\'name\'</span>]; <span class=\"hljs-regexp\">//</span>获取上传的文件名称\n\n<span class=\"hljs-variable\">$time</span> = time(); <span class=\"hljs-regexp\">//</span>time():时间戳，为了防止上传图片同名被覆盖\n\n<span class=\"hljs-variable\">$rootUrl</span> = <span class=\"hljs-string\">\"http://python.php:88/%e5%8d%9a%e5%ae%a2/vue_blog_server/\"</span>;\n\n<span class=\"hljs-keyword\">if</span>(!empty(<span class=\"hljs-variable\">$filename</span>)){\n<span class=\"hljs-regexp\">//</span>移动文件到<span class=\"hljs-variable\">$path</span>(保存路径)+<span class=\"hljs-variable\">$filename</span>(文件名称) 路径中\n <span class=\"hljs-keyword\">if</span>(move_uploaded_file(<span class=\"hljs-variable\">$file</span>[<span class=\"hljs-string\">\'tmp_name\'</span>], <span class=\"hljs-variable\">$path</span>.<span class=\"hljs-variable\">$time</span>.<span class=\"hljs-variable\">$filename</span>)) {\n<span class=\"hljs-regexp\">//</span> <span class=\"hljs-variable\">$rootUrl</span>.<span class=\"hljs-variable\">$path</span>.<span class=\"hljs-variable\">$time</span>.<span class=\"hljs-variable\">$filename</span> 路径拼接，获取图片路径返回给前端\n     <span class=\"hljs-variable\">$res</span> = array(<span class=\"hljs-string\">\'result\'</span> =&gt; array(<span class=\"hljs-string\">\'status\'</span> =&gt; <span class=\"hljs-number\">1</span>,<span class=\"hljs-string\">\'mgs\'</span>=&gt;<span class=\"hljs-string\">\'上传成功！\'</span>,<span class=\"hljs-string\">\'imageUrl\'</span>=&gt;<span class=\"hljs-variable\">$rootUrl</span>.<span class=\"hljs-variable\">$path</span>.<span class=\"hljs-variable\">$time</span>.<span class=\"hljs-variable\">$filename</span>));\n     echo json_encode(<span class=\"hljs-variable\">$res</span>);\n     return;\n }\n    <span class=\"hljs-variable\">$res</span> = array(<span class=\"hljs-string\">\'result\'</span> =&gt; array(<span class=\"hljs-string\">\'status\'</span> =&gt; <span class=\"hljs-number\">0</span>,<span class=\"hljs-string\">\'mgs\'</span>=&gt;<span class=\"hljs-string\">\'上传失败！\'</span>));\n    echo json_encode(<span class=\"hljs-variable\">$res</span>);\n\n}\n</pre><p><br></p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\">echo var_dump(<span class=\"hljs-variable\">$_FILES</span>[<span class=\"hljs-string\">\'file\'</span>]); <span class=\"hljs-regexp\">//</span> 获取上传的文件信息下图\n</pre><p><img src=\"http://python.php/vue/vue_blog/vue_blog_server/upload/1631282476Snipaste_2021-09-10_21-58-19.PNG\"></p><p><br></p><p><br></p><p><br></p>', '2021-09-10 21:12:35', 'vue', '2021-09-10 22:02:53', 1, 'null', NULL);
INSERT INTO `blog_container` VALUES (114, 'admin', 'vue自定义webpakc打包', '新建全局vue.config.js自定义打包', '<p><strong class=\"ql-size-large\">在新建的vue.config.js中自定义打包事件</strong></p><p><br></p><h3><strong style=\"color: rgb(119, 119, 119);\">通过chainWebpack自定义打包入口</strong></h3><pre class=\"ql-syntax\" spellcheck=\"false\">\n\nmodule.exports&nbsp;=&nbsp;{\n        <span class=\"hljs-regexp\">//</span> 打包输出路径\n&nbsp;&nbsp;&nbsp;&nbsp;publicPath:&nbsp;<span class=\"hljs-string\">\'./\'</span>,\n&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-regexp\">//</span>&nbsp;禁止生成map文件\n&nbsp;&nbsp;&nbsp;&nbsp;productionSourceMap:&nbsp;false,\n\n&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-regexp\">//</span>&nbsp;判断当前是开发模式还是生成模式，来选定程序入口\n&nbsp;&nbsp;&nbsp;&nbsp;chainWebpack:config=&gt;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-regexp\">//</span>&nbsp;发布模式\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;config.when(process.env.NODE_ENV&nbsp;===&nbsp;<span class=\"hljs-string\">\'production\'</span>,config&nbsp;=&gt;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;config.entry(<span class=\"hljs-string\">\'app\'</span>).clear().add(<span class=\"hljs-string\">\'./src/main-prod.js\'</span>)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;})\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-regexp\">//</span>&nbsp;开发模式\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;config.when(process.env.NODE_ENV&nbsp;===&nbsp;<span class=\"hljs-string\">\'development\'</span>,config&nbsp;=&gt;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;config.entry(<span class=\"hljs-string\">\'app\'</span>).clear().add(<span class=\"hljs-string\">\'./src/main.js\'</span>)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;})\n\n\n&nbsp;&nbsp;&nbsp;&nbsp;}\n}\n</pre><h6><br></h6><h3><strong class=\"ql-size-large\">2.通过vue.config.js 修改 webpack 的默认配置项</strong></h3><p><br></p><p>通过<strong>vue-cli 3.0</strong> 工具生成的项目，默认隐藏了所有<strong>webpack</strong>的配置选项，如果有修改webpack默认配置的需求，按需创建vue.config.js这个配置文件，从而对项目的打包发布过程做自定义的配置 （具体配置参考<a href=\"https://cli.vuejs.org/zh/config/#/vue-config-js\" rel=\"noopener noreferrer\" target=\"_blank\" style=\"color: rgb(65, 131, 196);\">https://cli.vuejs.org/zh/config/#/vue-config-js</a>）</p><h3><br></h3><h3><strong class=\"ql-size-large\">3.为开发模式与发布模式指定不同的打包入口</strong></h3><p>默认情况下，vue项目的开发模式与发布模式，共用同一个打包入口文件(即src/main.js)。为了将项目的<strong>开发过程</strong>与<strong>发布过程</strong>分离，我们可以为两种模式，各自指定打包入口的文件，即:</p><p>①开发 模式入口的文件为src/main.js</p><p>②发布模式的入口文件为src/main-prod.js</p><p><br></p><h3><span class=\"ql-size-large\">4.configureWebpack和chainWebpack</span></h3><p>在vue.config.js导出配置对象中，新增configureWebpack或chainWebpack节点，来定义webpack的打包配置。</p><p>①chainWebpack通过链式编程的形式，来修改默认的webpack配置</p><p>②configureWebpack通过操作对象方式的形式，来修改默认的webpack配置</p><p><br></p><p><img src=\"http://python.php/vue/vue_blog/vue_blog_server/upload/1631414449Snipaste_2021-09-12_10-40-34.PNG\"></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p>', '2021-09-12 10:47:54', 'vue', NULL, 0, 'null', NULL);
INSERT INTO `blog_container` VALUES (115, '小白', '文件处理命令和链接命令', '小白的笔记：文件处理命令', '<p><span class=\"ql-size-large\">good good study，day day up！</span></p><p><br></p><p><span class=\"ql-size-large\">文件处理命令</span></p><p><br></p><p><span class=\"ql-size-large\">touch：这个命令是创建空的文件。</span></p><p><br></p><p><strong class=\"ql-size-large\">touch 【文件名】</strong><span class=\"ql-size-large\">是当前目录创建</span></p><p><br></p><p><strong class=\"ql-size-large\">touch 【/绝对路径/文件名】</strong><span class=\"ql-size-large\">是在绝对路径指定的地方创建文件</span></p><p><br></p><p><span class=\"ql-size-large\">学会创建文件就应该知道如何的查看文件了。</span></p><p><br></p><p><span class=\"ql-size-large\">cat：显示文件的内容，适合短的文件内容，因为cat命令不能翻页，如果文件太长，我们只能看到最后的内容</span></p><p><br></p><p><strong class=\"ql-size-large\">cat 【文件名】</strong><span class=\"ql-size-large\">是显示文件内容</span></p><p><br></p><p><strong class=\"ql-size-large\">cat -n 【文件名】</strong><span class=\"ql-size-large\">是显示文件内容的同时显示每一行的标号</span></p><p><br></p><p><strong class=\"ql-size-large\">cat -A 【文件名】</strong><span class=\"ql-size-large\">是显示全部文件内容，隐藏的内容也可以显示出来</span></p><p><br></p><p><strong class=\"ql-size-large\">tac 【文件名】</strong><span class=\"ql-size-large\">倒序显示文件内容，是cat命令反过来写，这个命令没有tac -n这个说法</span></p><p><br></p><p><span class=\"ql-size-large\">这么一听cat命令的功能好像不太行，所以linux还有其他的查看命令，继续看我细说。</span></p><p><br></p><p><span class=\"ql-size-large\">more：这个命令就是显示长篇的文件内容的，除了可以显示内容还可以通过关键字查询需要的内容，命令格式（/关键字），通过这个命令所查询的关键字就是变高亮，再通过n查看下一个关键字内容。</span></p><p><br></p><p><strong class=\"ql-size-large\">more 【文件名】</strong><span class=\"ql-size-large\">可以一页一页显示文件内容，空格和按f进行翻页，Enter回车进行一行一行的翻，按q进行退出。但这个命令有一个缺点是不能向上翻页了，过了的内容不能查看的到了。</span></p><p><br></p><p><span class=\"ql-size-large\">这个时候我们就需要一个新的命令了。</span></p><p><br></p><p><span class=\"ql-size-large\">less：可以实现more命令的全部功能，使用的方式和more命令一样，而且还可以向上翻页。</span></p><p><br></p><p><strong class=\"ql-size-large\">less 【文件名】</strong><span class=\"ql-size-large\">可以一页一页显示文件内容，Pgup进行向上翻页，方向键↑向上翻一行。其他功能和more命令一样。</span></p><p><br></p><p><span class=\"ql-size-large\">除了这些功能外，linux还有两个小功能</span></p><p><br></p><p><strong class=\"ql-size-large\">head -n 【文件名】</strong><span class=\"ql-size-large\">显示文件最前面n行，没有n选项就默认10行</span></p><p><br></p><p><strong class=\"ql-size-large\">tail -n 【文件名】</strong><span class=\"ql-size-large\">显示文件最后面n行，没有n选项就默认10行</span></p><p><br></p><p><span class=\"ql-size-large\">链接命令</span></p><p><br></p><p><span class=\"ql-size-large\">首先链接命令分别两种：一是软链接，二是硬链接。</span></p><p><br></p><p><span class=\"ql-size-large\">&nbsp;软链接：</span><strong class=\"ql-size-large\">ln -s 【原文件】【目标文件】【链接名字】</strong></p><p><br></p><p><span class=\"ql-size-large\">linux的软链接作用和windows系统中的快捷方式作用是差不多的，用来指向原文件的，所以软连接的大小会很小，文件的权限也由原文件决定。</span></p><p><br></p><p><span class=\"ql-size-large\">&nbsp;硬链接：</span><strong class=\"ql-size-large\">ln 【原文件】【目标文件】【链接名字】</strong></p><p><br></p><p><span class=\"ql-size-large\">硬链接生成的文件和cp -p命令成的文件差不多，但有一个最大的不同是硬链接可以同步更新原文件的内容。如何知道是cp -p命令的还是ln命令的，可以通过i节点区分，原文件和硬链接的i节点是相同的。</span></p><p><br></p><p><span class=\"ql-size-large\">今天也是学习的一天呀！！！！</span></p>', '2021-09-13 10:43:13', 'linux', NULL, 0, 'null', NULL);
INSERT INTO `blog_container` VALUES (116, 'admin', 'TypeScript环境安装与使用', '本文介绍TypeScript环境安装与使用', '<p><strong class=\"ql-size-large\">一、安装node.js </strong></p><p><span class=\"ql-size-large\">	1、node.js 是独立于浏览器运行的js环境</span></p><p><span class=\"ql-size-large\"> 2、npm 会随着 node 一起安装，npm(包管理器)，可以安装各类工具，尤其是前端工具</span></p><p><br></p><p><br></p><p><strong class=\"ql-size-large\">二、打开cmd控制台，查看是否安装成功</strong></p><p><span class=\"ql-size-large\">	1、检查node 命令，出现如下，表示完成</span></p><p><br></p><p><img src=\"http://python.php/vue/vue_blog/vue_blog_server/upload/1631590996捕获.PNG\"></p><p><br></p><p><span class=\"ql-size-large\">2、检查 npm</span></p><p><img src=\"http://python.php/vue/vue_blog/vue_blog_server/upload/1631595945Snipaste_2021-09-14_13-05-19.PNG\"></p><p><br></p><p><strong class=\"ql-size-large\">三、全局安装TypeScript</strong></p><p><span class=\"ql-size-large\">	1、npm install -g typescript</span></p><p><span class=\"ql-size-large\">	2、检查TypeScript</span></p><p><br></p><p><img src=\"http://python.php/vue/vue_blog/vue_blog_server/upload/1631596208Snipaste_2021-09-14_13-09-02.PNG\"></p><p><br></p><p><span class=\"ql-size-large\">	3、tsc的作用：负责将ts装换为浏览器和node.js识别的js代码</span></p><p><span class=\"ql-size-large\">	4、后缀为 .ts</span></p><p><img src=\"http://python.php/vue/vue_blog/vue_blog_server/upload/1631597050Snipaste_2021-09-14_13-23-45.PNG\"></p><p><br></p><p><br></p><p><br></p><p><strong class=\"ql-size-large\">五、自动编译VScode设置</strong></p><p><img src=\"http://python.php/vue/vue_blog/vue_blog_server/upload/1631597261Snipaste_2021-09-14_13-25-58.PNG\"></p>', '2021-09-14 13:28:11', 'TypeScript', '2021-11-03 10:07:41', 0, 'null', NULL);
INSERT INTO `blog_container` VALUES (117, 'admin', 'TypeScript学习记录', '文本记录typescript的数据类型的用法', '<p><span class=\"ql-size-large\">一、变量的声明</span></p><h4>	1、<strong style=\"color: rgb(0, 71, 178);\">let</strong>  变量名<strong>: </strong>变量类型	 = 值 <strong>;</strong></h4><h4>	2、如果变量声明和初始化是同一行，可以不用写类型，因为typescript会根据你的数值类型推断变量类型,例如：<strong style=\"color: rgb(0, 71, 178);\">let</strong>  变量名 = 值;   </h4><h4>	3、联合类型：<strong style=\"color: rgb(0, 71, 178);\">let</strong>  变量名<strong>:  </strong>变量类型1  |  变量类型2	 = 值 <strong>;</strong></h4><h4>	4、数组：</h4><p><img src=\"http://python.php/vue/vue_blog/vue_blog_server/upload/1631600598Snipaste_2021-09-14_14-22-58.PNG\"></p><p><br></p><p><span class=\"ql-size-large\">二、元组的使用</span></p><p>	元组使用场景，当一个数组，使用多种类型变量时，可以使用元组来实现</p><p>	1、<strong class=\"hljs-attribute\" style=\"color: rgb(0, 71, 178);\">let</strong><strong>  元组名:[类型</strong><strong class=\"hljs-number\">1</strong><strong>, 类型</strong><strong class=\"hljs-number\">2</strong><strong>, 类型</strong><strong class=\"hljs-number\">3</strong><strong>] =</strong><strong class=\"hljs-meta\"> [值1, 值2, 值3];﻿</strong></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-keyword\">let</span> ﻿<span class=\"hljs-attr\">arrayList</span>:[<span class=\"hljs-built_in\">string</span>,<span class=\"hljs-built_in\">number</span>,<span class=\"hljs-built_in\">boolean</span>] = [<span class=\"hljs-string\">\'字符串\'</span>, <span class=\"hljs-number\">123</span>, <span class=\"hljs-literal\">true</span>]\n</pre><p>	</p><p>	2、访问元组中元素 长度</p><p>	<span style=\"color: rgb(0, 71, 178);\">arrayList[0]</span></p><p><span style=\"color: rgb(0, 71, 178);\">	arrayList.length</span></p><h3><br></h3><p><span class=\"ql-size-large\">三、枚举</span></p><pre class=\"ql-syntax\" spellcheck=\"false\">	<span class=\"hljs-keyword\">enum</span>  枚举名{\n         变量<span class=\"hljs-number\">1</span>,\n         变量<span class=\"hljs-number\">2</span> = 值,\n       }\n</pre><p><br></p><p><br></p><p><span class=\"ql-size-large\">四、Typescript函数的用法</span></p><h4>	1、function  函数名()：返回值类型 {} ,如果没有返回值，返回值类型写void</h4><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>  函数名<span class=\"hljs-params\">()</span>:返回值类型 {</span>\n\n}\n<span class=\"hljs-built_in\">let</span> 变量名:变量类型 = 函数名();  <span class=\"hljs-comment\">// 变量的类型，必须和函数的返回类型一致</span>\n\n</pre><p><br></p><h4>2、函数形参类型：function  函数名(形参1:类型，形参2:类型)：返回值类型 {} , 如果没有返回值，返回值类型写void</h4><p>	1、实参 和 形参 的类型要保持一致，</p><p>	2、实参 和 形参 的数量保持一致</p><h4><br></h4><p><br></p>', '2021-09-14 16:16:51', 'TypeScript', NULL, 0, 'null', NULL);
INSERT INTO `blog_container` VALUES (118, 'admin', 'vuex的使用', '本文介绍vuex核心功使用方法', '<p><strong class=\"ql-size-large\">store.index </strong></p><pre class=\"ql-syntax\" spellcheck=\"false\">import&nbsp;Vue&nbsp;<span class=\"hljs-keyword\">from</span>&nbsp;\'vue\'\nimport&nbsp;Vuex&nbsp;<span class=\"hljs-keyword\">from</span>&nbsp;\'vuex\'\n\n\nVue.use(Vuex)\n\n\nexport&nbsp;<span class=\"hljs-keyword\">default</span>&nbsp;new&nbsp;Vuex.Store({\n&nbsp;&nbsp;<span class=\"hljs-keyword\">state</span>:&nbsp;{\n        // 定义变量\n&nbsp;&nbsp;&nbsp;&nbsp;count:&nbsp;<span class=\"hljs-number\">0</span>\n&nbsp;&nbsp;},\n&nbsp;&nbsp;mutations:&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;add&nbsp;(<span class=\"hljs-keyword\">state</span>)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\">state</span>.count++\n&nbsp;&nbsp;&nbsp;&nbsp;},\n&nbsp;&nbsp;&nbsp;&nbsp;addN&nbsp;(<span class=\"hljs-keyword\">state</span>,&nbsp;step)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\">state</span>.count&nbsp;+=&nbsp;step\n&nbsp;&nbsp;&nbsp;&nbsp;},\n&nbsp;&nbsp;&nbsp;&nbsp;sub&nbsp;(<span class=\"hljs-keyword\">state</span>)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\">state</span>.count--\n&nbsp;&nbsp;&nbsp;&nbsp;},\n&nbsp;&nbsp;&nbsp;&nbsp;subN&nbsp;(<span class=\"hljs-keyword\">state</span>,&nbsp;step)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\">state</span>.count&nbsp;-=&nbsp;step\n&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;},\n&nbsp;&nbsp;actions:&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;addAsync&nbsp;(context)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-built_in\">set</span>Timeout(()&nbsp;=&gt;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;在actions&nbsp;中，不能直接修改&nbsp;<span class=\"hljs-keyword\">state</span>&nbsp;中的数据\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;必须通过&nbsp;context.commit()&nbsp;触发&nbsp;mutations&nbsp;来对其修改\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;context.commit(\'add\')\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},&nbsp;<span class=\"hljs-number\">1000</span>)\n&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;},\n&nbsp;&nbsp;modules:&nbsp;{\n&nbsp;&nbsp;}\n})\n</pre><p><br></p><p><br></p><p><strong class=\"ql-size-large\">在组件中使用store.index 里面的变量和方法（一）</strong></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span>\n&nbsp;&nbsp;<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\">&lt;!--&nbsp;使用vux变量第一种方法:&nbsp;this.$store.state.count&nbsp;--&gt;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h3</span>&gt;</span>当前值为:{{&nbsp;<span class=\"hljs-name\">this.$store.state.count</span>&nbsp;}}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h3</span>&gt;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span>&nbsp;@<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">\"btnHandler1\"</span>&gt;</span>-1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span>&nbsp;@<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">\"btnHandler2\"</span>&gt;</span>-N<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n&nbsp;&nbsp;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span>\n<span class=\"hljs-comment\">//&nbsp;使用vux变量第二种方法，导入&nbsp;mapState&nbsp;&nbsp;使用vux函数第二种方法，导入&nbsp;mapMutations</span>\n<span class=\"hljs-keyword\">import</span>&nbsp;{&nbsp;mapState,&nbsp;mapMutations&nbsp;}&nbsp;<span class=\"hljs-keyword\">from</span>&nbsp;<span class=\"hljs-string\">\'vuex\'</span>\n\n\n<span class=\"hljs-keyword\">export</span>&nbsp;<span class=\"hljs-keyword\">default</span>&nbsp;{\n&nbsp;&nbsp;data&nbsp;()&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\">return</span>&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;},\n&nbsp;&nbsp;<span class=\"hljs-attr\">computed</span>:&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\">//&nbsp;使用&nbsp;store全局变量数据</span>\n&nbsp;&nbsp;&nbsp;&nbsp;...<span class=\"hljs-title function_\">mapState</span>([<span class=\"hljs-string\">\'count\'</span>])\n&nbsp;&nbsp;},\n&nbsp;&nbsp;<span class=\"hljs-attr\">methods</span>:&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\">//&nbsp;使用&nbsp;store全局函数</span>\n&nbsp;&nbsp;&nbsp;&nbsp;...<span class=\"hljs-title function_\">mapMutations</span>([<span class=\"hljs-string\">\'sub\'</span>,&nbsp;<span class=\"hljs-string\">\'subN\'</span>]),\n&nbsp;&nbsp;&nbsp;&nbsp;btnHandler1&nbsp;()&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">sub</span>()\n&nbsp;&nbsp;&nbsp;&nbsp;},\n&nbsp;&nbsp;&nbsp;&nbsp;btnHandler2&nbsp;()&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">subN</span>(<span class=\"hljs-number\">3</span>)\n&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;}\n}\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&nbsp;<span class=\"hljs-attr\">scoped</span>&gt;&lt;/<span class=\"hljs-name\">style</span>&gt;</span>\n\n\n</pre><p><br></p><p><strong class=\"ql-size-large\">使用store.index 里面的变量和方法（二）</strong></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span>\n&nbsp;&nbsp;<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h3</span>&gt;</span>当前值为:{{&nbsp;<span class=\"hljs-name\">this.$store.state.count</span>&nbsp;}}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h3</span>&gt;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span>&nbsp;@<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">\"btnHandler1\"</span>&gt;</span>&nbsp;+1&nbsp;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span>&nbsp;@<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">\"btnHandler2\"</span>&gt;</span>&nbsp;+N&nbsp;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span>&nbsp;@<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">\"btnHandler3\"</span>&gt;</span>&nbsp;+1&nbsp;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n&nbsp;&nbsp;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span>\n<span class=\"hljs-keyword\">export</span>&nbsp;<span class=\"hljs-keyword\">default</span>&nbsp;{\n&nbsp;&nbsp;data&nbsp;()&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\">return</span>&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;},\n&nbsp;&nbsp;<span class=\"hljs-attr\">methods</span>:&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;btnHandler1&nbsp;()&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\">//&nbsp;触发mutations第一种方法</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">$store</span>.<span class=\"hljs-title function_\">commit</span>(<span class=\"hljs-string\">\'add\'</span>)\n&nbsp;&nbsp;&nbsp;&nbsp;},\n&nbsp;&nbsp;&nbsp;&nbsp;btnHandler2&nbsp;()&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\">//&nbsp;触发mutations第一种方法(带参)</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">$store</span>.<span class=\"hljs-title function_\">commit</span>(<span class=\"hljs-string\">\'addN\'</span>,&nbsp;<span class=\"hljs-number\">3</span>)\n&nbsp;&nbsp;&nbsp;&nbsp;},\n&nbsp;&nbsp;&nbsp;&nbsp;btnHandler3&nbsp;()&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\">//&nbsp;dispatch&nbsp;函数,专门用来触发&nbsp;actions</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">$store</span>.<span class=\"hljs-title function_\">dispatch</span>(<span class=\"hljs-string\">\'addAsync\'</span>)\n&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;}\n}\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&nbsp;<span class=\"hljs-attr\">scoped</span>&gt;</span>\n\n\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span>\n\n\n</pre>', '2021-09-26 20:24:01', 'vue', NULL, 0, 'null', NULL);
INSERT INTO `blog_container` VALUES (119, 'admin', '本博客源码---gitee开源给大家', '使用的技术: vue+elementUi+php+mysql，适配PC,移动端，响应式布局。功能特点：发帖: 发帖支持插入图片，实现图文并茂的效果。可以对帖子，评论进行删除，修改，增加帖子功能。', '<p><br></p><p><span class=\"ql-size-large\">前后端分离，在main.js 修改后台调用接口，上传图片接口，在Container.vue文件中修改</span></p><p><span class=\"ql-size-large\">main-prod.js 是打包正式发布的入口文件，里面的接口改成你后台php文件路径</span></p><p><br></p><p><span class=\"ql-size-large\">运行环境</span></p><p><br></p><p><span class=\"ql-size-large\">第一步：安装node.js</span></p><p><br></p><p><span class=\"ql-size-large\">第二步安装依赖： npm install&nbsp;</span></p><p><br></p><p><span class=\"ql-size-large\">第三步：运行命令，npm run serve</span></p><p><br></p><p><span class=\"ql-size-large\">使用的技术: vue+elementUi+php+mysql，适配PC,移动端，响应式布局。</span></p><p><br></p><p><span class=\"ql-size-large\">功能特点：</span></p><p><br></p><p><span class=\"ql-size-large\">发帖: 发帖支持插入图片，实现图文并茂的效果。</span></p><p><br></p><p><span class=\"ql-size-large\">评论: 可以对发布的帖子进行评论，二级评论回复。</span></p><p><br></p><p><span class=\"ql-size-large\">分类 : 发帖时，对文章类型进行分类选择，按分类筛选，比如点击，javaScript,将返回所有javaScript文章。</span></p><p><span class=\"ql-size-large\">搜索: 支持模糊搜索功能。</span></p><p><br></p><p><span class=\"ql-size-large\">后台功能: 可以对帖子，评论进行删除，修改，增加帖子功能。</span></p><p><br></p><p><br></p><p><span class=\"ql-size-large\">博客已经适配手机端，ipad，PC端，安卓手机APK：</span></p><p><br></p><p><span class=\"ql-size-large\">直达下载：https://www.52luntan.xyz/vue_blog/云博客.apk</span></p><p><br></p><p><span class=\"ql-size-large\">蓝凑云:https://www.lanzouw.com/iIBAavywz5c </span></p><p><br></p><p><br></p><p><strong class=\"ql-size-large\">前端源码gitee链接</strong></p><pre class=\"ql-syntax\" spellcheck=\"false\">https:<span class=\"hljs-regexp\">//gi</span>tee.com<span class=\"hljs-regexp\">/chenxuyun/</span>vue_blog.git\n</pre><p><br></p><p><strong class=\"ql-size-large\">后端源码gitee链接</strong></p><pre class=\"ql-syntax\" spellcheck=\"false\">https:<span class=\"hljs-regexp\">//gi</span>tee.com<span class=\"hljs-regexp\">/chenxuyun/</span>vue_blog_server.git\n</pre><p><br></p><p><br></p><p><br></p><p><img src=\"http://python.php/vue/vue_blog/vue_blog_server/upload/1633437536Snipaste_2021-10-05_20-37-00.PNG\"></p><p><br></p><p><br></p><p><span class=\"ql-size-large\">权限：</span></p><h4><span style=\"color: rgb(230, 0, 0);\">1、普通用户只能对自己的帖子进行修改和删除</span></h4><h4><span style=\"color: rgb(230, 0, 0);\">2、评论只有管理员能删除</span></h4><p><br></p><p><img src=\"http://python.php/vue/vue_blog/vue_blog_server/upload/1633437536Snipaste_2021-10-05_20-35-21.PNG\"></p><p><br></p><p><br></p><p><br></p><p><img src=\"http://python.php/vue/vue_blog/vue_blog_server/upload/1633437536Snipaste_2021-10-05_20-35-37.PNG\"><img src=\"http://python.php/vue/vue_blog/vue_blog_server/upload/1633437539Snipaste_2021-10-05_20-34-27.PNG\"><img src=\"http://python.php/vue/vue_blog/vue_blog_server/upload/1633437539Snipaste_2021-10-05_20-34-52.PNG\"><img src=\"http://python.php/vue/vue_blog/vue_blog_server/upload/1633437540Snipaste_2021-10-05_20-34-12.PNG\"></p><p><br></p><p><br></p><p><br></p><p><span class=\"ql-size-large\">手机端效果图</span></p><p><img src=\"http://python.php/vue/vue_blog/vue_blog_server/upload/1635663709微信图片_20211031150015.jpg\"><img src=\"http://python.php/vue/vue_blog/vue_blog_server/upload/1635663709微信图片_20211031150025.jpg\"><img src=\"http://python.php/vue/vue_blog/vue_blog_server/upload/1635663709微信图片_20211031150006.jpg\"><img src=\"http://python.php/vue/vue_blog/vue_blog_server/upload/1635663709微信图片_20211031150030.jpg\"></p>', '2021-10-05 20:40:34', 'vue', '2021-12-11 11:46:39', 30, 'yes', NULL);
INSERT INTO `blog_container` VALUES (120, 'admin', 'javaScript判断滚动到底', '（1）滚动条到顶部的位置：scrollTop，（2）当前窗口内容可视区：windowHeight，（3）滚动条内容的总高度：scrollHeight，滚动条到底部的条件即为scrollTop + windowHeight == scrollHeight。', '<pre class=\"ql-syntax\" spellcheck=\"false\">\n（<span class=\"hljs-number\">1</span>）滚动条到顶部的位置：scrollTop\n\n（<span class=\"hljs-number\">2</span>）当前窗口内容可视区：windowHeight\n\n（<span class=\"hljs-number\">3</span>）滚动条内容的总高度：scrollHeight\n\n滚动条到底部的条件即为scrollTop + windowHeight == scrollHeight。\n\n<span class=\"hljs-keyword\">var</span>﻿ scrollTop = <span class=\"hljs-built_in\">document</span>.documentElement.scrollTop || <span class=\"hljs-built_in\">document</span>.body.scrollTop;\n<span class=\"hljs-keyword\">var</span> windowHeight = <span class=\"hljs-built_in\">document</span>.documentElement.clientHeight || <span class=\"hljs-built_in\">document</span>.body.clientHeight;\n<span class=\"hljs-keyword\">var</span> scrollHeight = <span class=\"hljs-built_in\">document</span>.documentElement.scrollHeight || <span class=\"hljs-built_in\">document</span>.body.scrollHeight;\n\n<span class=\"hljs-comment\">// scrollHeight - (scrollTop + windowHeight) = 0 表示滚动条滚动到底，因为精度问题,判断到底 &lt; 1 即可</span>\n<span class=\"hljs-keyword\">if</span> (scrollHeight - (scrollTop + windowHeight) &lt; <span class=\"hljs-number\">1</span>) {\n      <span class=\"hljs-comment\">// 这里写滚动到底需要触发的事件</span>\n&nbsp; &nbsp; <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"距顶部\"</span> + scrollTop + <span class=\"hljs-string\">\"可视区高度\"</span> + windowHeight + <span class=\"hljs-string\">\"滚动条总高度\"</span> + scrollHeight);\n}\n</pre><p><br></p><p><span class=\"ql-size-large\">图解</span></p><p><br></p><p><img src=\"http://python.php/vue/vue_blog/vue_blog_server/upload/1635256145640.webp\"></p><p><br></p><p><br></p><h3>代码应用场景：常常用于滑动加载到底，加载更多数据</h3><p><br></p><p><br></p>', '2021-10-26 21:52:04', 'javaScript', NULL, 1, 'null', NULL);
INSERT INTO `blog_container` VALUES (121, 'admin', 'vue + Html +JavaScript 获取B站视频，瀑布流布局--响应式', '调用B站搜索接口，使用瀑布流响应式布局设计页面', '<p><span class=\"ql-size-large\">GIF效果演示</span></p><p><br></p><p><br></p><p><br></p><p><span class=\"ql-size-large\">前端代码</span></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-meta\">&lt;!DOCTYPE html&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span>&gt;</span>\n&nbsp; &nbsp; <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span>\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">\"utf-8\"</span>&gt;</span>\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"referrer\"</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">\"no-referrer\"</span> /&gt;</span>\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">http-equiv</span>=<span class=\"hljs-string\">\"X-UA-Compatible\"</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">\"IE=edge\"</span>&gt;</span>\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"viewport\"</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span>\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-comment\">&lt;!-- vue在线地址 --&gt;</span>\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"https://cdn.jsdelivr.net/npm/vue/dist/vue.js\"</span>&gt;&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-comment\">&lt;!-- &nbsp;axios 在线地址 &nbsp;用来发送网络请求 --&gt;</span>\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"https://cdn.bootcdn.net/ajax/libs/axios/0.21.0/axios.min.js\"</span>&gt;&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>调用B站搜索案列:微信公众号[软件聚导航]<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span>\n\n\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; body {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attribute\">background-color</span>: aliceblue;\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attribute\">display</span>: flex;\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attribute\">justify-content</span>: center;\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }\n\n\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .bigBox {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attribute\">max-width</span>: <span class=\"hljs-number\">1300px</span>;\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attribute\">column-count</span>: <span class=\"hljs-number\">5</span>;\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attribute\">column-gap</span>: <span class=\"hljs-number\">15px</span>;\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }\n\n\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .image {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attribute\">margin-bottom</span>: <span class=\"hljs-number\">15px</span>;\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }\n\n\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .image img {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">100%</span>;\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; span {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class=\"hljs-attribute\">display</span>: inline-block;\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class=\"hljs-attribute\">max-width</span>: <span class=\"hljs-number\">200px</span>;\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class=\"hljs-attribute\">overflow</span>: hidden;\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class=\"hljs-attribute\">text-overflow</span>: ellipsis;\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class=\"hljs-attribute\">white-space</span>:nowrap; \n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; input {<span class=\"hljs-attribute\">position</span>: fixed;<span class=\"hljs-attribute\">top</span>: <span class=\"hljs-number\">20px</span>;<span class=\"hljs-attribute\">right</span>: <span class=\"hljs-number\">20px</span>;<span class=\"hljs-attribute\">outline</span>: none;<span class=\"hljs-attribute\">border-radius</span>: <span class=\"hljs-number\">10px</span>;<span class=\"hljs-attribute\">border-color</span>: <span class=\"hljs-number\">#23527C</span>;}\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">@media</span> (<span class=\"hljs-attribute\">max-width</span>:<span class=\"hljs-number\">1200px</span>) {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .bigBox {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attribute\">column-count</span>: <span class=\"hljs-number\">4</span>;\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }\n\n\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">@media</span> (<span class=\"hljs-attribute\">max-width</span>:<span class=\"hljs-number\">850px</span>) {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .bigBox {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attribute\">column-count</span>: <span class=\"hljs-number\">3</span>;\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }\n\n\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">@media</span> (<span class=\"hljs-attribute\">max-width</span>:<span class=\"hljs-number\">600px</span>) {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .bigBox {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attribute\">column-count</span>: <span class=\"hljs-number\">2</span>;\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span>\n\n\n&nbsp; &nbsp; <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span>\n&nbsp; &nbsp; <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span>\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"bigBox\"</span>&gt;</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-comment\">&lt;!-- 搜索框 --&gt;</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"search\"</span> <span class=\"hljs-attr\">v-model</span>=<span class=\"hljs-string\">\"keyword\"</span> @<span class=\"hljs-attr\">keydown.enter</span>=<span class=\"hljs-string\">\"serach()\"</span>/&gt;</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"image\"</span> <span class=\"hljs-attr\">v-for</span>=<span class=\"hljs-string\">\"item in video\"</span>&gt;</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">:src</span>=<span class=\"hljs-string\">\"`http://${item.pic}`\"</span> <span class=\"hljs-attr\">alt</span>=<span class=\"hljs-string\">\"\"</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">\"playVideo(item.arcurl)\"</span>&gt;</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span>&gt;</span>{{<span class=\"hljs-name\">item.tag</span>}}:<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">v-html</span>=<span class=\"hljs-string\">\"item.title\"</span>&gt;&lt;/<span class=\"hljs-name\">span</span>&gt;</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n\n\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">var</span> app = <span class=\"hljs-keyword\">new</span> Vue({\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attr\">el</span>: <span class=\"hljs-string\">\".bigBox\"</span>,\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attr\">data</span>: {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-comment\">//数组</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attr\">video</span>: [],\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-comment\">//分页</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attr\">page</span>: <span class=\"hljs-number\">1</span>,\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-comment\">//搜索关键字,</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attr\">keyword</span>: <span class=\"hljs-string\">\'老戴\'</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attr\">methods</span>: {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-function\"><span class=\"hljs-title\">serach</span>()</span>{\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-comment\">//搜索之前先恢复默认</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-built_in\">this</span>.page = <span class=\"hljs-number\">1</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-built_in\">this</span>.video = []\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-built_in\">this</span>.getVideo()\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-function\"><span class=\"hljs-title\">getVideo</span>()</span> {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; axios.get(<span class=\"hljs-string\">\'https://www.52luntan.xyz/myPractice/pbl/Bsite.php?page=\'</span> + <span class=\"hljs-built_in\">this</span>.page + <span class=\"hljs-string\">\'&amp;keyword=\'</span> + <span class=\"hljs-built_in\">this</span>.keyword).then(<span class=\"hljs-function\"><span class=\"hljs-params\">res</span> =&gt;</span> {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-built_in\">console</span>.log(res.data.data.result);\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">if</span> (res.data.data.result.length != <span class=\"hljs-number\">0</span>) {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-built_in\">this</span>.video = <span class=\"hljs-built_in\">this</span>.video.concat(res.data.data.result);\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; } <span class=\"hljs-keyword\">else</span> {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; alert(<span class=\"hljs-string\">\'没有更多数据了!!\'</span>)\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; })\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-function\"><span class=\"hljs-title\">listenScroll</span>()</span> {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">var</span> scrollTop = <span class=\"hljs-built_in\">document</span>.documentElement.scrollTop || <span class=\"hljs-built_in\">document</span>.body.scrollTop;\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">var</span> windowHeight = <span class=\"hljs-built_in\">document</span>.documentElement.clientHeight || <span class=\"hljs-built_in\">document</span>.body.clientHeight;\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">var</span> scrollHeight = <span class=\"hljs-built_in\">document</span>.documentElement.scrollHeight || <span class=\"hljs-built_in\">document</span>.body.scrollHeight;\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">if</span> (scrollHeight - (scrollTop + windowHeight) &lt; <span class=\"hljs-number\">1</span>) {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"距顶部\"</span> + scrollTop + <span class=\"hljs-string\">\"可视区高度\"</span> + windowHeight + <span class=\"hljs-string\">\"滚动条总高度\"</span> + scrollHeight);\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-comment\">//当滑动到屏幕底部时,加载下一页数据</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-built_in\">this</span>.page += <span class=\"hljs-number\">1</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-built_in\">this</span>.getVideo()\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-function\"><span class=\"hljs-title\">playVideo</span>(<span class=\"hljs-params\">title</span>)</span> {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-comment\">//window.location.href = \'https://z1.m1907.cn/?jx=\' + title</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-built_in\">window</span>.location.href = title\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-function\"><span class=\"hljs-title\">created</span>()</span> {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-built_in\">this</span>.getVideo();\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">let</span> _this = <span class=\"hljs-built_in\">this</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-comment\">//监听滚动条事件</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-built_in\">window</span>.onscroll = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>() </span>{\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; _this.listenScroll()\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; })\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n\n\n&nbsp; &nbsp; <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span>\n\n</pre><p><br></p><p><span class=\"ql-size-large\">后端代码</span></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-meta\">&lt;?php</span>\nheader(<span class=\"hljs-string\">\"Access-Control-Allow-Origin:*\"</span>); <span class=\"hljs-comment\">//允许跨域请求</span>\n<span class=\"hljs-comment\">// 接收前端的传过来的页码,用来实现分页</span>\n<span class=\"hljs-variable\">$page</span> = <span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">\'page\'</span>];\n<span class=\"hljs-comment\">// 接收前端传过来的关键字，用来搜索</span>\n<span class=\"hljs-variable\">$keyword</span> = <span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">\'keyword\'</span>];\n<span class=\"hljs-comment\">// 字符串链接拼接</span>\n<span class=\"hljs-variable\">$url</span> = <span class=\"hljs-string\">\'https://api.bilibili.com/x/web-interface/search/type?context=&amp;page=\'</span>.<span class=\"hljs-variable\">$page</span>.<span class=\"hljs-string\">\'&amp;order=&amp;keyword=\'</span>.<span class=\"hljs-variable\">$keyword</span>.<span class=\"hljs-string\">\'&amp;duration=&amp;tids_1=&amp;tids_2=&amp;__refresh__=true&amp;_extra=&amp;search_type=video&amp;highlight=1&amp;single_column=\'</span>;\n\n<span class=\"hljs-comment\">// 访问-&gt;把数据返回给前端</span>\n<span class=\"hljs-keyword\">echo</span> file_get_contents(<span class=\"hljs-variable\">$url</span>);\n\n\n</pre><p><br></p><p><br></p>', '2021-10-26 22:34:14', '前端', NULL, 0, 'null', NULL);
INSERT INTO `blog_container` VALUES (122, 'admin', 'php + Socket + WebSocket 编程笔记 （持续更新中）', '从一个简短的socket服务端程序开始，逐步完善并引入新的知识点，提高程序可用性，让您一眼看清socket的关键技术，快速上手，指导实战。\n对于初次接触socket通讯，需要使用socket通讯的同学来说，让socket通讯不再神秘！', '<p><span class=\"ql-size-large\">简单的Socket</span></p><pre class=\"ql-syntax\" spellcheck=\"false\">&lt;?php\n\n<span class=\"hljs-regexp\">//</span> AF_INET: IPv4 网络协议。TCP 和 UDP 都可以使用此协议。\n<span class=\"hljs-regexp\">//</span> AF_INET6: IPv6 网络协议。TCP 和 UDP 都可以使用此协议。\n<span class=\"hljs-regexp\">//</span> AF_UNIX: 本地通讯协议。具有高性能和成本低的IPC(进程通讯)\n\n<span class=\"hljs-regexp\">//</span> SOCK_STREAM: TCP 协议套接字\n<span class=\"hljs-regexp\">//</span> SOCK_DGRAM: &nbsp;UDP 协议套接字\n\n<span class=\"hljs-regexp\">//</span> SOL_TCP: TCP协议\n<span class=\"hljs-regexp\">//</span> SOL_UDP: UDP协议\n\n\n<span class=\"hljs-regexp\">//</span> 创建socket\n<span class=\"hljs-variable\">$socket1</span> = socket_create(AF_INET,SOCK_STREAM,SOL_TCP);\n\n\n<span class=\"hljs-regexp\">//</span> 绑定端口\nsocket_bind(<span class=\"hljs-variable\">$socket1</span>,<span class=\"hljs-string\">\'127.0.0.1:6001\'</span>);\n\n\n<span class=\"hljs-regexp\">//</span> socket1 监听\nsocket_listen(<span class=\"hljs-variable\">$socket1</span>,<span class=\"hljs-number\">3</span>);\n\n\n<span class=\"hljs-regexp\">//</span> socket2 负责处理通讯(接收、发送)\n<span class=\"hljs-variable\">$socket2</span> = socket_accept(<span class=\"hljs-variable\">$socket1</span>);\n\n\n<span class=\"hljs-regexp\">//</span> 读取客户端发送的数据, 定义读取的字节大小(<span class=\"hljs-number\">1024</span>)\n<span class=\"hljs-variable\">$res</span> = socket_read(<span class=\"hljs-variable\">$socket2</span>,<span class=\"hljs-number\">1024</span>);\n\n\n<span class=\"hljs-regexp\">//</span>打印消息\necho <span class=\"hljs-variable\">$res</span>.PHP_EOL;\n\n\n<span class=\"hljs-regexp\">//</span> 向客户端 反馈信息\nsocket_write(<span class=\"hljs-variable\">$socket2</span>,<span class=\"hljs-string\">\'hello client\'</span>);\n\n\n<span class=\"hljs-regexp\">//</span> 关闭\nsocket_close(<span class=\"hljs-variable\">$socket2</span>);\nsocket_close(<span class=\"hljs-variable\">$socket1</span>);\n\n\n</pre><p><br></p><p><br></p><p><span class=\"ql-size-large\">Linux查看当前端口是否被监听命令</span></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-comment\">//使用方法: netstat -an|grep 端口号</span>\n\n<span class=\"hljs-comment\">// 查询 6001 端口是否被监听﻿</span>\nnetstat -an<span class=\"hljs-string\">|grep 6001</span>\n</pre><p><br></p><p><br></p><p><span class=\"ql-size-large\">实现WebSocket通讯</span></p><p><br></p><p><span class=\"ql-size-large\">GIF效果图:</span></p><p><img src=\"http://python.php/vue/vue_blog/vue_blog_server/upload/1635386403动画.gif\"></p><p><br></p><p><br></p><p><span class=\"ql-size-large\">PHP后端代码</span></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-meta\">&lt;?php</span>\n<span class=\"hljs-comment\">// set_time_limit(0) 防止超时</span>\nset_time_limit(<span class=\"hljs-number\">0</span>);\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">SocketService</span>\n</span>{\n&nbsp; &nbsp; <span class=\"hljs-keyword\">private</span> <span class=\"hljs-variable\">$address</span>;\n&nbsp; &nbsp; <span class=\"hljs-keyword\">private</span> <span class=\"hljs-variable\">$port</span>;\n&nbsp; &nbsp; <span class=\"hljs-keyword\">private</span> <span class=\"hljs-variable\">$_sockets</span>;\n&nbsp; &nbsp; <span class=\"hljs-keyword\">public</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">__construct</span>(<span class=\"hljs-params\"><span class=\"hljs-variable\">$address</span> = <span class=\"hljs-string\">\'\'</span>, <span class=\"hljs-variable\">$port</span>=<span class=\"hljs-string\">\'\'</span></span>)\n&nbsp; &nbsp; </span>{\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">if</span>(!<span class=\"hljs-keyword\">empty</span>(<span class=\"hljs-variable\">$address</span>)){\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">$this</span>-&gt;address = <span class=\"hljs-variable\">$address</span>;\n&nbsp; &nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">if</span>(!<span class=\"hljs-keyword\">empty</span>(<span class=\"hljs-variable\">$port</span>)) {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">$this</span>-&gt;port = <span class=\"hljs-variable\">$port</span>;\n&nbsp; &nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; }\n\n\n&nbsp; &nbsp; <span class=\"hljs-keyword\">public</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">service</span>()</span>{\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-comment\">//获取tcp协议号码。</span>\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-variable\">$tcp</span> = getprotobyname(<span class=\"hljs-string\">\"tcp\"</span>);\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-variable\">$sock</span> = socket_create(AF_INET, SOCK_STREAM, <span class=\"hljs-variable\">$tcp</span>);\n&nbsp; &nbsp; &nbsp; &nbsp; socket_set_option(<span class=\"hljs-variable\">$sock</span>, SOL_SOCKET, SO_REUSEADDR, <span class=\"hljs-number\">1</span>);\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-variable\">$sock</span> &lt; <span class=\"hljs-number\">0</span>)\n&nbsp; &nbsp; &nbsp; &nbsp; {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Exception</span>(<span class=\"hljs-string\">\"failed to create socket: \"</span>.socket_strerror(<span class=\"hljs-variable\">$sock</span>).<span class=\"hljs-string\">\"\n\"</span>);\n&nbsp; &nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; &nbsp; &nbsp; socket_bind(<span class=\"hljs-variable\">$sock</span>, <span class=\"hljs-keyword\">$this</span>-&gt;address, <span class=\"hljs-keyword\">$this</span>-&gt;port);\n&nbsp; &nbsp; &nbsp; &nbsp; socket_listen(<span class=\"hljs-variable\">$sock</span>, <span class=\"hljs-keyword\">$this</span>-&gt;port);\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"listen on <span class=\"hljs-subst\">$this</span>-&gt;address <span class=\"hljs-subst\">$this</span>-&gt;port ... \n\"</span>;\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">$this</span>-&gt;_sockets = <span class=\"hljs-variable\">$sock</span>;\n&nbsp; &nbsp; }\n\n\n&nbsp; &nbsp; <span class=\"hljs-keyword\">public</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">run</span>()</span>{\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">$this</span>-&gt;service();\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-variable\">$clients</span>[] = <span class=\"hljs-keyword\">$this</span>-&gt;_sockets;\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>){\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-variable\">$changes</span> = <span class=\"hljs-variable\">$clients</span>;\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-variable\">$write</span> = <span class=\"hljs-literal\">NULL</span>;\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-variable\">$except</span> = <span class=\"hljs-literal\">NULL</span>;\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; socket_select(<span class=\"hljs-variable\">$changes</span>, &nbsp;<span class=\"hljs-variable\">$write</span>, &nbsp;<span class=\"hljs-variable\">$except</span>, <span class=\"hljs-literal\">NULL</span>);\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">foreach</span> (<span class=\"hljs-variable\">$changes</span> <span class=\"hljs-keyword\">as</span> <span class=\"hljs-variable\">$key</span> =&gt; <span class=\"hljs-variable\">$_sock</span>){\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">$this</span>-&gt;_sockets == <span class=\"hljs-variable\">$_sock</span>){ <span class=\"hljs-comment\">//判断是不是新接入的socket</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">if</span>((<span class=\"hljs-variable\">$newClient</span> = socket_accept(<span class=\"hljs-variable\">$_sock</span>)) &nbsp;=== <span class=\"hljs-literal\">false</span>){\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">die</span>(<span class=\"hljs-string\">\'failed to accept socket: \'</span>.socket_strerror(<span class=\"hljs-variable\">$_sock</span>).<span class=\"hljs-string\">\"\n\"</span>);\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-variable\">$line</span> = trim(socket_read(<span class=\"hljs-variable\">$newClient</span>, <span class=\"hljs-number\">1024</span>));\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">$this</span>-&gt;handshaking(<span class=\"hljs-variable\">$newClient</span>, <span class=\"hljs-variable\">$line</span>);\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-comment\">//获取client ip</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; socket_getpeername (<span class=\"hljs-variable\">$newClient</span>, <span class=\"hljs-variable\">$ip</span>);\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-variable\">$clients</span>[<span class=\"hljs-variable\">$ip</span>] = <span class=\"hljs-variable\">$newClient</span>;\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">echo</span> &nbsp;<span class=\"hljs-string\">\"Client ip:<span class=\"hljs-subst\">{$ip}</span> &nbsp; \n\"</span>;\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"Client msg:<span class=\"hljs-subst\">{$line}</span> \n\"</span>;\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; } <span class=\"hljs-keyword\">else</span> {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-comment\">//这里 $msg 是客户端发过来的消息信息</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; socket_recv(<span class=\"hljs-variable\">$_sock</span>, <span class=\"hljs-variable\">$buffer</span>, &nbsp;<span class=\"hljs-number\">2048</span>, <span class=\"hljs-number\">0</span>);\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-variable\">$msg</span> = <span class=\"hljs-keyword\">$this</span>-&gt;message(<span class=\"hljs-variable\">$buffer</span>);\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-comment\">// 向客户端发送给消息</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">$this</span>-&gt;send(<span class=\"hljs-variable\">$_sock</span>, <span class=\"hljs-variable\">$msg</span>);\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-comment\">//在这里业务代码</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-comment\">// echo \"{$key} clinet msg:\",$msg,\"\n\";</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-comment\">// fwrite(STDOUT, \'Please input a argument:\');</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-comment\">// $response = trim(fgets(STDIN));</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-comment\">// $this-&gt;send($_sock, $response);</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-comment\">//echo \"{$key} response to Client:\".$response,\"\n\";</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; }\n\n\n&nbsp; &nbsp; <span class=\"hljs-comment\">/**\n&nbsp; &nbsp; &nbsp;* 握手处理\n&nbsp; &nbsp; &nbsp;* <span class=\"hljs-doctag\">@param</span> $newClient socket\n&nbsp; &nbsp; &nbsp;* <span class=\"hljs-doctag\">@return</span> int &nbsp;接收到的信息\n&nbsp; &nbsp; &nbsp;*/</span>\n&nbsp; &nbsp; <span class=\"hljs-keyword\">public</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">handshaking</span>(<span class=\"hljs-params\"><span class=\"hljs-variable\">$newClient</span>, <span class=\"hljs-variable\">$line</span></span>)</span>{\n\n\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-variable\">$headers</span> = <span class=\"hljs-keyword\">array</span>();\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-variable\">$lines</span> = preg_split(<span class=\"hljs-string\">\"/\r\n/\"</span>, <span class=\"hljs-variable\">$line</span>);\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">foreach</span>(<span class=\"hljs-variable\">$lines</span> <span class=\"hljs-keyword\">as</span> <span class=\"hljs-variable\">$line</span>)\n&nbsp; &nbsp; &nbsp; &nbsp; {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-variable\">$line</span> = chop(<span class=\"hljs-variable\">$line</span>);\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">if</span>(preg_match(<span class=\"hljs-string\">\'/A(S+): (.*)z/\'</span>, <span class=\"hljs-variable\">$line</span>, <span class=\"hljs-variable\">$matches</span>))\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-variable\">$headers</span>[<span class=\"hljs-variable\">$matches</span>[<span class=\"hljs-number\">1</span>]] = <span class=\"hljs-variable\">$matches</span>[<span class=\"hljs-number\">2</span>];\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-variable\">$secKey</span> = <span class=\"hljs-variable\">$headers</span>[<span class=\"hljs-string\">\'Sec-WebSocket-Key\'</span>];\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-variable\">$secAccept</span> = base64_encode(pack(<span class=\"hljs-string\">\'H*\'</span>, sha1(<span class=\"hljs-variable\">$secKey</span> . <span class=\"hljs-string\">\'258EAFA5-E914-47DA-95CA-C5AB0DC85B11\'</span>)));\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-variable\">$upgrade</span> &nbsp;= <span class=\"hljs-string\">\"HTTP/1.1 101 Web Socket Protocol Handshake\r\n\"</span> .\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-string\">\"Upgrade: websocket\r\n\"</span> .\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-string\">\"Connection: Upgrade\r\n\"</span> .\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-string\">\"WebSocket-Origin: <span class=\"hljs-subst\">$this</span>-&gt;address\r\n\"</span> .\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-string\">\"WebSocket-Location: ws://<span class=\"hljs-subst\">$this</span>-&gt;address:<span class=\"hljs-subst\">$this</span>-&gt;port/websocket/websocket\r\n\"</span>.\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-string\">\"Sec-WebSocket-Accept:<span class=\"hljs-subst\">$secAccept</span>\r\n\r\n\"</span>;\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">return</span> socket_write(<span class=\"hljs-variable\">$newClient</span>, <span class=\"hljs-variable\">$upgrade</span>, strlen(<span class=\"hljs-variable\">$upgrade</span>));\n&nbsp; &nbsp; }\n\n\n&nbsp; &nbsp; <span class=\"hljs-comment\">/**\n&nbsp; &nbsp; &nbsp;* 解析接收数据\n&nbsp; &nbsp; &nbsp;* <span class=\"hljs-doctag\">@param</span> $buffer\n&nbsp; &nbsp; &nbsp;* <span class=\"hljs-doctag\">@return</span> null|string\n&nbsp; &nbsp; &nbsp;*/</span>\n&nbsp; &nbsp; <span class=\"hljs-keyword\">public</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">message</span>(<span class=\"hljs-params\"><span class=\"hljs-variable\">$buffer</span></span>)</span>{\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-variable\">$len</span> = <span class=\"hljs-variable\">$masks</span> = <span class=\"hljs-variable\">$data</span> = <span class=\"hljs-variable\">$decoded</span> = <span class=\"hljs-literal\">null</span>;\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-variable\">$len</span> = ord(<span class=\"hljs-variable\">$buffer</span>[<span class=\"hljs-number\">1</span>]) &amp; <span class=\"hljs-number\">127</span>;\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable\">$len</span> === <span class=\"hljs-number\">126</span>) &nbsp;{\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-variable\">$masks</span> = substr(<span class=\"hljs-variable\">$buffer</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">4</span>);\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-variable\">$data</span> = substr(<span class=\"hljs-variable\">$buffer</span>, <span class=\"hljs-number\">8</span>);\n&nbsp; &nbsp; &nbsp; &nbsp; } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable\">$len</span> === <span class=\"hljs-number\">127</span>) &nbsp;{\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-variable\">$masks</span> = substr(<span class=\"hljs-variable\">$buffer</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">4</span>);\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-variable\">$data</span> = substr(<span class=\"hljs-variable\">$buffer</span>, <span class=\"hljs-number\">14</span>);\n&nbsp; &nbsp; &nbsp; &nbsp; } <span class=\"hljs-keyword\">else</span> &nbsp;{\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-variable\">$masks</span> = substr(<span class=\"hljs-variable\">$buffer</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">4</span>);\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-variable\">$data</span> = substr(<span class=\"hljs-variable\">$buffer</span>, <span class=\"hljs-number\">6</span>);\n&nbsp; &nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-variable\">$index</span> = <span class=\"hljs-number\">0</span>; <span class=\"hljs-variable\">$index</span> &lt; strlen(<span class=\"hljs-variable\">$data</span>); <span class=\"hljs-variable\">$index</span>++) {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-variable\">$decoded</span> .= <span class=\"hljs-variable\">$data</span>[<span class=\"hljs-variable\">$index</span>] ^ <span class=\"hljs-variable\">$masks</span>[<span class=\"hljs-variable\">$index</span> % <span class=\"hljs-number\">4</span>];\n&nbsp; &nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable\">$decoded</span>;\n&nbsp; &nbsp; }\n\n\n&nbsp; &nbsp; <span class=\"hljs-comment\">/**\n&nbsp; &nbsp; &nbsp;* 发送数据\n&nbsp; &nbsp; &nbsp;* <span class=\"hljs-doctag\">@param</span> $newClinet 新接入的socket\n&nbsp; &nbsp; &nbsp;* <span class=\"hljs-doctag\">@param</span> $msg &nbsp; 要发送的数据\n&nbsp; &nbsp; &nbsp;* <span class=\"hljs-doctag\">@return</span> int|string\n&nbsp; &nbsp; &nbsp;*/</span>\n&nbsp; &nbsp; <span class=\"hljs-keyword\">public</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">send</span>(<span class=\"hljs-params\"><span class=\"hljs-variable\">$newClinet</span>, <span class=\"hljs-variable\">$msg</span></span>)</span>{\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-variable\">$msg</span> = <span class=\"hljs-keyword\">$this</span>-&gt;frame(<span class=\"hljs-variable\">$msg</span>);\n&nbsp; &nbsp; &nbsp; &nbsp; socket_write(<span class=\"hljs-variable\">$newClinet</span>, <span class=\"hljs-variable\">$msg</span>, strlen(<span class=\"hljs-variable\">$msg</span>));\n&nbsp; &nbsp; }\n\n\n&nbsp; &nbsp; <span class=\"hljs-keyword\">public</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">frame</span>(<span class=\"hljs-params\"><span class=\"hljs-variable\">$s</span></span>) </span>{\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-variable\">$a</span> = str_split(<span class=\"hljs-variable\">$s</span>, <span class=\"hljs-number\">125</span>);\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">if</span> (count(<span class=\"hljs-variable\">$a</span>) == <span class=\"hljs-number\">1</span>) {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"x81\"</span> . chr(strlen(<span class=\"hljs-variable\">$a</span>[<span class=\"hljs-number\">0</span>])) . <span class=\"hljs-variable\">$a</span>[<span class=\"hljs-number\">0</span>];\n&nbsp; &nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-variable\">$ns</span> = <span class=\"hljs-string\">\"\"</span>;\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">foreach</span> (<span class=\"hljs-variable\">$a</span> <span class=\"hljs-keyword\">as</span> <span class=\"hljs-variable\">$o</span>) {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-variable\">$ns</span> .= <span class=\"hljs-string\">\"x81\"</span> . chr(strlen(<span class=\"hljs-variable\">$o</span>)) . <span class=\"hljs-variable\">$o</span>;\n&nbsp; &nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable\">$ns</span>;\n&nbsp; &nbsp; }\n\n\n&nbsp; &nbsp; <span class=\"hljs-comment\">/**\n&nbsp; &nbsp; &nbsp;* 关闭socket\n&nbsp; &nbsp; &nbsp;*/</span>\n&nbsp; &nbsp; <span class=\"hljs-keyword\">public</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">close</span>()</span>{\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">return</span> socket_close(<span class=\"hljs-keyword\">$this</span>-&gt;_sockets);\n&nbsp; &nbsp; }\n}\n\n\n<span class=\"hljs-variable\">$sock</span> = <span class=\"hljs-keyword\">new</span> SocketService(<span class=\"hljs-string\">\'127.0.0.1\'</span>,<span class=\"hljs-string\">\'9000\'</span>);\n<span class=\"hljs-variable\">$sock</span>-&gt;run();\n</pre><p><br></p><p><br></p><p><span class=\"ql-size-large\">前端代码</span></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-meta\">&lt;!doctype html&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">\"en\"</span>&gt;</span>\n&nbsp;<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span>\n&nbsp; <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">\"UTF-8\"</span>&gt;</span>\n&nbsp; <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"viewport\"</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">\"width=device-width,initial-scale=1, maximum-scale=1, user-scalable=no\"</span>&gt;</span>\n&nbsp; <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>websocket<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span>\n&nbsp;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span>\n&nbsp;<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span>\n&nbsp;<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"text\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"\"</span>&gt;</span>\n&nbsp;<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"submit\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"send\"</span> <span class=\"hljs-attr\">onclick</span>=<span class=\"hljs-string\">\"start()\"</span>&gt;</span>\n&nbsp;<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"submit\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"close\"</span> <span class=\"hljs-attr\">onclick</span>=<span class=\"hljs-string\">\"close()\"</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"msg\"</span>&gt;&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n&nbsp;<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span>\n&nbsp; &nbsp; <span class=\"hljs-comment\">/**\n&nbsp; &nbsp; &nbsp; *0：未连接\n&nbsp; &nbsp; &nbsp; *1：连接成功，可通讯\n&nbsp; &nbsp; &nbsp; *2：正在关闭\n&nbsp; &nbsp; &nbsp; *3：连接已关闭或无法打开\n&nbsp; &nbsp; &nbsp; */</span>\n&nbsp; &nbsp; <span class=\"hljs-comment\">//创建一个webSocket 实例</span>\n&nbsp; &nbsp; <span class=\"hljs-keyword\">var</span> webSocket &nbsp;= <span class=\"hljs-keyword\">new</span> &nbsp;WebSocket(<span class=\"hljs-string\">\"ws://127.0.0.1:9000\"</span>);\n\n\n\n&nbsp; &nbsp; webSocket.onerror = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">event</span>)</span>{\n&nbsp; &nbsp; &nbsp; &nbsp; onError(event);\n&nbsp; &nbsp; };\n\n\n&nbsp; &nbsp; <span class=\"hljs-comment\">// 打开websocket</span>\n&nbsp; &nbsp; webSocket.onopen = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">event</span>)</span>{\n&nbsp; &nbsp; &nbsp; &nbsp; onOpen(event);\n&nbsp; &nbsp; };\n\n\n&nbsp; &nbsp; <span class=\"hljs-comment\">//监听消息</span>\n&nbsp; &nbsp; webSocket.onmessage = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">event</span>)</span>{\n&nbsp; &nbsp; &nbsp; &nbsp; onMessage(event);\n&nbsp; &nbsp; };\n\n\n\n&nbsp; &nbsp; webSocket.onclose = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">event</span>)</span>{\n&nbsp; &nbsp; &nbsp; &nbsp; onClose(event);\n&nbsp; &nbsp; }\n\n\n&nbsp; &nbsp; <span class=\"hljs-comment\">//关闭监听websocket</span>\n&nbsp; &nbsp; <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">onError</span>(<span class=\"hljs-params\">event</span>)</span>{\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">\"msg\"</span>).innerHTML = <span class=\"hljs-string\">\"&lt;p&gt;close&lt;/p&gt;\"</span>;\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"error\"</span>+event.data);\n&nbsp; &nbsp; };\n\n\n&nbsp; &nbsp; <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">onOpen</span>(<span class=\"hljs-params\">event</span>)</span>{\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"open:\"</span>+sockState());\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">\"msg\"</span>).innerHTML = <span class=\"hljs-string\">\"&lt;p&gt;Connect to Service&lt;/p&gt;\"</span>;\n&nbsp; &nbsp; };\n\n\n&nbsp; &nbsp; <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">onMessage</span>(<span class=\"hljs-params\">event</span>)</span>{\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"onMessage\"</span>);\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">\"msg\"</span>).innerHTML += <span class=\"hljs-string\">\"&lt;p&gt;response:\"</span>+event.data+<span class=\"hljs-string\">\"&lt;/p&gt;\"</span>\n&nbsp; &nbsp; };\n\n\n&nbsp; &nbsp; <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">onClose</span>(<span class=\"hljs-params\">event</span>)</span>{\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-built_in\">console</span>.log(Event)\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">\"msg\"</span>).innerHTML = <span class=\"hljs-string\">\"&lt;p&gt;close&lt;/p&gt;\"</span>;\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"close:\"</span>+sockState());\n&nbsp; &nbsp; &nbsp; &nbsp; webSocket.close();\n&nbsp; &nbsp; }\n\n\n&nbsp; &nbsp; <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">sockState</span>()</span>{\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">var</span> status = [<span class=\"hljs-string\">\'未连接\'</span>,<span class=\"hljs-string\">\'连接成功，可通讯\'</span>,<span class=\"hljs-string\">\'正在关闭\'</span>,<span class=\"hljs-string\">\'连接已关闭或无法打开\'</span>];\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">return</span> status[webSocket.readyState];\n&nbsp; &nbsp; }\n\n\n&nbsp; &nbsp; <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">start</span>(<span class=\"hljs-params\">event</span>)</span>{\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-built_in\">console</span>.log(webSocket);\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">var</span> msg = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">\'text\'</span>).value;\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">\'text\'</span>).value = <span class=\"hljs-string\">\'\'</span>;\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"send:\"</span>+sockState());\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"msg=\"</span>+msg);\n&nbsp; &nbsp; &nbsp; &nbsp; webSocket.send(<span class=\"hljs-string\">\"msg=\"</span>+msg);\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">\"msg\"</span>).innerHTML += <span class=\"hljs-string\">\"&lt;p&gt;request: \"</span>+msg+<span class=\"hljs-string\">\"&lt;/p&gt;\"</span>\n&nbsp; &nbsp; };\n\n\n&nbsp; &nbsp; <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">close</span>(<span class=\"hljs-params\">event</span>)</span>{\n&nbsp; &nbsp; &nbsp; &nbsp; webSocket.close();\n&nbsp; &nbsp; }\n&nbsp;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n&nbsp;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span>\n</pre><p><br></p><p><br></p><p><br></p>', '2021-10-27 23:12:21', 'WebSocket', '2021-10-28 10:00:38', 0, 'null', NULL);
INSERT INTO `blog_container` VALUES (123, 'admin', 'javascript 实现页面加载完再显示页面', 'document.onreadystatechange 是用来监听页面加载过程中的状态！readyState 有五种取值：1. uninitialized － 默认状态，2. loading － 下载开始，3. loaded － 下载完成，4. interactive － 下载完成但尚不可用', '<pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-comment\">// 网页加载完成后，再显示网页</span>\ndocument.onreadystatechange = function () {\n&nbsp; &nbsp; <span class=\"hljs-keyword\">if</span>(document.readyState == <span class=\"hljs-string\">\'complete\'</span>) {\n&nbsp; &nbsp; &nbsp; &nbsp; document.body.style.display = <span class=\"hljs-string\">\'block\'</span>\n&nbsp; &nbsp; } <span class=\"hljs-keyword\">else</span> {\n&nbsp; &nbsp; &nbsp; &nbsp; document.body.style.display = <span class=\"hljs-string\">\'none\'</span>\n&nbsp; &nbsp; }\n}\n\n</pre><p><br></p><p><span class=\"ql-size-large\">document.onreadystatechange&nbsp;是用来监听页面加载过程中的状态！</span></p><p><strong class=\"ql-size-large\">readyState</strong><span class=\"ql-size-large\">&nbsp;有五种取值：</span></p><p><span class=\"ql-size-large\">1.&nbsp;uninitialized&nbsp;－&nbsp;默认状态</span></p><p><span class=\"ql-size-large\">2.&nbsp;loading －&nbsp;下载开始</span></p><p><span class=\"ql-size-large\">3.&nbsp;loaded －&nbsp;下载完成</span></p><p><span class=\"ql-size-large\">4.&nbsp;interactive －&nbsp;下载完成但尚不可用</span></p><p><span class=\"ql-size-large\">5.&nbsp;complete －&nbsp;所有数据已经准备好</span></p><p><br></p><p><span class=\"ql-size-large\"><span class=\"ql-cursor\">﻿</span></span></p>', '2021-10-28 19:21:30', 'JavaScript', NULL, 0, 'null', NULL);
INSERT INTO `blog_container` VALUES (124, 'admin', '解决 宝塔面板 定时执行计划任务，报错问题', '解决宝塔面板定时执行计划任务， 浏览器访问正常 用计划任务访问 https 网址，报错curl: (60) Peer\'s Certificate issuer is not recognized.问题', '<p><br></p><p><span style=\"color: rgb(51, 51, 51);\" class=\"ql-size-large\">如果你&nbsp;SSL证书是面板申请的 已经部署成功&nbsp;&nbsp;浏览器访问正常 就是用计划任务访问 https&nbsp;&nbsp;网址 执行任务的时候&nbsp;&nbsp;日志显示下面这个 数据不成功。</span></p><p><img src=\"http://python.php/vue/vue_blog/vue_blog_server/upload/1635691015132131arqs1z1wn2sjru4r.jpg\"></p><p><br></p><p><br></p><p><span class=\"ql-size-large\">这种情况多发生在自签名的证书，报错含义是签发证书机构未经认证，无法识别。</span></p><p><span class=\"ql-size-large\">解决办法是将签发该证书的私有CA公钥cacert.pem文件内容，追加到/etc/pki/tls/certs/ca-bundle.crt</span></p><p><br></p><p><span class=\"ql-size-large\">在根目录搜索ca-bundle.crt，如下图，点击进入编辑它，把你的证书公钥，key追加进去，比如，我在阿里云申请的有，public.crt、chain.crt，key，三个都添加进去保存，即可</span></p><p><img src=\"http://python.php/vue/vue_blog/vue_blog_server/upload/1635691241Snipaste_2021-10-31_22-39-17.PNG\"></p><p><br></p><p><img src=\"http://python.php/vue/vue_blog/vue_blog_server/upload/1635691524Snipaste_2021-10-31_22-44-53.PNG\"></p><p><br></p><p><br></p><p><span class=\"ql-size-large\">添加后成功解决</span></p><p><br></p><p><img src=\"http://python.php/vue/vue_blog/vue_blog_server/upload/1635691858Snipaste_2021-10-31_22-50-36.PNG\"></p>', '2021-10-31 22:51:05', '其他', NULL, 0, 'null', NULL);
INSERT INTO `blog_container` VALUES (125, 'admin', '博客 增加 emoji 功能开发，发帖时，支持插入emoji表情', '使用quill-emoji 插件实现emoji功能，发帖时可以插入emoji表情，以及向数据库插入 表情 常见的错误', '<p><span class=\"ql-size-large\">quill-emoji 插件 GitHub地址 ：</span></p><p><a href=\"https://github.com/contentco/quill-emoji\" rel=\"noopener noreferrer\" target=\"_blank\" class=\"ql-size-large\">GitHub - contentco/quill-emoji: Quill module toolbar extension for emoji</a></p><p><br></p><p><br></p><p><strong class=\"ql-size-large\">效果图</strong><span class=\"ql-emojiblot\" data-name=\"grinning\">﻿<span contenteditable=\"false\"><span class=\"ap ap-grinning\">😀</span></span>﻿</span><span class=\"ql-emojiblot\" data-name=\"kissing_closed_eyes\">﻿<span contenteditable=\"false\"><span class=\"ap ap-kissing_closed_eyes\">😚</span></span>﻿</span><span class=\"ql-emojiblot\" data-name=\"fist\">﻿<span contenteditable=\"false\"><span class=\"ap ap-fist\">✊</span></span>﻿</span><span class=\"ql-emojiblot\" data-name=\"clap\">﻿<span contenteditable=\"false\"><span class=\"ap ap-clap\">👏</span></span>﻿</span></p><p><br></p><p><img src=\"http://python.php/vue/vue_blog/vue_blog_server/upload/1635853659Snipaste_2021-11-02_19-35-00.PNG\"></p><p><br></p><p><span class=\"ql-size-large\">安装方法：</span></p><p><span class=\"ql-size-large\">1、cnpm install quill-emoji --save</span></p><p><br></p><p><span class=\"ql-size-large\">2、在要使用的页面引入</span><span class=\"ql-size-large\" style=\"color: rgb(198, 120, 221);\">import</span><span class=\"ql-size-large\"> </span><span class=\"ql-size-large\" style=\"color: rgb(152, 195, 121);\">\"quill-emoji/dist/quill-emoji.css\"</span></p><p><br></p><p><img src=\"http://python.php/vue/vue_blog/vue_blog_server/upload/1635853704Snipaste_2021-11-02_19-41-55.PNG\"></p><p><br></p><p><span class=\"ql-size-large\">3、在工具栏添加emoji</span></p><p><img src=\"http://python.php/vue/vue_blog/vue_blog_server/upload/1635853732Snipaste_2021-11-02_19-42-19.PNG\"></p><p><br></p><p><br></p><h3><br></h3><h3><span class=\"ql-size-large\">保存表情常见问题</span></h3><p><br></p><p><span class=\"ql-size-large\">向数据库插入emoji：报存储emoji表情报错（</span><span class=\"ql-size-large\" style=\"color: rgb(230, 0, 0);\">Incorrect string value: \'xF0x9Fx98x82xF0x9F...</span><span class=\"ql-size-large\">\'）的解决方案</span></p><p><br></p><p><br></p><h3><span class=\"ql-size-large\">问题分析</span></h3><p><br></p><ul><li><span class=\"ql-size-large\">普通的字符串或者表情都是占位3个字节，所以utf8足够用了，但是移动端的表情符号占位是4个字节，普通的utf8就不够用了，为了应对无线互联网的机遇和挑战、避免 emoji 表情符号带来的问题、涉及无线相关的 MySQL 数据库建议都提前采用 utf8mb4 字符集，这必须要作为移动互联网行业的一个技术选型的要点</span></li><li><span class=\"ql-size-large\">Mysql 版本的限制，Mysql 5.5.3之前的版本，支持的utf8为3字节的，Mysql 5.5.3之后的版本支持utf8mb4</span></li></ul><p><br></p><p><br></p><h3><span class=\"ql-size-large\">解决方案</span></h3><p><br></p><ul><li><span class=\"ql-size-large\">修改mysql的配置文件，windows下的为my.ini(linux下的为my.cnf)，修改的内容都一样</span></li></ul><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-section\">[client]</span>\n<span class=\"hljs-attr\">default-character-set</span> = utf8mb4\n\n<span class=\"hljs-section\">[mysql]</span>\n<span class=\"hljs-attr\">default-character-set</span> = utf8mb4\n\n<span class=\"hljs-section\">[mysqld]</span>\n<span class=\"hljs-attr\">character-set-server</span> = utf8mb4\n<span class=\"hljs-attr\">collation-server</span> = utf8mb4_unicode_ci\n</pre><p><br></p><p><br></p><ul><li><span class=\"ql-size-large\">将数据库中对应的字段，改为utf8mb4_general_ci</span></li><li><span class=\"ql-size-large\">修改项目中的连接数据库的url，将characterEncoding=utf-8去掉，此步骤一定要进行</span></li></ul><p><br></p><p><br></p><p><br></p><p><br></p>', '2021-11-02 19:48:58', 'vue', '2021-11-02 20:20:45', 1, 'null', NULL);
INSERT INTO `blog_container` VALUES (126, 'admin', '使用拼多多组件打印快递面单---webSocket编程', '前端使用webSocket编程，实现与拼多多组件实现快递面单打印--webSocket编程', '<p><span class=\"ql-size-large\">拼多多组件打印开发文档：https://open.pinduoduo.com/application/document/browse?idStr=3BBB4C229B6A8FCC</span></p><p><br></p><p><span class=\"ql-size-large\">效果图</span><span class=\"ql-emojiblot\" data-name=\"sweat_smile\">﻿<span contenteditable=\"false\"><span class=\"ap ap-sweat_smile\">😅</span></span>﻿</span></p><p><img src=\"http://python.php/vue/vue_blog/vue_blog_server/upload/1635934816Snipaste_2021-11-03_18-19-44.png\"><img src=\"http://python.php/vue/vue_blog/vue_blog_server/upload/1635934816Snipaste_2021-11-03_18-19-29.png\"></p><p><br></p><p><br></p><p><span class=\"ql-size-large\">实现代码</span></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-meta\">&lt;!DOCTYPE html&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span>&gt;</span>\n\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span>\n&nbsp; &nbsp; <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">\"UTF-8\"</span>&gt;</span>\n&nbsp; &nbsp; <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>拼多多打印<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span>\n\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span>\n&nbsp; &nbsp; <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onclick</span>=<span class=\"hljs-string\">\"getdd()\"</span>&gt;</span>打印<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n&nbsp; &nbsp; <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onclick</span>=<span class=\"hljs-string\">\"getPrinterConfig()\"</span>&gt;</span>获取打印机配置<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n&nbsp; &nbsp; <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onclick</span>=<span class=\"hljs-string\">\"getTaskStatus()\"</span>&gt;</span>获取任务打印任务状态<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n&nbsp; &nbsp; <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onclick</span>=<span class=\"hljs-string\">\"getGlobalConfig()\"</span>&gt;</span>获取全局配置(getGlobalConfig)<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n&nbsp; &nbsp; <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onclick</span>=<span class=\"hljs-string\">\"getAppInfo()\"</span>&gt;</span> 获取客户端版本信息(getAppInfo)<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n\n\n\n&nbsp; &nbsp; <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h4</span>&gt;</span>打印机列表:<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h4</span>&gt;</span>\n&nbsp; &nbsp; <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"parent\"</span>&gt;&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n\n\n&nbsp; &nbsp; <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h5</span>&gt;</span>服务器返回的信息提示<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h5</span>&gt;</span>\n&nbsp; &nbsp; <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"msg\"</span>&gt;&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span>\n&nbsp; &nbsp; <span class=\"hljs-keyword\">var</span> socket;\n&nbsp; &nbsp; <span class=\"hljs-keyword\">var</span> getdd\n&nbsp; &nbsp; <span class=\"hljs-keyword\">var</span> jsonObject = {\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-string\">\"ERPId\"</span>: <span class=\"hljs-number\">303379400</span>,\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-string\">\"cmd\"</span>: <span class=\"hljs-string\">\"print\"</span>,\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-string\">\"requestID\"</span>: <span class=\"hljs-string\">\"90E06437\"</span>,\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-string\">\"task\"</span>: {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-string\">\"documents\"</span>: [\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-string\">\"contents\"</span>: [\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-string\">\"addData\"</span>: {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-string\">\"sender\"</span>: {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-string\">\"address\"</span>: {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-string\">\"city\"</span>: <span class=\"hljs-string\">\"上海市\"</span>,\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-string\">\"detail\"</span>: <span class=\"hljs-string\">\"陕西面馆\"</span>,\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-string\">\"district\"</span>: <span class=\"hljs-string\">\"长宁区\"</span>,\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-string\">\"province\"</span>: <span class=\"hljs-string\">\"上海市\"</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-string\">\"mobile\"</span>: <span class=\"hljs-string\">\"18377973151\"</span>,\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-string\">\"name\"</span>: <span class=\"hljs-string\">\"格兰仕\"</span>,\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-string\">\"phone\"</span>: <span class=\"hljs-string\">\"523307\"</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }, \n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-string\">\"encryptedData\"</span>: <span class=\"hljs-string\">\"35803c72f596cb6aeeb2bf7249968965aa24ecba756f3e127d50c315d4e06cd5013899573a4d598eaf81a75556cca13c5ebab13723ddf1599dc5618f644baef72c78a170acd67233e1c271dafd8f34a43b70e1b4f16746a6b5febc112049fa2074f2cd3745a79d3ea0700cc8fafb9ef81ee5656ea541d26ce34eacad30c78739aa578c0ae34481dd9939b745aa9fb50009b2d5a09513225ee58664b5d5158d6780a9bab857c0c3c59faf514580324c56e6553fc44ab9c40fb1e57c0953fddae580c15ba45507af840bbcc7667832217064b5318bb445a3e23e6983e757fbab8856491f2320b5af8ac003273f288ed6b58ee96021691f05c533df5f755ed57693dffc60d9f6eb0bcb67fa04962df71333115198e90a6a5ea54d6a10da48ace14abbbe9273f14084925917d5c2a2a9bf9adfecfc17d0cd356418d6bbac201272be81e71a043755b98813bf6f86354dbc1992b4c8be5b459c793c73f28f2c6afd859509c303cd529c8e160270358314169a28e037e9c0def9f4950701de8978bc2874f67ffee2fc2f73bba159d5e8b26ffdda1258e8c862dbf829ca5f8be88e9182a5a9f32387cc964cb387726bdd56399dba8dfe503102088a4d1dadc07e97a464b094e31de84906a5f1c26813569ec3c510224a58fd5c49a172ad69217036078525c1428c54131aec25f02a83c1c6739fba45f1472aca26b55efc2268711076d79f395d17d0c49240ed00e34e8b3e077c633c922329c2a85de75bacdee7e21000fe9d2dc3aa0efed455985d5eb0eb4fa1b5265e26de3d807fd083b451e4c6668bb909832ec5df74d6a07e2c355c30736f1f0d3d7caaf35aa6ba4ac353b3eab8f66a381c4e0da904c23666479a0b1921d8ed19288cc0bf9925e2a86af0f9ee9967b7de61a296d23e47594ff6e745384da6b9cd5e55572e948d054113af793645bff8abc511d280e226cfe98d12e7c86f4f5aee4cf53fcea4425ad3cb1a99022361eb7e12102158f9f948dbee94dbf8495586d6d9a769c0647356c7f80186f4dca573b96476f1b88291329eeb29eebbb6a0\"</span>,\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-string\">\"signature\"</span>: <span class=\"hljs-string\">\"PAPe5OYetWzKlZD3Wnvi4BPKI6CeCybLmYgzZioIw0XAs7dOdosozY9XXoYDf4cnByiza/JuDvoYQvgh+HYqaCNnJ0G1WnScQ7MSoWGkIcE6FBOxFhsbokLNX2ixiOQ4ERCuozajDsSYpDyOpqvDB4vT5AALyQjXAfnR8GyR/B4=\"</span>,\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-string\">\"templateUrl\"</span>: <span class=\"hljs-string\">\"https://file-link.pinduoduo.com/yunda_std\"</span>,\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-string\">\"userid\"</span>: <span class=\"hljs-string\">\"480261061\"</span>,\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-string\">\"ver\"</span>: <span class=\"hljs-string\">\"3\"</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-string\">\"data\"</span>: {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-string\">\"height\"</span>: <span class=\"hljs-number\">240</span>,\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-string\">\"list\"</span>: [\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-string\">\"fontSize\"</span>: <span class=\"hljs-number\">18.2</span>,\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-string\">\"height\"</span>: <span class=\"hljs-number\">45.68</span>,\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-string\">\"left\"</span>: <span class=\"hljs-number\">2.08</span>,\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-string\">\"text\"</span>: <span class=\"hljs-string\">\"[备注: 使用webSocket与拼多多组件通信，打印测试]\"</span>,\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-string\">\"top\"</span>: <span class=\"hljs-number\">2.08</span>,\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-string\">\"width\"</span>: <span class=\"hljs-number\">413.52</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ],\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-string\">\"waterdata\"</span>: {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-string\">\"text\"</span>: <span class=\"hljs-string\">\"水印文字4\"</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-string\">\"width\"</span>: <span class=\"hljs-number\">480</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-string\">\"templateURL\"</span>: <span class=\"hljs-string\">\"http://pinduoduoimg.yangkeduo.com/logistics/2019-07-14/5d7e8b5969d954539fcfba3268bbeb3a.xml\"</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ],\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-string\">\"documentID\"</span>: <span class=\"hljs-string\">\"5520010649869215\"</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ],\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-string\">\"notifyType\"</span>: [\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-string\">\"print\"</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ],\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-string\">\"preview\"</span>: <span class=\"hljs-literal\">false</span>,\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-string\">\"previewType\"</span>: <span class=\"hljs-string\">\"image\"</span>,\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-string\">\"printer\"</span>: <span class=\"hljs-string\">\"\"</span>,\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-string\">\"taskID\"</span>: <span class=\"hljs-string\">\"03281843\"</span>\n&nbsp; &nbsp; &nbsp; &nbsp; },\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-string\">\"version\"</span>: <span class=\"hljs-string\">\"1.0\"</span>\n&nbsp; &nbsp; }\n\n\n\n&nbsp; &nbsp; <span class=\"hljs-keyword\">var</span> defaultPrinter\n&nbsp; &nbsp; <span class=\"hljs-keyword\">var</span> printerList\n&nbsp; &nbsp; <span class=\"hljs-comment\">// 保存打印任务taskID</span>\n&nbsp; &nbsp; <span class=\"hljs-keyword\">var</span> taskIDArray = []\n&nbsp; &nbsp; <span class=\"hljs-comment\">// 全局配置请求ID,记录当前打印的 requestID </span>\n&nbsp; &nbsp; <span class=\"hljs-keyword\">var</span> requestIDGetGlobalConfig\n\n\n&nbsp; &nbsp; socket = <span class=\"hljs-keyword\">new</span> WebSocket(<span class=\"hljs-string\">\'ws://127.0.0.1:5000\'</span>);\n\n\n&nbsp; &nbsp; <span class=\"hljs-comment\">// 打开Socket</span>\n&nbsp; &nbsp; socket.onopen = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">event</span>) </span>{\n&nbsp; &nbsp; &nbsp; &nbsp; getPrinters() <span class=\"hljs-comment\">//获取打印列表</span>\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-comment\">// 监听消息</span>\n&nbsp; &nbsp; &nbsp; &nbsp; socket.onmessage = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">event</span>) </span>{\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-comment\">// 获取拼多多返回的信息</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\'Client received a message\'</span>, event);\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\'打印机列表\'</span>, <span class=\"hljs-built_in\">JSON</span>.parse(event.data).printers)\n\n\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">\'.msg\'</span>).innerText = <span class=\"hljs-built_in\">JSON</span>.stringify(event.data)\n\n\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">JSON</span>.parse(event.data).printers !== <span class=\"hljs-literal\">undefined</span>) {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; printerList = <span class=\"hljs-built_in\">JSON</span>.parse(event.data).printers\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\'5555\'</span>, printerList)\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-comment\">// JSON.parse 用来解析JSON字符串</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"打印机\"</span> + <span class=\"hljs-built_in\">JSON</span>.parse(event.data).defaultPrinter)\n\n\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; defaultPrinter = <span class=\"hljs-built_in\">JSON</span>.parse(event.data).defaultPrinter\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-comment\">// defaultPrinter = \'OneNote for Windows 10\'</span>\n\n\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">JSON</span>.parse(event.data).status === <span class=\"hljs-string\">\'success\'</span>) {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"打印就绪..\"</span>)\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">JSON</span>.parse(event.data).taskStatus === <span class=\"hljs-string\">\'printed\'</span>) {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\'出纸成功\'</span>)\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">JSON</span>.parse(event.data).taskStatus === <span class=\"hljs-string\">\'failed\'</span>) {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-comment\">// document.querySelector(\'.msg\').innerText = JSON.stringify(event.data)</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"打印失败!\"</span>)\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">JSON</span>.parse(event.data).taskStatus === <span class=\"hljs-string\">\'canceled\'</span>) {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"打印取消!\"</span>)\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; &nbsp; &nbsp; };\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-comment\">// 监听Socket的关闭</span>\n&nbsp; &nbsp; &nbsp; &nbsp; socket.onclose = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">event</span>) </span>{\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\'Client notified socket has closed\'</span>, event);\n&nbsp; &nbsp; &nbsp; &nbsp; };\n&nbsp; &nbsp; };\n\n\n&nbsp; &nbsp; <span class=\"hljs-comment\">// 测试:打印机列表展示</span>\n&nbsp; &nbsp; <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">() =&gt;</span> {\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">var</span> parent = <span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">\'.parent\'</span>)\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; printerList.length; i++) {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">let</span> h5 = <span class=\"hljs-built_in\">document</span>.createElement(<span class=\"hljs-string\">\'h5\'</span>)\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; h5.innerText = printerList[i].name\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; parent.appendChild(h5)\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; h5.onclick = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> () </span>{\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; defaultPrinter = <span class=\"hljs-built_in\">this</span>.innerText\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-comment\">// alert(\"打印机名称:\"+ defaultPrinter)</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; doPrint(defaultPrinter)\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; }, <span class=\"hljs-number\">500</span>)\n\n\n\n\n&nbsp; &nbsp; getdd = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> () </span>{\n&nbsp; &nbsp; &nbsp; &nbsp; doPrint(defaultPrinter)\n&nbsp; &nbsp; }\n\n\n&nbsp; &nbsp; <span class=\"hljs-comment\">/***\n&nbsp; &nbsp; &nbsp;* \n&nbsp; &nbsp; &nbsp;* 获取请求的UUID，指定长度和进制,如 \n&nbsp; &nbsp; &nbsp;* getUUID(8, 2) &nbsp; //\"01001010\" 8 character (base=2)\n&nbsp; &nbsp; &nbsp;* getUUID(8, 10) // \"47473046\" 8 character ID (base=10)\n&nbsp; &nbsp; &nbsp;* getUUID(8, 16) // \"098F4D35\"。 8 character ID (base=16)\n&nbsp; &nbsp; &nbsp;* &nbsp; \n&nbsp; &nbsp; &nbsp;*/</span>\n&nbsp; &nbsp; <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getUUID</span>(<span class=\"hljs-params\">len, radix</span>) </span>{\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-comment\">// 分割成字符串数组 0,1,2,3，.....</span>\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">var</span> chars = <span class=\"hljs-string\">\'0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\'</span>.split(<span class=\"hljs-string\">\'\'</span>);\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">var</span> uuid = [],\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; i;\n&nbsp; &nbsp; &nbsp; &nbsp; radix = radix || chars.length;\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">if</span> (len) {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; len; i++) uuid[i] = chars[<span class=\"hljs-number\">0</span> | <span class=\"hljs-built_in\">Math</span>.random() * radix];\n&nbsp; &nbsp; &nbsp; &nbsp; } <span class=\"hljs-keyword\">else</span> {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">var</span> r;\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; uuid[<span class=\"hljs-number\">8</span>] = uuid[<span class=\"hljs-number\">13</span>] = uuid[<span class=\"hljs-number\">18</span>] = uuid[<span class=\"hljs-number\">23</span>] = <span class=\"hljs-string\">\'-\'</span>;\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; uuid[<span class=\"hljs-number\">14</span>] = <span class=\"hljs-string\">\'4\'</span>;\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">36</span>; i++) {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">if</span> (!uuid[i]) {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; r = <span class=\"hljs-number\">0</span> | <span class=\"hljs-built_in\">Math</span>.random() * <span class=\"hljs-number\">16</span>;\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; uuid[i] = chars[(i == <span class=\"hljs-number\">19</span>) ? (r &amp; <span class=\"hljs-number\">0x3</span>) | <span class=\"hljs-number\">0x8</span> : r];\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">return</span> uuid.join(<span class=\"hljs-string\">\'\'</span>);\n&nbsp; &nbsp; }\n\n\n&nbsp; &nbsp; <span class=\"hljs-comment\">// 构造request对象 </span>\n&nbsp; &nbsp; <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getRequestObject</span>(<span class=\"hljs-params\">cmd</span>) </span>{\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">var</span> request = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Object</span>();\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-comment\">// 必须:请求的ID,用于唯一标识每个请求，每个客户端保证生成唯一的ID</span>\n&nbsp; &nbsp; &nbsp; &nbsp; request.requestID = getUUID(<span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">16</span>);\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-comment\">//必须: 协议当前版本</span>\n&nbsp; &nbsp; &nbsp; &nbsp; request.version = <span class=\"hljs-string\">\"1.0\"</span>;\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-comment\">//必须: 请求命令名称</span>\n&nbsp; &nbsp; &nbsp; &nbsp; request.cmd = cmd;\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">return</span> request;\n&nbsp; &nbsp; }\n\n\n\n&nbsp; &nbsp; <span class=\"hljs-comment\">// 获取打印列表</span>\n&nbsp; &nbsp; <span class=\"hljs-comment\">// \"cmd\": \"getPrinters\",</span>\n&nbsp; &nbsp; <span class=\"hljs-comment\">// \"requestID\": \"123458976\",</span>\n&nbsp; &nbsp; <span class=\"hljs-comment\">// \"version\": \"1.0\"</span>\n&nbsp; &nbsp; <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getPrinters</span>() </span>{\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">var</span> request = getRequestObject(<span class=\"hljs-string\">\"getPrinters\"</span>);\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">if</span> (socket.readyState === <span class=\"hljs-number\">1</span>) {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; socket.send(<span class=\"hljs-built_in\">JSON</span>.stringify(request));\n&nbsp; &nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; }\n\n\n&nbsp; &nbsp; <span class=\"hljs-comment\">// 获取打印机配置</span>\n&nbsp; &nbsp; <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getPrinterConfig</span>() </span>{\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">var</span> request = getRequestObject(<span class=\"hljs-string\">\'getPrinterConfig\'</span>)\n&nbsp; &nbsp; &nbsp; &nbsp; request.printer = defaultPrinter\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">if</span> (socket.readyState === <span class=\"hljs-number\">1</span>) {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; socket.send(<span class=\"hljs-built_in\">JSON</span>.stringify(request));\n&nbsp; &nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; }\n\n\n&nbsp; &nbsp; <span class=\"hljs-comment\">/**\n&nbsp; &nbsp; &nbsp;* 打印电子面单\n&nbsp; &nbsp; &nbsp;* printer 指定要使用那台打印机\n&nbsp; &nbsp; &nbsp;* waybillArray 要打印的电子面单的数组\n&nbsp; &nbsp; &nbsp;*/</span>\n&nbsp; &nbsp; <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">doPrint</span>(<span class=\"hljs-params\">printer</span>) </span>{\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">var</span> request = getRequestObject(<span class=\"hljs-string\">\"print\"</span>);\n&nbsp; &nbsp; &nbsp; &nbsp; request.task = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Object</span>();\n&nbsp; &nbsp; &nbsp; &nbsp; request.task.taskID = getUUID(<span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">10</span>);\n\n\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-comment\">// 把每次打印的任务 taskID 保存到 taskIDArray 数组</span>\n&nbsp; &nbsp; &nbsp; &nbsp; taskIDArray.push(request.task.taskID)\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-comment\">// 记录当前打印请求的ID</span>\n&nbsp; &nbsp; &nbsp; &nbsp; requestIDGetGlobalConfig = request.task.taskID\n\n\n&nbsp; &nbsp; &nbsp; &nbsp; request.task.preview = <span class=\"hljs-literal\">false</span>;\n&nbsp; &nbsp; &nbsp; &nbsp; request.task.printer = printer;\n&nbsp; &nbsp; &nbsp; &nbsp; request.task.documents = jsonObject.task.documents\n&nbsp; &nbsp; &nbsp; &nbsp; socket.send(<span class=\"hljs-built_in\">JSON</span>.stringify(request));\n&nbsp; &nbsp; }\n\n\n\n&nbsp; &nbsp; <span class=\"hljs-comment\">// 获取打印任务状态</span>\n&nbsp; &nbsp; <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getTaskStatus</span>() </span>{\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-comment\">// 请求格式</span>\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-comment\">// &nbsp; &nbsp; &nbsp; &nbsp; {</span>\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-comment\">// &nbsp;\"cmd\": \"getTaskStatus\",</span>\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-comment\">// &nbsp;\"requestID\": \"123458976\",</span>\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-comment\">// &nbsp;\"version\": \"1.0\",</span>\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-comment\">// &nbsp;\"taskID\": [</span>\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-comment\">// &nbsp;\"12311\",</span>\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-comment\">// &nbsp;\"12312\"</span>\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-comment\">// &nbsp;]</span>\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-comment\">// }</span>\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">var</span> request = getRequestObject(<span class=\"hljs-string\">\"getTaskStatus\"</span>);\n&nbsp; &nbsp; &nbsp; &nbsp; request.taskID = taskIDArray\n&nbsp; &nbsp; &nbsp; &nbsp; socket.send(<span class=\"hljs-built_in\">JSON</span>.stringify(request));\n&nbsp; &nbsp; }\n\n\n&nbsp; &nbsp; <span class=\"hljs-comment\">// 获取全局配置(getGlobalConfig)</span>\n&nbsp; &nbsp; <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getGlobalConfig</span>() </span>{\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-comment\">// 请求格式</span>\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-comment\">// &nbsp;{</span>\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-comment\">// &nbsp;\"cmd\": \"getGlobalConfig\",</span>\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-comment\">// &nbsp;\"requestID\": \"12345678901\",</span>\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-comment\">// &nbsp;\"version\": \"1.0\"</span>\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-comment\">// }</span>\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">var</span> request = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Object</span>()\n&nbsp; &nbsp; &nbsp; &nbsp; request.requestID = requestIDGetGlobalConfig\n&nbsp; &nbsp; &nbsp; &nbsp; request.cmd = <span class=\"hljs-string\">\"getGlobalConfig\"</span>\n&nbsp; &nbsp; &nbsp; &nbsp; request.version = <span class=\"hljs-string\">\"1.0\"</span>\n&nbsp; &nbsp; &nbsp; &nbsp; socket.send(<span class=\"hljs-built_in\">JSON</span>.stringify(request));\n&nbsp; &nbsp; }\n\n\n&nbsp; &nbsp; <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getAppInfo</span>() </span>{\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-comment\">//{</span>\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-comment\">// &nbsp;\"cmd\": \"getAppInfo\",</span>\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-comment\">// &nbsp;\"requestID\": \"12345678901\",</span>\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-comment\">// &nbsp;\"version\": \"1.0\"</span>\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-comment\">// }</span>\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">var</span> request = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Object</span>()\n&nbsp; &nbsp; &nbsp; &nbsp; request.requestID = requestIDGetGlobalConfig\n&nbsp; &nbsp; &nbsp; &nbsp; request.cmd = <span class=\"hljs-string\">\"getAppInfo\"</span>\n&nbsp; &nbsp; &nbsp; &nbsp; request.version = <span class=\"hljs-string\">\"1.0\"</span>\n&nbsp; &nbsp; &nbsp; &nbsp; socket.send(<span class=\"hljs-built_in\">JSON</span>.stringify(request));\n\n\n&nbsp; &nbsp; }\n\n\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n\n\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span>\n</pre><p><br></p><p><br></p>', '2021-11-03 18:21:46', 'webSocket', NULL, 1, 'null', NULL);
INSERT INTO `blog_container` VALUES (127, 'admin', 'React类组件构造器的创建', 'React创建类组件 构造器、创建规则', '<pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-meta\">&lt;!DOCTYPE html&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">\"en\"</span>&gt;</span>\n\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span>\n&nbsp; &nbsp; <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">\"UTF-8\"</span>&gt;</span>\n&nbsp; &nbsp; <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">http-equiv</span>=<span class=\"hljs-string\">\"X-UA-Compatible\"</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">\"IE=edge\"</span>&gt;</span>\n&nbsp; &nbsp; <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"viewport\"</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span>\n&nbsp; &nbsp; <span class=\"hljs-comment\">&lt;!-- &nbsp;React 的核心库 --&gt;</span>\n&nbsp; &nbsp; <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"js/react.development.js\"</span>&gt;&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n&nbsp; &nbsp; <span class=\"hljs-comment\">&lt;!-- 提供与 DOM 相关的功能 --&gt;</span>\n&nbsp; &nbsp; <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"js/react-dom.development.js\"</span>&gt;&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n&nbsp; &nbsp; <span class=\"hljs-comment\">&lt;!-- 将 ES6/jsx 代码转为 ES5 代码 --&gt;</span>\n&nbsp; &nbsp; <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"js/babel.min.js\"</span>&gt;&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n&nbsp; &nbsp; <span class=\"hljs-comment\">&lt;!-- 引入prop-types ,用于定义对组件标签属性进行限制 --&gt;</span>\n&nbsp; &nbsp; <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"js/prop-types.js\"</span>&gt;&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n&nbsp; &nbsp; <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;&lt;/<span class=\"hljs-name\">title</span>&gt;</span>\n\n\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span>\n\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span>\n&nbsp; &nbsp; <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"example\"</span>&gt;&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n&nbsp; &nbsp; <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"example1\"</span>&gt;&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n&nbsp; &nbsp; <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"example2\"</span>&gt;&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n\n&nbsp; &nbsp; <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text/babel\"</span>&gt;</span>\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Person</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">React</span>.<span class=\"hljs-title\">Component</span> </span>{\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-comment\">// 如果需要在构造器使用 this.props 则需要写，否则可以不用写构造器，开发几乎不写构造器</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-comment\">// constructor(props) {</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-comment\">// &nbsp; &nbsp; super(props)</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-comment\">// }</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class=\"hljs-comment\">// propTypes：这是React定义的规矩属性，这里用来定义 规则</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">static</span> propTypes = {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-comment\">// name:\'必须传值\'</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-comment\">// 注意区分 PropTypes 和 propTypes 他们可不一样，一个首写大写，一个首写小写</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-comment\">// name:React.PropTypes.string &nbsp;该方法只有在 16(不包括) 版本以下才能使用</span>\n\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-comment\">// 定义name属性为字符串(string),并且为必填项(isRequired)</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attr\">name</span>: PropTypes.string.isRequired,\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attr\">sex</span>: PropTypes.string,\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attr\">age</span>: PropTypes.number,\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-comment\">// 给speak 定义func(function函数)</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attr\">speak</span>: PropTypes.func,\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-comment\">// 给sex属性设置一个默认值，如果不传，则使用下面定义的值</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">static</span> defaultProps = {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attr\">sex</span>: <span class=\"hljs-string\">\'不男不女\'</span>,\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">18</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }\n\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-function\"><span class=\"hljs-title\">render</span>()</span> {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-comment\">// props: 接收外部传入的数据</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-comment\">// 结构</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">const</span> { name, age, sex } = <span class=\"hljs-built_in\">this</span>.props\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-comment\">// props是只读的</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-comment\">// this.props.name = \'jack\' &nbsp;这样写代码会报错,因为props是只读的</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">return</span> (\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span>&gt;</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>{name}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>{age}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>{sex}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; )\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; &nbsp; &nbsp; }\n\n\n&nbsp; &nbsp; &nbsp; &nbsp; ReactDOM.render(<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Person</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"\"</span> <span class=\"hljs-attr\">age</span>=<span class=\"hljs-string\">\"18\"</span> /&gt;</span>, <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">\'example\'</span>))\n&nbsp; &nbsp; &nbsp; &nbsp; ReactDOM.render(<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Person</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"老李\"</span> <span class=\"hljs-attr\">age</span>=<span class=\"hljs-string\">\"30\"</span> <span class=\"hljs-attr\">sex</span>=<span class=\"hljs-string\">\"男\"</span> /&gt;</span>, <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">\'example1\'</span>))\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-comment\">// ReactDOM.render(&lt;Person name=\"tom\" age=\"18\" sex=\"女\"/&gt;, document.getElementById(\'example2\'))</span>\n\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">const</span> p = { <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">\'老李\'</span>, <span class=\"hljs-attr\">age</span>: <span class=\"hljs-string\">\'108\'</span>, <span class=\"hljs-attr\">sex</span>: <span class=\"hljs-string\">\'女\'</span> }\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-comment\">// ReactDOM.render(&lt;Person name={p.name} age={p.age} sex={p.sex}/&gt;, document.getElementById(\'example2\'))</span>\n&nbsp; &nbsp; &nbsp; &nbsp; ReactDOM.render(<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Person</span> {<span class=\"hljs-attr\">...p</span>} /&gt;</span>, <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">\'example2\'</span>))\n\n&nbsp; &nbsp; <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span>\n\n\n</pre><p><br></p><p><br></p>', '2021-11-08 17:24:00', 'React', NULL, 0, 'null', NULL);
INSERT INTO `blog_container` VALUES (128, 'admin', 'React 回调形式的 ref', 'React 使用Ref 获取DOM 标签的 内容', '<pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-meta\">&lt;!DOCTYPE html&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">\"en\"</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span>\n&nbsp; &nbsp; <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">\"UTF-8\"</span>&gt;</span>\n&nbsp; &nbsp; <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">http-equiv</span>=<span class=\"hljs-string\">\"X-UA-Compatible\"</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">\"IE=edge\"</span>&gt;</span>\n&nbsp; &nbsp; <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"viewport\"</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span>\n&nbsp; &nbsp; <span class=\"hljs-comment\">&lt;!-- &nbsp;React 的核心库 --&gt;</span>\n&nbsp; &nbsp; <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"js/react.development.js\"</span>&gt;&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n&nbsp; &nbsp; <span class=\"hljs-comment\">&lt;!-- 提供与 DOM 相关的功能 --&gt;</span>\n&nbsp; &nbsp; <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"js/react-dom.development.js\"</span>&gt;&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n&nbsp; &nbsp; <span class=\"hljs-comment\">&lt;!-- 将 ES6/jsx 代码转为 ES5 代码 --&gt;</span>\n&nbsp; &nbsp; <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"js/babel.min.js\"</span>&gt;&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n&nbsp; &nbsp; <span class=\"hljs-comment\">&lt;!-- 引入prop-types ,用于定义对组件标签属性进行限制 --&gt;</span>\n&nbsp; &nbsp; <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"js/prop-types.js\"</span>&gt;&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n&nbsp; &nbsp; <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;&lt;/<span class=\"hljs-name\">title</span>&gt;</span>\n\n\n\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span>\n\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span>\n&nbsp; &nbsp; <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"example\"</span>&gt;&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n&nbsp; &nbsp; <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text/babel\"</span>&gt;</span>\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Demo</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">React</span>.<span class=\"hljs-title\">Component</span> </span>{\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-comment\">// 展示右侧输入框数据</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; showData = <span class=\"hljs-function\">() =&gt;</span> {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">const</span> {input1} = <span class=\"hljs-built_in\">this</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; alert(input1.value)\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; showData2 = <span class=\"hljs-function\">() =&gt;</span> {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">const</span> {input2} = <span class=\"hljs-built_in\">this</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; alert(input2.value)\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-function\"><span class=\"hljs-title\">render</span>()</span>{\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">return</span> (\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {/*  注释:\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.refs.input1, 这种写法不推荐\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">\"input1\"</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text\"</span> <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">\"点击按钮提示数据\"</span>/&gt;</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; */}\n\n\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">{c</span> =&gt;</span> this.input1 = c } type=\"text\" placeholder=\"点击按钮提示数据\"/&gt;\n\n\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{</span> <span class=\"hljs-attr\">this.showData</span> } &gt;</span> 点击按钮提示数据 <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n\n\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">onBlur</span>=<span class=\"hljs-string\">{this.showData2}</span> &nbsp;<span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">{c</span> =&gt;</span> this.input2 = c } type=\"text\" placeholder=\"失去焦点提示数据\"/&gt;\n\n\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; )\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; &nbsp; \n&nbsp; &nbsp; &nbsp; &nbsp; \n&nbsp; &nbsp; &nbsp; &nbsp; ReactDOM.render(<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Demo</span> /&gt;</span>, <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">\'example\'</span>))\n\n&nbsp; &nbsp; <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n\n\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span>\n\n\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span>\n</pre><p><br></p><p><br></p><p><span class=\"ql-size-large\">效果图</span></p><p><img src=\"http://python.php/vue/vue_blog/vue_blog_server/upload/1636365381Snipaste_2021-11-08_17-54-37.PNG\"></p><p><br></p><p><span class=\"ql-size-large\">失去焦点时</span></p><p><br></p><p><img src=\"http://python.php/vue/vue_blog/vue_blog_server/upload/1636365422Snipaste_2021-11-08_17-54-49.PNG\"></p><p><br></p><p><br></p>', '2021-11-08 17:57:17', 'React', NULL, 0, 'null', NULL);
INSERT INTO `blog_container` VALUES (129, 'admin', 'React 的生命周期 ', 'React的生命周期  componentDidMount，componentWillUnmount ，componentWillMount ......', '<pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span>\n&nbsp; &nbsp; <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"example\"</span>&gt;&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n&nbsp; &nbsp; <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text/babel\"</span>&gt;</span>\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Lift</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">React</span>.<span class=\"hljs-title\">Component</span> </span>{\n\n\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; state = {<span class=\"hljs-attr\">opacity</span>: <span class=\"hljs-number\">1</span> }\n\n\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; death = <span class=\"hljs-function\">() =&gt;</span> {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">const</span> example = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">\'example\'</span>)\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-comment\">//卸载组件</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ReactDOM.unmountComponentAtNode(example)\n&nbsp;\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }\n\n                   <span class=\"hljs-comment\">// 组件将要挂载时调用</span>\n                    ﻿<span class=\"hljs-function\"><span class=\"hljs-title\">componentWillMount</span>()</span> {\n                    \n                  }\n\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-comment\">// 组件挂载完毕时调用</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-function\"><span class=\"hljs-title\">componentDidMount</span>()</span> {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-built_in\">this</span>.timer = <span class=\"hljs-built_in\">setInterval</span>(<span class=\"hljs-function\">()=&gt;</span>{\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">let</span> {opacity} = <span class=\"hljs-built_in\">this</span>.state\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; opacity -= <span class=\"hljs-number\">0.1</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">if</span>(opacity &lt;= <span class=\"hljs-number\">0</span>) opacity = <span class=\"hljs-number\">1</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-built_in\">this</span>.setState({opacity})\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },<span class=\"hljs-number\">200</span>)\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }\n\n\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-comment\">// 组件将要卸载的时候调用</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-function\"><span class=\"hljs-title\">componentWillUnmount</span>()</span> {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-comment\">// 清除定时器</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-built_in\">clearInterval</span>(<span class=\"hljs-built_in\">this</span>.timer)\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }\n\n\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-comment\">// 初始化渲染，状态更新之后(数据修改)，都会调用</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-comment\">// 调用次数 1 + n 次 </span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-function\"><span class=\"hljs-title\">render</span>()</span> {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">return</span> (\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{{opacity:this.state.opacity}}</span>&gt;</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ReactDOM.unmountComponentAtNode(xxx):移除某个组件<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{this.death}</span>&gt;</span>点击移除<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; )\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; &nbsp; &nbsp; }\n\n\n&nbsp; &nbsp; &nbsp; &nbsp; ReactDOM.render(<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Lift</span> /&gt;</span>, <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">\'example\'</span>))\n\n\n&nbsp; &nbsp; <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n\n\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span>\n</pre><p><br></p><p><br></p><p><br></p><p><br></p><p><span class=\"ql-size-large\">生命周期原理图</span></p><p><br></p><p><span class=\"ql-size-large\">原理图(旧)</span></p><p><img src=\"http://python.php/vue/vue_blog/vue_blog_server/upload/1636450380react生命周期(旧).png\"></p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-comment\">//这三个在react新版本(18)中被废弃</span>\n<span class=\"hljs-function\"><span class=\"hljs-title\">componentWillMount</span><span class=\"hljs-params\">()</span></span>\n<span class=\"hljs-function\"><span class=\"hljs-title\">componentWillReceiveProps</span><span class=\"hljs-params\">()</span></span>\n<span class=\"hljs-function\"><span class=\"hljs-title\">componentWillUpdate</span><span class=\"hljs-params\">()</span></span>\n\n﻿<span class=\"hljs-comment\">//新版本使用在前面加上UNSAFE_，如下:</span>\n<span class=\"hljs-function\"><span class=\"hljs-title\">UNSAFE_componentWillUpdate</span><span class=\"hljs-params\">()</span></span>\n<span class=\"hljs-function\"><span class=\"hljs-title\">UNSAFE_componentWillReceiveProps</span><span class=\"hljs-params\">()</span></span>\n<span class=\"hljs-function\"><span class=\"hljs-title\">UNSAFE_componentWillUpdate</span><span class=\"hljs-params\">()</span></span>\n</pre><p><br></p><p><br></p><p><br></p><p><span class=\"ql-size-large\">原理图(新)</span></p><p><img src=\"http://python.php/vue/vue_blog/vue_blog_server/upload/1636450409react生命周期(新).png\"></p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-comment\">// React 开发中 常用到以下三个：</span>\n<span class=\"hljs-function\"><span class=\"hljs-title\">componentDidMount</span><span class=\"hljs-params\">()</span></span>\n<span class=\"hljs-function\"><span class=\"hljs-title\">componentWillUnmount</span><span class=\"hljs-params\">()</span></span>\n<span class=\"hljs-function\"><span class=\"hljs-title\">render</span><span class=\"hljs-params\">()</span></span>\n</pre><p><br></p><p><br></p><p><br></p><p><span class=\"ql-size-large\">总结：</span></p><h3><br></h3><h3>一、React 新生命周期 和 旧生命周期的区别</h3><p><br></p><h4><span class=\"hljs-code\" style=\"color: rgb(230, 0, 0);\">	1、废除三个：如下</span></h4><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-function\"><span class=\"hljs-title\">componentWillMount</span><span class=\"hljs-params\">()</span></span>\n<span class=\"hljs-function\"><span class=\"hljs-title\">componentWillReceiveProps</span><span class=\"hljs-params\">()</span></span>\n<span class=\"hljs-function\"><span class=\"hljs-title\">componentWillUpdate</span><span class=\"hljs-params\">()</span></span>\n</pre><p><br></p><h4><span style=\"color: rgb(166, 226, 46);\">	</span><span style=\"color: rgb(230, 0, 0);\">2、增加两个：如下</span></h4><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-function\"><span class=\"hljs-title\">getDerivedStateFromProps</span><span class=\"hljs-params\">()</span></span>\n<span class=\"hljs-function\"><span class=\"hljs-title\">getSnapshotBeforeUpdate</span><span class=\"hljs-params\">()</span></span>﻿\n</pre><h4><br></h4><p><br></p><h3>二、修改state状态的变量</h3><h4><span style=\"color: rgb(230, 0, 0);\">1、状态在哪里，操作的状态的方法就在哪里</span></h4><pre class=\"ql-syntax\" spellcheck=\"false\">在React中，<span class=\"hljs-string\">\"子组件\"</span>是不能在<span class=\"hljs-string\">\"子组件里面\"</span>直接修改父组件里面的值\n如果 <span class=\"hljs-string\">\"子组件\"</span>想要修改<span class=\"hljs-string\">\"父组件\"</span>的<span class=\"hljs-keyword\">state</span>状态里面的变量值,修改方法需要在<span class=\"hljs-string\">\"父组件\"</span>里面定义，然后把该方法传给<span class=\"hljs-string\">\"子组件\"</span>来调用即可\n</pre>', '2021-11-09 17:07:37', 'React', '2021-11-17 14:18:26', 0, 'null', NULL);
INSERT INTO `blog_container` VALUES (130, 'admin', 'React/Vue 经典面试题', ' react/vue中的key有什么作用？（key的内部原理是什么？），为什么遍历列表时，key最好不要用index?  虚拟DOM中key的作用', '<h3>经典面试题:</h3><p>&nbsp;&nbsp;&nbsp;1). react/vue中的key有什么作用？（key的内部原理是什么？）</p><p>&nbsp;&nbsp;&nbsp;2). 为什么遍历列表时，key最好不要用index?</p><p>&nbsp;&nbsp;&nbsp;</p><h3>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1. 虚拟DOM中key的作用：</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1). 简单的说: key是虚拟DOM对象的标识, 在更新显示时key起着极其重要的作用。</p><p><br></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2). 详细的说: 当状态中的数据发生变化时，react会根据【新数据】生成【新的虚拟DOM】,</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;随后React进行【新虚拟DOM】与【旧虚拟DOM】的diff比较，比较规则如下：</p><p><br></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a. 旧虚拟DOM中找到了与新虚拟DOM相同的key：</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(1).若虚拟DOM中内容没变, 直接使用之前的真实DOM</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(2).若虚拟DOM中内容变了, 则生成新的真实DOM，随后替换掉页面中之前的真实DOM</p><p><br></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;b. 旧虚拟DOM中未找到与新虚拟DOM相同的key</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;根据数据创建新的真实DOM，随后渲染到到页面</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p><h3>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2. 用index作为key可能会引发的问题：</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1. 若对数据进行：逆序添加、逆序删除等破坏顺序操作:</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;会产生没有必要的真实DOM更新 ==&gt; 界面效果没问题, 但效率低。</p><p><br></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2. 如果结构中还包含输入类的DOM：</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;会产生错误DOM更新 ==&gt; 界面有问题。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3. 注意！如果不存在对数据的逆序添加、逆序删除等破坏顺序操作，</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;仅用于渲染列表用于展示，使用index作为key是没有问题的。</p><h4>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</h4><h3>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3. 开发中如何选择key?:</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.最好使用每条数据的唯一标识作为key, 比如id、手机号、身份证号、学号等唯一值。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2.如果确定只是简单的展示数据，用index也是可以的。</p>', '2021-11-10 16:15:35', '前端', '2021-11-10 16:17:48', 0, 'null', NULL);
INSERT INTO `blog_container` VALUES (131, 'admin', '应用JS防抖机制，浏览器窗口变化后重新渲染Echarts图表', '概念：函数防抖（debounce），就是指触发事件后，在 n 秒内函数只能执行一次，如果触发事件后在 n\n秒内又触发了事件，则会重新计算函数延执行时间。', '<p><br></p><p><img src=\"http://python.php/vue/vue_blog/vue_blog_server/upload/1636614145Snipaste_2021-11-11_15-01-57.png\"></p><p><br></p><p><br></p><p><span class=\"ql-size-large\">理想的状态应该是改变窗口大小后，图表也要跟着一起变化，而且不能影响性能，这个时候就需要运用到防抖机制。</span></p><p><br></p><p><span class=\"ql-size-large\">实现代码</span></p><pre class=\"ql-syntax\" spellcheck=\"false\">\n&nbsp; &nbsp; <span class=\"hljs-comment\">// 监听窗口变化</span>\n&nbsp; &nbsp; <span class=\"hljs-built_in\">window</span>.addEventListener(<span class=\"hljs-string\">\'resize\'</span>, debounce(updateEchat, <span class=\"hljs-number\">500</span>))\n\n\n&nbsp; &nbsp; <span class=\"hljs-comment\">// 需要防抖的函数</span>\n&nbsp; &nbsp; <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">updateEchat</span>() </span>{\n&nbsp; &nbsp; &nbsp; myChart.resize() <span class=\"hljs-comment\">// 重新渲染</span>\n&nbsp; &nbsp; &nbsp; <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"resize\"</span>)\n&nbsp; &nbsp; }\n\n\n&nbsp; &nbsp; <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">debounce</span>(<span class=\"hljs-params\">fn, delay</span>) </span>{\n&nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">let</span> timer = <span class=\"hljs-literal\">null</span>\n&nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> () </span>{\n             <span class=\"hljs-comment\">// 这里为每次变化要执行﻿旳函数  </span>\n  &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">if</span> (timer) {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-built_in\">clearTimeout</span>(timer)\n&nbsp; &nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; &nbsp; &nbsp; timer = <span class=\"hljs-built_in\">setTimeout</span>(fn, delay)\n&nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; }\n\n</pre><p><br></p><p><br></p>', '2021-11-11 15:03:34', '前端', NULL, 1, 'null', NULL);
INSERT INTO `blog_container` VALUES (132, 'admin', ' 使用 create-react-app 创建 React 应用', '使用 react 小手架 创建 React 应用', '<p><br></p><p><strong class=\"ql-size-large\">第一步</strong><span class=\"ql-size-large\">，全局安装： npm i create-react-app -g</span></p><p><br></p><p><strong class=\"ql-size-large\">第二步</strong><span class=\"ql-size-large\">，切换到想创建项目的目录，使用命令： create-react-app xxx (xxx：项目名称)</span></p><p><br></p><p><strong class=\"ql-size-large\">第三步</strong><span class=\"ql-size-large\">，进入刚才创建的xxx项目文件夹，cd xxx</span></p><p><br></p><p><strong class=\"ql-size-large\">第四步</strong><span class=\"ql-size-large\">，启动项目，运行yarn start 或者 npm run start</span></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p>', '2021-11-11 16:51:39', 'React', NULL, 0, 'null', NULL);
INSERT INTO `blog_container` VALUES (134, 'admin', 'js数组中filter、map、reduce、find等方法实现的原理', '本文讲述的是 js数组中filter、map、reduce、find等方法实现的原理 ', '<h2>filter用法和原理实现</h2><p>filter 过滤,filter()使用指定的函数测试所有元素，并创建一个包含所有通过测试的元素的新数组。</p><h3>用法</h3><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-keyword\">let</span> arr=[<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">6</span>,<span class=\"hljs-number\">8</span>];\n<span class=\"hljs-keyword\">let</span> arr1=arr<span class=\"hljs-built_in\">.filter</span>(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-type\">item</span>){\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-type\">item</span>&gt;<span class=\"hljs-number\">5</span>\n})\nconsole.log(arr1) //[<span class=\"hljs-number\">6</span>,<span class=\"hljs-number\">8</span>]\n<span class=\"hljs-keyword\">let</span> arr= [\n    <span class=\"hljs-built_in\">{id</span>:<span class=\"hljs-number\">1</span><span class=\"hljs-built_in\">,name</span>: <span class=\"hljs-string\">\"Alex\"</span>, age: <span class=\"hljs-number\">18</span>},\n    <span class=\"hljs-built_in\">{id</span>:<span class=\"hljs-number\">2</span><span class=\"hljs-built_in\">,name</span>: <span class=\"hljs-string\">\"Teamo\"</span>, age: <span class=\"hljs-number\">15</span>},\n    <span class=\"hljs-built_in\">{id</span>:<span class=\"hljs-number\">3</span><span class=\"hljs-built_in\">,name</span>: <span class=\"hljs-string\">\"Lily\"</span>, age: <span class=\"hljs-number\">16</span>},\n    <span class=\"hljs-built_in\">{id</span>:<span class=\"hljs-number\">4</span><span class=\"hljs-built_in\">,name</span>: <span class=\"hljs-string\">\"Lucy\"</span>, age: <span class=\"hljs-number\">17</span>},\n    <span class=\"hljs-built_in\">{id</span>:<span class=\"hljs-number\">5</span><span class=\"hljs-built_in\">,name</span>: <span class=\"hljs-string\">\"Tom\"</span>, age: <span class=\"hljs-number\">19</span>}\n]\n<span class=\"hljs-keyword\">let</span> arr1=arr<span class=\"hljs-built_in\">.filter</span>(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-type\">item</span>){\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-type\">item</span>.age&gt;<span class=\"hljs-number\">15</span>\n})\nconsole.log(arr1)\n//[ <span class=\"hljs-built_in\">{id</span>: <span class=\"hljs-number\">1</span>,<span class=\"hljs-built_in\"> name</span>: <span class=\"hljs-string\">\"Alex\"</span>, age: <span class=\"hljs-number\">18</span>},\n<span class=\"hljs-built_in\">{id</span>: <span class=\"hljs-number\">3</span>,<span class=\"hljs-built_in\"> name</span>: <span class=\"hljs-string\">\"Lily\"</span>, age: <span class=\"hljs-number\">16</span>},\n<span class=\"hljs-built_in\">{id</span>: <span class=\"hljs-number\">4</span>,<span class=\"hljs-built_in\"> name</span>: <span class=\"hljs-string\">\"Lucy\"</span>, age: <span class=\"hljs-number\">17</span>},\n<span class=\"hljs-built_in\">{id</span>: <span class=\"hljs-number\">5</span>,<span class=\"hljs-built_in\"> name</span>: <span class=\"hljs-string\">\"Tom\"</span>, age: <span class=\"hljs-number\">19</span>}]\n</pre><h3>原理的实现</h3><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-built_in\">Array</span>.prototype.filter1 = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">fn</span>) </span>{\n  <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> fn !== <span class=\"hljs-string\">\"function\"</span>) {\n	<span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">TypeError</span>(<span class=\"hljs-string\">`<span class=\"hljs-subst\">${fn}</span> is not a function`</span>);\n  }\n  <span class=\"hljs-keyword\">let</span> newArr = [];\n	<span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>; i&lt; <span class=\"hljs-built_in\">this</span>.length; i++) {\n		fn(<span class=\"hljs-built_in\">this</span>[i]) &amp;&amp; newArr.push(<span class=\"hljs-built_in\">this</span>[i]);\n	}\n	<span class=\"hljs-keyword\">return</span> newArr;\n}\n<span class=\"hljs-keyword\">let</span> arr=[<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">6</span>,<span class=\"hljs-number\">8</span>];\n<span class=\"hljs-keyword\">let</span> arr1=arr.filter1(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">item</span>)</span>{\n    <span class=\"hljs-keyword\">return</span> item&gt;<span class=\"hljs-number\">5</span>\n})\n<span class=\"hljs-built_in\">console</span>.log(arr1) <span class=\"hljs-comment\">//[6,8]</span>\n</pre><p>看完之后是不是so easy，其它的几个实现大同小异,建议都手写遍</p><h2>map用法和原理实现</h2><p>map 映射,map()方法返回一个新数组，数组中的元素为原始数组元素调用函数处理的后值。</p><h3>用法</h3><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-keyword\">let</span> arr = [<span class=\"hljs-string\">\'bob\'</span>, <span class=\"hljs-string\">\'grex\'</span>, <span class=\"hljs-string\">\'tom\'</span>];\n<span class=\"hljs-keyword\">let</span> arr1 = arr.<span class=\"hljs-keyword\">map</span>(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-type\">item</span>) {\n    <span class=\"hljs-keyword\">return</span> `<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>${<span class=\"hljs-type\">item</span>}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span>`;\n});\nconsole.log(arr1); //[ <span class=\"hljs-string\">\'&lt;li&gt;bob&lt;/li&gt;\'</span>, <span class=\"hljs-string\">\'&lt;li&gt;grex&lt;/li&gt;\'</span>, <span class=\"hljs-string\">\'&lt;li&gt;tom&lt;/li&gt;\'</span> ]\n</pre><h3>原理实现</h3><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-built_in\">Array</span>.prototype.map = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">fn</span>) </span>{\n   <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> fn !== <span class=\"hljs-string\">\"function\"</span>) {\n	<span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">TypeError</span>(<span class=\"hljs-string\">`<span class=\"hljs-subst\">${fn}</span> is not a function`</span>);\n   }\n    <span class=\"hljs-keyword\">let</span> newArr = [];\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-built_in\">this</span>.length; i++) {\n        newArr.push(fn(<span class=\"hljs-built_in\">this</span>[i]))\n    };\n    <span class=\"hljs-keyword\">return</span> newArr;\n}\n</pre><h2>reduce用法和原理</h2><p>reduce() 方法接收一个函数作为累加器，数组中的每个值（从左到右）开始缩减，最终计算为一个值。</p><h3>用法</h3><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-keyword\">let</span> arr=[<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">6</span>,<span class=\"hljs-number\">8</span>];\n<span class=\"hljs-keyword\">let</span> result=arr.reduce(<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-keyword\">val</span>,item,index,origin) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">val</span>+item\n},<span class=\"hljs-number\">0</span>);\nconsole.log(result) <span class=\"hljs-comment\">//20</span>\n</pre><h3>reduce原理实现</h3><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-built_in\">Array</span>.prototype.reduce = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">reducer,initVal</span>) </span>{\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;<span class=\"hljs-built_in\">this</span>.length;i++){\n        initVal =reducer(initVal,<span class=\"hljs-built_in\">this</span>[i],i,<span class=\"hljs-built_in\">this</span>);\n    }\n    <span class=\"hljs-keyword\">return</span> initVal\n};\n</pre><h2>find用法和原理实现</h2><p>find() 方法返回通过测试（函数内判断）的数组的第一个元素的值。</p><h3>用法</h3><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-keyword\">let</span> arr = [<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>];\n<span class=\"hljs-keyword\">let</span> arr1=arr.find(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">item</span>) </span>{\n    <span class=\"hljs-keyword\">return</span> item&gt;=<span class=\"hljs-number\">2</span>\n});\n<span class=\"hljs-built_in\">console</span>.log( arr5); <span class=\"hljs-comment\">//2</span>\n</pre><h3>find原理实现</h3><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-built_in\">Array</span>.prototype.find = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">fn</span>) </span>{\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> fn !== <span class=\"hljs-string\">\"function\"</span>) {\n	<span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">TypeError</span>(<span class=\"hljs-string\">`<span class=\"hljs-subst\">${fn}</span> is not a function`</span>);\n    }\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-built_in\">this</span>.length; i++) {\n        <span class=\"hljs-keyword\">if</span> (fn(<span class=\"hljs-built_in\">this</span>[i])) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>[i]\n    }\n}\n</pre><h2>some用法和原理实现</h2><p>some() 方法会依次执行数组的每个元素：</p><p>如果有一个元素满足条件，则表达式返回true , 剩余的元素不会再执行检测。</p><p>如果没有满足条件的元素，则返回false。</p><h3>用法</h3><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-keyword\">let</span> arr = [<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">8</span>];\n<span class=\"hljs-keyword\">let</span> flag = arr.some(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">item</span>) </span>{\n    <span class=\"hljs-keyword\">return</span> item &gt; <span class=\"hljs-number\">5</span>\n});\n<span class=\"hljs-built_in\">console</span>.log(flag); <span class=\"hljs-comment\">//true</span>\n</pre><h3>some原理实现</h3><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-built_in\">Array</span>.prototype.some=<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">fn</span>) </span>{\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> fn !== <span class=\"hljs-string\">\"function\"</span>) {\n	<span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">TypeError</span>(<span class=\"hljs-string\">`<span class=\"hljs-subst\">${fn}</span> is not a function`</span>);\n    }\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;<span class=\"hljs-built_in\">this</span>.length;i++){\n        <span class=\"hljs-keyword\">if</span>(fn(<span class=\"hljs-built_in\">this</span>[i])) {\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>\n        }\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>\n};\n</pre><h2>every用法和原理实现</h2><p>every方法用于检测数组所有元素是否都符合指定条件（通过函数提供）。</p><h3>用法</h3><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-keyword\">let</span> arr = [<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">8</span>];\n<span class=\"hljs-keyword\">let</span> flag = arr.every(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">item</span>) </span>{\n    <span class=\"hljs-keyword\">return</span> item &gt; <span class=\"hljs-number\">5</span>\n});\n<span class=\"hljs-built_in\">console</span>.log(flag); <span class=\"hljs-comment\">//false</span>\n</pre><h3>原理实现</h3><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-built_in\">Array</span>.prototype.every=<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">fn</span>) </span>{\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> fn !== <span class=\"hljs-string\">\"function\"</span>) {\n	<span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">TypeError</span>(<span class=\"hljs-string\">`<span class=\"hljs-subst\">${fn}</span> is not a function`</span>);\n    }\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;<span class=\"hljs-built_in\">this</span>.length;i++){\n        <span class=\"hljs-keyword\">if</span>(!fn(<span class=\"hljs-built_in\">this</span>[i])) {\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>\n        }\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>\n};\n</pre><p><br></p><p><br></p><p>备注: 本文转自博客园</p>', '2021-11-17 15:21:46', 'javaScript', NULL, 0, 'null', NULL);
INSERT INTO `blog_container` VALUES (135, 'admin', 'React 脚手架配置代理--解决跨域问题', 'React 脚手架配置代理--解决跨域问题', '<h3>方法一、</h3><p><br></p><h4>在Packge.json中追加配置</h4><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-string\">\"proxy\"</span>:<span class=\"hljs-string\">\"http://localhost:5000\"</span>\n</pre><p>1.优点：配置简单，请求可以不用加匹配前缀</p><p>2.缺点：不能配置多个代理</p><p>3.优先匹配前端资源，例如：当请求3000不存在时，那么该请求会转发给5000</p><p><br></p><p><br></p><h3>方法二、</h3><p><br></p><h3>在src下创建<span style=\"color: rgb(230, 0, 0);\">setupProxy.js</span></h3><p><br></p><h3>写跨域js的文件名称必须为：<span style=\"color: rgb(230, 0, 0);\">setupProxy.js</span></h3><p><br></p><p><img src=\"http://python.php/vue/vue_blog/vue_blog_server/upload/1637217388Snipaste_2021-11-18_14-33-41.PNG\"></p><p><br></p><p><br></p><h3><span style=\"color: rgb(68, 68, 68);\">React代理配置文件：</span><span style=\"color: rgb(230, 0, 0);\">setupProxy.js</span></h3><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-keyword\">const</span> proxy = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"http-proxy-middleware\"</span>);\n\n<span class=\"hljs-built_in\">module</span>.exports = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">app</span>) </span>{\n&nbsp; &nbsp; app.use(\n&nbsp; &nbsp; &nbsp; &nbsp; proxy(<span class=\"hljs-string\">\"/api1\"</span>, { <span class=\"hljs-comment\">// 遇到/api1 前缀,就会触发该代理</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-comment\">//target: 请求转发给谁</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attr\">target</span>: <span class=\"hljs-string\">\'http://localhost:5000\'</span>,\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-comment\">//控制服务器收到的响应头中Host字段值,</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-comment\">//changeOrigin如果不加,服务器会知道你本身的请求来源</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attr\">changeOrigin</span>: <span class=\"hljs-literal\">true</span>,\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-comment\">//pathRewrite,重写请求路径: 把 /api1 替换为空(去掉)</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attr\">pathRewrite</span>: { <span class=\"hljs-string\">\'^/api1\'</span>: <span class=\"hljs-string\">\'\'</span> }\n&nbsp; &nbsp; &nbsp; &nbsp; }),\n&nbsp; &nbsp; &nbsp; &nbsp; proxy(<span class=\"hljs-string\">\"/api2\"</span>, {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attr\">target</span>: <span class=\"hljs-string\">\'http://localhost:5001\'</span>,\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attr\">changeOrigin</span>: <span class=\"hljs-literal\">true</span>,\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attr\">pathRewrite</span>: { <span class=\"hljs-string\">\'^/api2\'</span>: <span class=\"hljs-string\">\'\'</span> }\n&nbsp; &nbsp; &nbsp; &nbsp; }),\n&nbsp; &nbsp; );\n};\n</pre><p><br></p><h4><span style=\"color: rgb(230, 0, 0);\">组件App.js</span></h4><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-keyword\">import</span> React , {Component} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\'react\'</span>\n<span class=\"hljs-keyword\">import</span> axios <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\'axios\'</span>\n\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">App</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Component</span> </span>{\n&nbsp; <span class=\"hljs-function\"><span class=\"hljs-title\">getStudentsData</span>()</span> {\n&nbsp; &nbsp; <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\'学生\'</span>)\n&nbsp; &nbsp;axios.get(<span class=\"hljs-string\">\'http://localhost:3000/api1/students\'</span>).then(<span class=\"hljs-function\"><span class=\"hljs-params\">res</span>=&gt;</span>{\n&nbsp; &nbsp; &nbsp;<span class=\"hljs-built_in\">console</span>.log(res.data)\n&nbsp; &nbsp;})\n&nbsp; }\n&nbsp; <span class=\"hljs-function\"><span class=\"hljs-title\">getCarsData</span>()</span> {\n&nbsp; &nbsp; <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\'汽车\'</span>)\n&nbsp; &nbsp; axios.get(<span class=\"hljs-string\">\'http://localhost:3000/api2/cars\'</span>).then(<span class=\"hljs-function\"><span class=\"hljs-params\">res</span> =&gt;</span> {\n&nbsp; &nbsp; &nbsp; <span class=\"hljs-built_in\">console</span>.log(res.data)\n&nbsp; &nbsp; })\n&nbsp; }\n&nbsp; <span class=\"hljs-function\"><span class=\"hljs-title\">render</span>()</span> {\n&nbsp; &nbsp; <span class=\"hljs-keyword\">return</span>(\n&nbsp; &nbsp; &nbsp; <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{{margin:</span>\'<span class=\"hljs-attr\">50px</span>\',<span class=\"hljs-attr\">paddding:</span>\'<span class=\"hljs-attr\">20px</span>\'}}&gt;</span>\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{()</span>=&gt;</span>this.getStudentsData()}&gt;获取学生数据<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{()</span>=&gt;</span>this.getCarsData()}&gt;获取学汽车数据<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n&nbsp; &nbsp; &nbsp; <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n&nbsp; &nbsp; )\n&nbsp; }\n} \n</pre><p><br></p><p>1.优点：可以配置多个代理，可以灵活控制请求是否走代理</p><p>2.缺点：配置相对繁琐，前端请求资源必须加匹配前缀</p>', '2021-11-18 14:37:41', 'React', '2021-11-18 14:55:27', 0, 'null', NULL);
INSERT INTO `blog_container` VALUES (136, 'admin', 'ES6连续结构赋值', 'ES6连续结构赋值，并给key值重新起一个名字', '<pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-comment\">// 获取 c 值</span>\nlet obj = {a:{b:{c:<span class=\"hljs-number\">1</span>}}}\n <span class=\"hljs-comment\">// 普通写法</span>\nconsole.log(obj.a.b.c)  <span class=\"hljs-comment\">// 输出 1</span>\n\n<span class=\"hljs-comment\">//连续结构方法</span>\nconst {a:{b:{c}}}﻿ = obj\nconsole.log(c) <span class=\"hljs-comment\">// 输出 1</span>\n\n\nlet obj2 = {a:{b:<span class=\"hljs-number\">5</span>}}\n<span class=\"hljs-comment\">// 连续结构重命名方法</span>\n﻿const {a:{b:data}}﻿ = obj2\nconsole.log(data) <span class=\"hljs-comment\">// 输出 5</span>\n\n\n</pre>', '2021-11-22 20:25:24', 'javaScript', NULL, 0, 'null', NULL);
INSERT INTO `blog_container` VALUES (137, 'admin', 'React  消息订阅 实现任意组件之间通讯 ---pubsub-js', '在React中使用 pubsub-js 实现组件之间的通讯', '<p><strong>第一步：</strong>安装 pubsub-js</p><pre class=\"ql-syntax\" spellcheck=\"false\">npm <span class=\"hljs-keyword\">install </span>pubsub-<span class=\"hljs-keyword\">js </span>-S   \n或者\nyarn <span class=\"hljs-keyword\">add </span>pubsub-<span class=\"hljs-keyword\">js&nbsp;</span>\n</pre><p><br></p><p><strong>第二步</strong>：导入</p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-keyword\">import</span> pubsub <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"pubsub-js\"</span>\n</pre><p><br></p><p><strong>第三步</strong>：使用</p><p>发送消息的组件</p><pre class=\"ql-syntax\" spellcheck=\"false\">pubsub.publish(<span class=\"hljs-string\">\'msg\'</span>, <span class=\"hljs-string\">\'hello world!\'</span>)\n</pre><p><br></p><p>接收消息的组件</p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-keyword\">this</span>.token = pubsub.subscribe(<span class=\"hljs-string\">\'msg\'</span>，(_,<span class=\"hljs-keyword\">data</span>)=&gt;{\ncconsole.log(<span class=\"hljs-keyword\">data</span>) <span class=\"hljs-comment\">// 打印 hello world!</span>\n﻿})\n\n</pre><p><br></p><p>取消订阅：</p><pre class=\"ql-syntax\" spellcheck=\"false\">pubsub.unsubscribe(<span class=\"hljs-keyword\">this</span>.token)\n</pre><p><br></p><p><strong>总结</strong></p><p>publish发布消息出去，消息名和携带的消息，然后subscribe去订阅这个消息，然后调用那个回调，msg就是消息名，data就是那个数据</p><p><br></p><p><br></p><p>详细地址：<a href=\"https://www.cnblogs.com/pangqianjin/p/14756726.html\" rel=\"noopener noreferrer\" target=\"_blank\">https://www.cnblogs.com/pangqianjin/p/14756726.html</a></p>', '2021-11-23 16:45:04', 'React', '2021-11-23 17:05:08', 1, 'null', NULL);
INSERT INTO `blog_container` VALUES (138, 'admin', 'fetch 发送网络请求用法', 'fetch是浏览器自带的网络请求库，类似axios，fetch 发送网络请求用法', '<p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\">fetch(<span class=\"hljs-string\">\'url\'</span>,{method:<span class=\"hljs-string\">\'GET\'</span>,params:params}).<span class=\"hljs-keyword\">then</span>(\nrespones=&gt;{ <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\'服务器连接成功\'</span>);\n          <span class=\"hljs-keyword\">return</span> respones.json();\n },\nerror=&gt;{ <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\'服务器连接失败\'</span>) \n       <span class=\"hljs-regexp\">//</span> 连接服务器失败，重新初始化<span class=\"hljs-built_in\">Promise</span>暂停\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span>=&gt;</span>{});\n }\n\n).<span class=\"hljs-keyword\">then</span>(\nrespones=&gt;{ <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\'数据获取成功\'</span>, respones); \n },\nerror=&gt;{ <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\'数据获取失败\'</span>,error) }  \n\n﻿).<span class=\"hljs-keyword\">catch</span>(\n <span class=\"hljs-function\"><span class=\"hljs-params\">(error)</span>=&gt;</span>{<span class=\"hljs-built_in\">console</span>.log(error)}\n)\n</pre><p><br></p><p><strong>优化后,如下图</strong></p><p class=\"ql-align-center\"><br></p><p class=\"ql-align-center\"><img src=\"http://python.php/vue/vue_blog/vue_blog_server/upload/1637721161Snipaste_2021-11-24_10-31-51.PNG\"></p><p><br></p><p><br></p><p><strong>优化后的代码</strong></p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\">fetch(<span class=\"hljs-string\">\'url\'</span>,{method:<span class=\"hljs-string\">\'GET\'</span>,params:params}).th<span class=\"hljs-meta\">en(</span>\nrespones=&gt;{ console<span class=\"hljs-meta\">.log(</span><span class=\"hljs-string\">\'服务器连接成功\'</span>);\n          <span class=\"hljs-meta\">return</span> respones.js<span class=\"hljs-meta\">on(</span>);\n }\n).th<span class=\"hljs-meta\">en(</span>\nrespones=&gt;{ console<span class=\"hljs-meta\">.log(</span><span class=\"hljs-string\">\'数据获取成功\'</span>, respones); \n }\n\n﻿).catch(\n (<span class=\"hljs-meta\">error</span>)=&gt;{console<span class=\"hljs-meta\">.log(error</span>)}\n)\n</pre><p><br></p><p><strong>在次优化(async await)</strong></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-keyword\">try</span>{\n   <span class=\"hljs-keyword\">const</span> respones = <span class=\"hljs-keyword\">await</span> fetch(<span class=\"hljs-string\">\'url\'</span>,{<span class=\"hljs-attr\">method</span>:<span class=\"hljs-string\">\'GET\'</span>,<span class=\"hljs-attr\">params</span>:params})\n   <span class=\"hljs-keyword\">const</span> data = <span class=\"hljs-keyword\">await</span> response.json()\n   <span class=\"hljs-built_in\">console</span>.log(data)\n﻿}\n<span class=\"hljs-keyword\">catch</span>(error){\n   <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\'请求出错\'</span>,error)\n}\n<span class=\"hljs-comment\">// 这段函数的外面需要包含一个 async function</span>\n</pre>', '2021-11-24 10:33:12', 'javaScript', '2021-11-24 10:56:31', 0, 'null', NULL);
INSERT INTO `blog_container` VALUES (139, 'admin', 'React 使用Echarts 绘制 柱形图', 'React 使用Echarts 绘制 柱形图', '<p><strong>效果图</strong></p><p><br></p><p><img src=\"http://python.php/vue/vue_blog/vue_blog_server/upload/1637762069Snipaste_2021-11-24_21-53-48.PNG\"></p><p><br></p><p><strong>代码</strong></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-keyword\">import</span> React, { Component } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\'react\'</span>;\n<span class=\"hljs-keyword\">import</span> { Button, DatePicker } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\'hzero-ui\'</span>;\n<span class=\"hljs-keyword\">import</span> { Header, Content } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\'components/Page\'</span>;\n<span class=\"hljs-keyword\">import</span> echarts <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\'echarts\'</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">\'./EchartWmsStats.css\'</span>;\n\n\n<span class=\"hljs-keyword\">const</span> { RangePicker } = DatePicker;\n<span class=\"hljs-keyword\">const</span> ButtonGroup = Button.Group;\n\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">EchartsStats</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Component</span> </span>{\n&nbsp; <span class=\"hljs-function\"><span class=\"hljs-title\">componentDidMount</span>()</span> {\n&nbsp; &nbsp; <span class=\"hljs-built_in\">this</span>.showWmsInfo();\n&nbsp; }\n\n\n&nbsp; <span class=\"hljs-function\"><span class=\"hljs-title\">showWmsInfo</span>()</span> {\n&nbsp; &nbsp; <span class=\"hljs-keyword\">const</span> dom = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">\'container\'</span>);\n&nbsp; &nbsp; <span class=\"hljs-keyword\">const</span> myChart = echarts.init(dom, <span class=\"hljs-string\">\'light\'</span>);\n\n\n&nbsp; &nbsp; <span class=\"hljs-keyword\">let</span> option = {};\n&nbsp; &nbsp; <span class=\"hljs-keyword\">const</span> dataAxis = [<span class=\"hljs-string\">\'WMS订单被接收\'</span>, <span class=\"hljs-string\">\'波次创建\'</span>, <span class=\"hljs-string\">\'拣货\'</span>, <span class=\"hljs-string\">\'复核\'</span>, <span class=\"hljs-string\">\'发运\'</span>];\n&nbsp; &nbsp; <span class=\"hljs-keyword\">const</span> data = [<span class=\"hljs-number\">4293</span>, <span class=\"hljs-number\">4055</span>, <span class=\"hljs-number\">4055</span>, <span class=\"hljs-number\">4056</span>, <span class=\"hljs-number\">4000</span>];\n&nbsp; &nbsp; <span class=\"hljs-keyword\">const</span> undefinedData = [<span class=\"hljs-number\">300</span>, <span class=\"hljs-number\">238</span>, <span class=\"hljs-number\">270</span>, <span class=\"hljs-number\">260</span>, <span class=\"hljs-number\">190</span>];\n&nbsp; &nbsp; <span class=\"hljs-keyword\">const</span> yMax = <span class=\"hljs-number\">5000</span>;\n&nbsp; &nbsp; <span class=\"hljs-keyword\">const</span> dataShadow = [];\n&nbsp; &nbsp; <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; data.length; i++) {\n&nbsp; &nbsp; &nbsp; dataShadow.push(yMax);\n&nbsp; &nbsp; }\n&nbsp; &nbsp; option = {\n&nbsp; &nbsp; &nbsp; <span class=\"hljs-comment\">// 是否显示提示框组件,鼠标放上去将提示数量</span>\n&nbsp; &nbsp; &nbsp; <span class=\"hljs-attr\">tooltip</span>: {\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attr\">show</span>: <span class=\"hljs-literal\">true</span>,\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-comment\">// 坐标轴触发 鼠标经过，在柱形图显示Y轴线条</span>\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attr\">trigger</span>: <span class=\"hljs-string\">\'axis\'</span>,\n&nbsp; &nbsp; &nbsp; },\n&nbsp; &nbsp; &nbsp; <span class=\"hljs-comment\">// 设置x轴样式</span>\n&nbsp; &nbsp; &nbsp; <span class=\"hljs-attr\">xAxis</span>: {\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attr\">data</span>: dataAxis,\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attr\">axisLabel</span>: {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attr\">inside</span>: <span class=\"hljs-literal\">false</span>,\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attr\">fontSize</span>: <span class=\"hljs-number\">18</span>,\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attr\">color</span>: <span class=\"hljs-string\">\'#FFF\'</span>,\n&nbsp; &nbsp; &nbsp; &nbsp; },\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attr\">axisTick</span>: {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attr\">show</span>: <span class=\"hljs-literal\">false</span>,\n&nbsp; &nbsp; &nbsp; &nbsp; },\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attr\">axisLine</span>: {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attr\">show</span>: <span class=\"hljs-literal\">false</span>,\n&nbsp; &nbsp; &nbsp; &nbsp; },\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attr\">z</span>: <span class=\"hljs-number\">10</span>,\n&nbsp; &nbsp; &nbsp; },\n&nbsp; &nbsp; &nbsp; <span class=\"hljs-comment\">// 设置左边Y轴样式</span>\n&nbsp; &nbsp; &nbsp; <span class=\"hljs-attr\">yAxis</span>: {\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\'value\'</span>,\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attr\">axisLine</span>: {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attr\">show</span>: <span class=\"hljs-literal\">false</span>,\n&nbsp; &nbsp; &nbsp; &nbsp; },\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attr\">axisTick</span>: {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attr\">show</span>: <span class=\"hljs-literal\">false</span>,\n&nbsp; &nbsp; &nbsp; &nbsp; },\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attr\">axisLabel</span>: {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attr\">fontSize</span>: <span class=\"hljs-number\">17</span>,\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attr\">color</span>: <span class=\"hljs-string\">\'#fff\'</span>,\n&nbsp; &nbsp; &nbsp; &nbsp; },\n&nbsp; &nbsp; &nbsp; },\n&nbsp; &nbsp; &nbsp; <span class=\"hljs-comment\">// 控制顶部样式(未完成,已完成)</span>\n&nbsp; &nbsp; &nbsp; <span class=\"hljs-attr\">legend</span>: {\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attr\">textStyle</span>: {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attr\">color</span>: <span class=\"hljs-string\">\'#FFF\'</span>,\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attr\">fontSize</span>: <span class=\"hljs-number\">18</span>,\n&nbsp; &nbsp; &nbsp; &nbsp; },\n&nbsp; &nbsp; &nbsp; },\n&nbsp; &nbsp; &nbsp; <span class=\"hljs-comment\">// dataZoom 鼠标滚轮、手指滑动（触屏上）来缩放或漫游坐标系。</span>\n&nbsp; &nbsp; &nbsp; <span class=\"hljs-comment\">// dataZoom: [</span>\n&nbsp; &nbsp; &nbsp; <span class=\"hljs-comment\">// &nbsp; {</span>\n&nbsp; &nbsp; &nbsp; <span class=\"hljs-comment\">// &nbsp; &nbsp; type: \'inside\',</span>\n&nbsp; &nbsp; &nbsp; <span class=\"hljs-comment\">// &nbsp; },</span>\n&nbsp; &nbsp; &nbsp; <span class=\"hljs-comment\">// ],</span>\n&nbsp; &nbsp; &nbsp; <span class=\"hljs-attr\">series</span>: [\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-comment\">// 蓝色柱子</span>\n&nbsp; &nbsp; &nbsp; &nbsp; {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\'bar\'</span>,\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attr\">showBackground</span>: <span class=\"hljs-literal\">true</span>,\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">\'已完成\'</span>,\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attr\">stack</span>: <span class=\"hljs-string\">\'Ad\'</span>,\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-comment\">// 设置柱形图大小</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attr\">barWidth</span>: <span class=\"hljs-number\">90</span>,\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-comment\">// 设置柱形图渐变颜色</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attr\">itemStyle</span>: {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attr\">color</span>: <span class=\"hljs-keyword\">new</span> echarts.graphic.LinearGradient(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, [\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; { <span class=\"hljs-attr\">offset</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">color</span>: <span class=\"hljs-string\">\'#83bff6\'</span> },\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; { <span class=\"hljs-attr\">offset</span>: <span class=\"hljs-number\">0.5</span>, <span class=\"hljs-attr\">color</span>: <span class=\"hljs-string\">\'#188df0\'</span> },\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; { <span class=\"hljs-attr\">offset</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">color</span>: <span class=\"hljs-string\">\'#188df0\'</span> },\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ]),\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attr\">emphasis</span>: {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attr\">itemStyle</span>: {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attr\">color</span>: <span class=\"hljs-keyword\">new</span> echarts.graphic.LinearGradient(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, [\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; { <span class=\"hljs-attr\">offset</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">color</span>: <span class=\"hljs-string\">\'#2378f7\'</span> },\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; { <span class=\"hljs-attr\">offset</span>: <span class=\"hljs-number\">0.7</span>, <span class=\"hljs-attr\">color</span>: <span class=\"hljs-string\">\'#2378f7\'</span> },\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; { <span class=\"hljs-attr\">offset</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">color</span>: <span class=\"hljs-string\">\'#83bff6\'</span> },\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ]),\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; data,\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-comment\">// 控制蓝色柱子样式</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attr\">label</span>: {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attr\">show</span>: <span class=\"hljs-literal\">true</span>,\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attr\">color</span>: <span class=\"hljs-string\">\'#FFF\'</span>,\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attr\">fontSize</span>: <span class=\"hljs-number\">18</span>,\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attr\">position</span>: <span class=\"hljs-string\">\'insideTop\'</span>,\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },\n&nbsp; &nbsp; &nbsp; &nbsp; },\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-comment\">// 红色柱子</span>\n&nbsp; &nbsp; &nbsp; &nbsp; {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">\'未完成\'</span>,\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\'bar\'</span>,\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attr\">stack</span>: <span class=\"hljs-string\">\'Ad\'</span>,\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attr\">color</span>: <span class=\"hljs-string\">\'red\'</span>,\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attr\">emphasis</span>: {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attr\">focus</span>: <span class=\"hljs-string\">\'series\'</span>,\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attr\">data</span>: undefinedData,\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-comment\">// 控制红色柱子样式</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attr\">label</span>: {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attr\">show</span>: <span class=\"hljs-literal\">true</span>,\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attr\">position</span>: <span class=\"hljs-string\">\'insideTop\'</span>,\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attr\">fontSize</span>: <span class=\"hljs-number\">17</span>,\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },\n&nbsp; &nbsp; &nbsp; &nbsp; },\n&nbsp; &nbsp; &nbsp; ],\n&nbsp; &nbsp; };\n\n\n&nbsp; &nbsp; <span class=\"hljs-keyword\">const</span> zoomSize = <span class=\"hljs-number\">8</span>;\n&nbsp; &nbsp; myChart.on(<span class=\"hljs-string\">\'click\'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">params</span>) </span>{\n&nbsp; &nbsp; &nbsp; <span class=\"hljs-built_in\">console</span>.log(dataAxis[<span class=\"hljs-built_in\">Math</span>.max(params.dataIndex - zoomSize / <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">0</span>)]);\n&nbsp; &nbsp; &nbsp; myChart.dispatchAction({\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\'dataZoom\'</span>,\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attr\">startValue</span>: dataAxis[<span class=\"hljs-built_in\">Math</span>.max(params.dataIndex - zoomSize / <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">0</span>)],\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attr\">endValue</span>: dataAxis[<span class=\"hljs-built_in\">Math</span>.min(params.dataIndex + zoomSize / <span class=\"hljs-number\">2</span>, data.length - <span class=\"hljs-number\">1</span>)],\n&nbsp; &nbsp; &nbsp; });\n&nbsp; &nbsp; });\n\n\n&nbsp; &nbsp; myChart.setOption(option);\n&nbsp; }\n\n\n&nbsp; onChange = <span class=\"hljs-function\">(<span class=\"hljs-params\">date, dateString</span>) =&gt;</span> {\n&nbsp; &nbsp; <span class=\"hljs-built_in\">console</span>.log(date, dateString);\n&nbsp; };\n\n\n&nbsp; handleSearch = <span class=\"hljs-function\">() =&gt;</span> {};\n\n\n&nbsp; setClear = <span class=\"hljs-function\">() =&gt;</span> {};\n\n\n&nbsp; <span class=\"hljs-function\"><span class=\"hljs-title\">render</span>()</span> {\n&nbsp; &nbsp; <span class=\"hljs-keyword\">return</span> (\n&nbsp; &nbsp; &nbsp; <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">React.Fragment</span>&gt;</span>\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Header</span> <span class=\"hljs-attr\">title</span>=<span class=\"hljs-string\">\"WMS信息统计\"</span>&gt;</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Button</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"primary\"</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{{</span> <span class=\"hljs-attr\">marginLeft:</span> \'<span class=\"hljs-attr\">8px</span>\' }} <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{this.setClear()}</span>&gt;</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 重置\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Button</span>&gt;</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Button</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"primary\"</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{this.handleSearch()}</span>&gt;</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 查询\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Button</span>&gt;</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ButtonGroup</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{{</span> <span class=\"hljs-attr\">marginLeft:</span> \'<span class=\"hljs-attr\">8px</span>\' }}&gt;</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Button</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"primary\"</span>&gt;</span>WMS接收<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Button</span>&gt;</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Button</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"primary\"</span>&gt;</span>OMS接收<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Button</span>&gt;</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ButtonGroup</span>&gt;</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ButtonGroup</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{{</span> <span class=\"hljs-attr\">marginLeft:</span> \'<span class=\"hljs-attr\">8px</span>\' }}&gt;</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Button</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"primary\"</span>&gt;</span>票数<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Button</span>&gt;</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Button</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"primary\"</span>&gt;</span>件数<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Button</span>&gt;</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ButtonGroup</span>&gt;</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">RangePicker</span> <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{this.onChange}</span> /&gt;</span>\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Header</span>&gt;</span>\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Content</span>&gt;</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {/* 柱形图展示区域 */}\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"wrap\"</span>&gt;</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"container\"</span> /&gt;</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Content</span>&gt;</span>\n&nbsp; &nbsp; &nbsp; <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">React.Fragment</span>&gt;</span>\n&nbsp; &nbsp; );\n&nbsp; }\n}\n</pre><p><br></p><p><br></p><p><strong>css</strong></p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\">body {<span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">100%</span>;<span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-number\">0</span>;}\n&nbsp; .wrap {<span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">100%</span>;<span class=\"hljs-attribute\">background</span>: <span class=\"hljs-built_in\">url</span>(<span class=\"hljs-string\">../../../assets/echartsBack.jpg</span>);}\n&nbsp; #container {<span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">100%</span>;<span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">100%</span>;<span class=\"hljs-attribute\">box-shadow</span>: -<span class=\"hljs-number\">10px</span> -<span class=\"hljs-number\">10px</span> <span class=\"hljs-number\">20px</span> <span class=\"hljs-number\">20px</span> skyblue inset;}\n&nbsp; .sang_Calender{<span class=\"hljs-attribute\">border</span>: <span class=\"hljs-number\">#62AFF4</span> <span class=\"hljs-number\">1px</span> solid;<span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">170px</span>;<span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">26px</span>;\n&nbsp; &nbsp; <span class=\"hljs-attribute\">outline</span>: none;<span class=\"hljs-attribute\">background-color</span>: transparent;<span class=\"hljs-attribute\">border-radius</span>: <span class=\"hljs-number\">5px</span>;}\n&nbsp; .search {<span class=\"hljs-attribute\">box-sizing</span>: border-box;<span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">10%</span>;<span class=\"hljs-attribute\">box-shadow</span>: -<span class=\"hljs-number\">10px</span> -<span class=\"hljs-number\">10px</span> <span class=\"hljs-number\">20px</span> <span class=\"hljs-number\">20px</span> skyblue inset;\n   <span class=\"hljs-attribute\">display</span>: flex;<span class=\"hljs-attribute\">justify-content</span>: center;<span class=\"hljs-attribute\">align-items</span>: center;<span class=\"hljs-attribute\">color</span>: <span class=\"hljs-number\">#fff</span>;}\n\n\n</pre><p><br></p>', '2021-11-24 21:54:56', 'React', NULL, 1, 'null', NULL);
INSERT INTO `blog_container` VALUES (140, 'admin', 'React -router 路由器 ', 'React-router 分三种，分别为 web，Native，any 前端人员 一般用web，React-router-dom', '<p>React-router 分三种，分别为 web，Native(<span style=\"color: rgb(114, 113, 113);\">基于 React 的移动端跨平台 UI</span>)，any(可以用于任何地方) 前端人员 一般用web，React-router-dom</p><p><br></p><p>react路由安装命令：</p><p>yarn安装 ：yarn add react-router-dom</p><p><br></p><p><strong>1、React-router-dom的理解</strong></p><p><br></p><p>1.react的一个插件库</p><p>2.专门来实现SPA应用(SPA:单页面应用)</p><p>3.基于react项目基本都会用到此库</p><p><br></p><p><strong>2.路由简单使用方法</strong></p><p><strong>App.js</strong></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-keyword\">import</span> React <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"react\"</span>;\n<span class=\"hljs-keyword\">import</span> { Link, Route, Routes} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"react-router-dom\"</span>;\nimport Home from \"./pages/Home\";\nimport About from \"./pages/About\";\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">App</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">React</span>.<span class=\"hljs-title\">Component</span> </span>{\n&nbsp; <span class=\"hljs-function\"><span class=\"hljs-title\">render</span>()</span> {\n&nbsp; &nbsp; <span class=\"hljs-keyword\">return</span> (\n        {<span class=\"hljs-comment\">/* 路由切换url */</span>}\n        &lt;div&gt;<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Link</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"list-group-item\"</span> <span class=\"hljs-attr\">to</span>=<span class=\"hljs-string\">\"/about\"</span>&gt;</span>About<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Link</span>&gt;</span>\n            ﻿<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Link</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"list-group-item\"</span> <span class=\"hljs-attr\">to</span>=<span class=\"hljs-string\">\"/home\"</span>&gt;</span>Home<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Link</span>&gt;</span>\n           {<span class=\"hljs-comment\">/* 注册路由 */</span>}\n           &lt;Routes&gt;\n&nbsp;           <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Route</span> <span class=\"hljs-attr\">path</span>=<span class=\"hljs-string\">\"/about\"</span> <span class=\"hljs-attr\">element</span>=<span class=\"hljs-string\">{</span>&lt;<span class=\"hljs-attr\">About</span>/&gt;</span>}/&gt;\n&nbsp;           <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Route</span> <span class=\"hljs-attr\">path</span>=<span class=\"hljs-string\">\"/home\"</span> <span class=\"hljs-attr\">element</span>=<span class=\"hljs-string\">{</span>&lt;<span class=\"hljs-attr\">Home</span> /&gt;</span>}/&gt;\n          &lt;<span class=\"hljs-regexp\">/Routes&gt;&lt;/</span>div&gt;\n       )\n   }\n}\n\n</pre><p><br></p><p><strong>index.js</strong></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-keyword\">import</span> React <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\'react\'</span>;\n<span class=\"hljs-keyword\">import</span> ReactDOM <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\'react-dom\'</span>;\n<span class=\"hljs-comment\">// react 路由</span>\n<span class=\"hljs-keyword\">import</span> { BrowserRouter } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\'react-router-dom\'</span>;\n<span class=\"hljs-keyword\">import</span> App <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\'./App\'</span>;\n\n\n\nReactDOM.render(\n&nbsp; &nbsp; <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">BrowserRouter</span>&gt;</span>\n&nbsp; &nbsp; &nbsp; <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">App</span> /&gt;</span>\n&nbsp; &nbsp; <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">BrowserRouter</span>&gt;</span>,\n&nbsp; <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">\'root\'</span>)\n);\n\n\n</pre>', '2021-11-25 10:45:10', 'React', '2021-11-25 20:58:22', 0, 'null', NULL);
INSERT INTO `blog_container` VALUES (141, 'admin', 'ant design Table 组件中的单元格, 鼠标停的时候显示文字', 'ant design Table 组件中的单元格的title属性设置，鼠标停的时候显示文字。', '<p><span style=\"color: rgb(33, 37, 41);\">通过 column.render 自定义显示的内容：</span></p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-keyword\">const</span> columns = [\n {\n   <span class=\"hljs-attr\">title</span>: <span class=\"hljs-string\">\'Name\'</span>,\n   <span class=\"hljs-attr\">key</span>: <span class=\"hljs-string\">\'name\'</span>,\n   <span class=\"hljs-attr\">dataIndex</span>: <span class=\"hljs-string\">\'name\'</span>,\n   <span class=\"hljs-function\"><span class=\"hljs-title\">render</span>(<span class=\"hljs-params\">text, record</span>)</span> {\n     <span class=\"hljs-keyword\">return</span> <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">title</span>=<span class=\"hljs-string\">\"鼠标悬停时要显示的文字内容\"</span>&gt;</span>{text}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span>\n   }\n }\n];\n</pre>', '2021-11-25 16:14:57', 'React', NULL, 1, 'null', NULL);
INSERT INTO `blog_container` VALUES (142, 'admin', 'vue自定义配置webpack打包--常用设置', 'vue自定义配置webpack打包', '<p>在项目根目录新建一个<strong style=\"color: rgb(230, 0, 0);\">vue.config.js</strong>文件</p><p><br></p><p><strong>代码</strong></p><pre class=\"ql-syntax\" spellcheck=\"false\">module.exports = {\n      // 打包输出路径\n&nbsp; &nbsp; publicPath: <span class=\"hljs-string\">\'./\'</span>,\n&nbsp; &nbsp; <span class=\"hljs-comment\">// 禁止生成map文件</span>\n&nbsp; &nbsp; productionSourceMap: <span class=\"hljs-literal\">false</span>,\n\n\n&nbsp; &nbsp; <span class=\"hljs-comment\">// 判断当前是开发模式还是生成模式，来选定程序入口</span>\n&nbsp; &nbsp; chainWebpack:config=&gt; {\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-comment\">// 发布模式</span>\n&nbsp; &nbsp; &nbsp; &nbsp; config.<span class=\"hljs-keyword\">when</span>(process.env.NODE_ENV === <span class=\"hljs-string\">\'production\'</span>,config =&gt; {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; config.entry(<span class=\"hljs-string\">\'app\'</span>).clear().<span class=\"hljs-keyword\">add</span>(<span class=\"hljs-string\">\'./src/main-prod.js\'</span>)\n&nbsp; &nbsp; &nbsp; &nbsp; })\n\n\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-comment\">// 开发模式</span>\n&nbsp; &nbsp; &nbsp; &nbsp; config.<span class=\"hljs-keyword\">when</span>(process.env.NODE_ENV === <span class=\"hljs-string\">\'development\'</span>,config =&gt; {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; config.entry(<span class=\"hljs-string\">\'app\'</span>).clear().<span class=\"hljs-keyword\">add</span>(<span class=\"hljs-string\">\'./src/main.js\'</span>)\n&nbsp; &nbsp; &nbsp; &nbsp; })\n\n\n&nbsp; &nbsp; }\n}\n</pre><p><br></p><p><strong>图示﻿</strong></p><p><img src=\"http://python.php/vue/vue_blog/vue_blog_server/upload/1637916471Snipaste_2021-11-26_16-47-21.PNG\"></p>', '2021-11-26 16:48:29', 'vue', '2021-11-26 17:04:11', 0, 'null', NULL);
INSERT INTO `blog_container` VALUES (143, 'admin', 'js获取当前年月日yyyymmdd格式的代码', 'js获取当前年月日-YYYYmmDD格式的实现代码  ', '<p><strong>代码</strong></p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\">&nbsp;var nowDate = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">Date()</span>;\n  var year = nowDate.get<span class=\"hljs-constructor\">FullYear()</span>;\n&nbsp;var month = nowDate.get<span class=\"hljs-constructor\">Month()</span> + <span class=\"hljs-number\">1</span> &lt; <span class=\"hljs-number\">10</span> ? <span class=\"hljs-string\">\"0\"</span> + (nowDate.get<span class=\"hljs-constructor\">Month()</span> + <span class=\"hljs-number\">1</span>):nowDate.get<span class=\"hljs-constructor\">Month()</span> + <span class=\"hljs-number\">1</span>;\n&nbsp;var day = nowDate.get<span class=\"hljs-constructor\">Date()</span> &lt; <span class=\"hljs-number\">10</span> ? <span class=\"hljs-string\">\"0\"</span> + nowDate.get<span class=\"hljs-constructor\">Date()</span> : nowDate.get<span class=\"hljs-constructor\">Date()</span>;\n&nbsp;var dateStr = year + <span class=\"hljs-string\">\"\"</span> + month + <span class=\"hljs-string\">\"\"</span> + day;\n\n  date.get<span class=\"hljs-constructor\">Year()</span>; <span class=\"hljs-comment\">//获取当前年份(2位)</span>\n\n\n&nbsp;date.get<span class=\"hljs-constructor\">FullYear()</span>; <span class=\"hljs-comment\">//获取完整的年份(4位)</span>\n\n  date.get<span class=\"hljs-constructor\">Month()</span>; <span class=\"hljs-comment\">//获取当前月份(0-11,0代表1月)</span>\n\n  date.get<span class=\"hljs-constructor\">Date()</span>; <span class=\"hljs-comment\">//获取当前日(1-31)</span>\n\n  date.get<span class=\"hljs-constructor\">Day()</span>; <span class=\"hljs-comment\">//获取当前星期X(0-6,0代表星期天)</span>\n\n\n&nbsp;date.get<span class=\"hljs-constructor\">Time()</span>; <span class=\"hljs-comment\">//获取当前时间(从1970.1.1开始的毫秒数)</span>\n\n\n&nbsp;date.get<span class=\"hljs-constructor\">Hours()</span>; <span class=\"hljs-comment\">//获取当前小时数(0-23)</span>\n\n\n&nbsp;date.get<span class=\"hljs-constructor\">Minutes()</span>; <span class=\"hljs-comment\">//获取当前分钟数(0-59)</span>\n\n\n&nbsp;date.get<span class=\"hljs-constructor\">Seconds()</span>; <span class=\"hljs-comment\">//获取当前秒数(0-59)</span>\n\n  date.get<span class=\"hljs-constructor\">Milliseconds()</span>; <span class=\"hljs-comment\">//获取当前毫秒数(0-999)</span>\n\n\n&nbsp;date.<span class=\"hljs-keyword\">to</span><span class=\"hljs-constructor\">LocaleDateString()</span>; <span class=\"hljs-comment\">//获取当前日期</span>\n\n\n&nbsp;var mytime = date.<span class=\"hljs-keyword\">to</span><span class=\"hljs-constructor\">LocaleTimeString()</span>; <span class=\"hljs-comment\">//获取当前时间</span>\n\n\n&nbsp;date.<span class=\"hljs-keyword\">to</span><span class=\"hljs-constructor\">LocaleString()</span>; <span class=\"hljs-comment\">//获取日期与时间</span>\n\n\n <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">Date()</span>.<span class=\"hljs-keyword\">to</span><span class=\"hljs-constructor\">LocaleDateString()</span>.split(<span class=\"hljs-character\">\'/\'</span>).join(<span class=\"hljs-character\">\'-\'</span>); <span class=\"hljs-comment\">// 输出当前年月日, 格式为 2021-11-29</span>\n</pre><p><br></p><p><br></p>', '2021-11-29 09:39:16', 'javaScript', NULL, 0, 'null', NULL);
INSERT INTO `blog_container` VALUES (144, 'admin', '使用echarts制作柱形统计图--双柱堆叠版', '使用echarts制作柱形统计图--双柱堆叠版', '<p><br></p><p><img src=\"http://python.php/vue/vue_blog/vue_blog_server/upload/1638509937Snipaste_2021-12-03_13-38-33.png\"></p><p><br></p><p><br></p><p><strong>代码</strong></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-meta\">&lt;!DOCTYPE html&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">\"height: 100%\"</span>&gt;</span>\n\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span>\n&nbsp; <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">\"utf-8\"</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span>\n&nbsp; body {\n&nbsp; &nbsp; <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">100%</span>;\n&nbsp; &nbsp; <span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-number\">0</span>;\n&nbsp; }\n\n\n&nbsp; .data-time {\n&nbsp; &nbsp; <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-number\">#FFF</span>;\n&nbsp; }\n\n\n&nbsp; .wrap {\n&nbsp; &nbsp; <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">100%</span>;\n&nbsp; &nbsp; <span class=\"hljs-attribute\">background</span>: <span class=\"hljs-built_in\">url</span>(<span class=\"hljs-string\">bg/bg1.jpg</span>);\n&nbsp; }\n\n\n&nbsp; #container {\n&nbsp; &nbsp; <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">90%</span>;\n&nbsp; &nbsp; <span class=\"hljs-attribute\">box-shadow</span>: -<span class=\"hljs-number\">10px</span> -<span class=\"hljs-number\">10px</span> <span class=\"hljs-number\">20px</span> <span class=\"hljs-number\">20px</span> skyblue inset;\n&nbsp; }\n\n\n&nbsp; .sang_Calender {\n&nbsp; &nbsp; <span class=\"hljs-attribute\">border</span>: <span class=\"hljs-number\">#62AFF4</span> <span class=\"hljs-number\">1px</span> solid;\n&nbsp; &nbsp; <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">170px</span>;\n&nbsp; &nbsp; <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">26px</span>;\n&nbsp; &nbsp; <span class=\"hljs-attribute\">outline</span>: none;\n&nbsp; &nbsp; <span class=\"hljs-attribute\">background-color</span>: transparent;\n&nbsp; &nbsp; <span class=\"hljs-attribute\">border-radius</span>: <span class=\"hljs-number\">5px</span>;\n&nbsp; }\n\n\n&nbsp; .search {\n&nbsp; &nbsp; <span class=\"hljs-attribute\">box-sizing</span>: border-box;\n&nbsp; &nbsp; <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">10%</span>;\n&nbsp; &nbsp; <span class=\"hljs-attribute\">box-shadow</span>: -<span class=\"hljs-number\">10px</span> -<span class=\"hljs-number\">10px</span> <span class=\"hljs-number\">20px</span> <span class=\"hljs-number\">20px</span> skyblue inset;\n&nbsp; &nbsp; <span class=\"hljs-attribute\">display</span>: flex;\n&nbsp; &nbsp; <span class=\"hljs-attribute\">justify-content</span>: flex-start;\n&nbsp; &nbsp; <span class=\"hljs-attribute\">align-items</span>: center;\n&nbsp; &nbsp; <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-number\">#fff</span>;\n&nbsp; }\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span>\n<span class=\"hljs-comment\">&lt;!-- 在线引入echarts&nbsp;【建议下载到本地引入】--&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text/javascript\"</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"https://cdn.staticfile.org/echarts/4.3.0/echarts.min.js\"</span>&gt;&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n<span class=\"hljs-comment\">&lt;!--&lt;script src=\"js/axios.js\"&gt;&lt;/script&gt;--&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span>\n&nbsp; <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"wrap\"</span>&gt;</span>\n&nbsp; &nbsp; <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"search\"</span>&gt;</span>\n&nbsp; &nbsp; &nbsp; <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"opertion\"</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">\"display: flex;justify-content: flex-start;\"</span>&gt;</span>\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"setTime\"</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">\"font-size: 18px; margin-left: 20px;\"</span>&gt;&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"checkSearch\"</span> <span class=\"hljs-attr\">onclick</span>=<span class=\"hljs-string\">\"getWmsIfo()\"</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">\"font-size: 18px; margin-left: 50px;background-color: #405477;color: white;\"</span>&gt;</span>查询<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n&nbsp; &nbsp; &nbsp; <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n&nbsp; &nbsp; <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n&nbsp; &nbsp; <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"container\"</span>&gt;&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n&nbsp; <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n\n\n&nbsp; <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text/javascript\"</span>&gt;</span>\n\n\n\n&nbsp; &nbsp; <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">showWmsInfo</span>() </span>{\n&nbsp; &nbsp; &nbsp; <span class=\"hljs-comment\">// 1</span>\n&nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">var</span> dom = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">\"container\"</span>);\n&nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">var</span> myChart = echarts.init(dom, <span class=\"hljs-string\">\'light\'</span>);\n\n\n&nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">let</span> time = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>().toLocaleDateString().split(<span class=\"hljs-string\">\'/\'</span>).join(<span class=\"hljs-string\">\'-\'</span>);\n&nbsp; &nbsp; &nbsp; <span class=\"hljs-comment\">// 时间 与 取消</span>\n&nbsp; &nbsp; &nbsp; <span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">\'.setTime\'</span>).innerHTML = <span class=\"hljs-string\">`&lt;span&gt;时间: <span class=\"hljs-subst\">${time}</span>&lt;/span&gt; &lt;spn style=\"margin-left: &nbsp;50px\"&gt;取消：100&lt;/spn&gt;`</span>\n&nbsp; &nbsp; &nbsp; <span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">\'.setTime\'</span>).style.fontSize = fontSize(<span class=\"hljs-number\">0.23</span>) + <span class=\"hljs-string\">\'px\'</span>\n&nbsp; &nbsp; &nbsp; <span class=\"hljs-comment\">// 查询按钮</span>\n&nbsp; &nbsp; &nbsp; <span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">\'.checkSearch\'</span>).style.fontSize = fontSize(<span class=\"hljs-number\">0.23</span>) + <span class=\"hljs-string\">\'px\'</span>\n&nbsp; &nbsp; &nbsp; <span class=\"hljs-comment\">// 2</span>\n&nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">var</span> option;\n&nbsp; &nbsp; &nbsp; <span class=\"hljs-comment\">// prettier-ignore</span>\n&nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">let</span> dataAxis = [<span class=\"hljs-string\">\'WMS订单被接收\'</span>, <span class=\"hljs-string\">\'波次创建\'</span>, <span class=\"hljs-string\">\'拣货\'</span>, <span class=\"hljs-string\">\'复核\'</span>];\n&nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">let</span> data = [<span class=\"hljs-number\">4293</span>, <span class=\"hljs-number\">4055</span>, <span class=\"hljs-number\">4055</span>, <span class=\"hljs-number\">4056</span>, <span class=\"hljs-number\">4000</span>];\n&nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">let</span> undefinedData = [<span class=\"hljs-number\">300</span>, <span class=\"hljs-number\">238</span>, <span class=\"hljs-number\">270</span>, <span class=\"hljs-number\">260</span>, <span class=\"hljs-number\">190</span>];\n&nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">let</span> yMax = <span class=\"hljs-number\">5000</span>;\n&nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">let</span> dataShadow = [];\n&nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; data.length; i++) {\n&nbsp; &nbsp; &nbsp; &nbsp; dataShadow.push(yMax);\n&nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; &nbsp; option = {\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-comment\">// 是否显示提示框组件,鼠标放上去将提示数量</span>\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attr\">tooltip</span>: {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attr\">show</span>: <span class=\"hljs-literal\">true</span>,\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-comment\">// 坐标轴触发 鼠标经过，在柱形图显示Y轴线条</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attr\">trigger</span>: <span class=\"hljs-string\">\'axis\'</span>,\n&nbsp; &nbsp; &nbsp; &nbsp; },\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-comment\">// 设置x轴样式</span>\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attr\">xAxis</span>: {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attr\">data</span>: dataAxis,\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attr\">axisLabel</span>: {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attr\">inside</span>: <span class=\"hljs-literal\">false</span>,\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attr\">fontSize</span>: fontSize(<span class=\"hljs-number\">0.25</span>),\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attr\">color</span>: <span class=\"hljs-string\">\'#FFF\'</span>,\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attr\">axisTick</span>: {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attr\">show</span>: <span class=\"hljs-literal\">false</span>,\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attr\">axisLine</span>: {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attr\">show</span>: <span class=\"hljs-literal\">false</span>,\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attr\">z</span>: <span class=\"hljs-number\">10</span>,\n&nbsp; &nbsp; &nbsp; &nbsp; },\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-comment\">// 设置左边Y轴样式</span>\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attr\">yAxis</span>: {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\'value\'</span>,\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attr\">axisLine</span>: {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attr\">show</span>: <span class=\"hljs-literal\">false</span>,\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attr\">axisTick</span>: {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attr\">show</span>: <span class=\"hljs-literal\">false</span>,\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attr\">axisLabel</span>: {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attr\">fontSize</span>: fontSize(<span class=\"hljs-number\">0.25</span>),\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attr\">color</span>: <span class=\"hljs-string\">\'#fff\'</span>,\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },\n&nbsp; &nbsp; &nbsp; &nbsp; },\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-comment\">// 控制顶部样式(未完成,已完成)</span>\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attr\">legend</span>: {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attr\">textStyle</span>: {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attr\">color</span>: <span class=\"hljs-string\">\'#FFF\'</span>,\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attr\">fontSize</span>: fontSize(<span class=\"hljs-number\">0.25</span>),\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },\n&nbsp; &nbsp; &nbsp; &nbsp; },\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-comment\">// dataZoom 鼠标滚轮、手指滑动（触屏上）来缩放或漫游坐标系。</span>\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-comment\">// dataZoom: [</span>\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-comment\">// &nbsp; {</span>\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-comment\">// &nbsp; &nbsp; type: \'inside\',</span>\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-comment\">// &nbsp; },</span>\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-comment\">// ],</span>\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attr\">series</span>: [\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-comment\">// 蓝色柱子</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\'bar\'</span>,\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attr\">showBackground</span>: <span class=\"hljs-literal\">true</span>,\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">\'已完成\'</span>,\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attr\">stack</span>: <span class=\"hljs-string\">\'Ad\'</span>,\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-comment\">// 设置柱形图大小</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-comment\">// barWidth: 120,</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-comment\">// 设置柱形图渐变颜色</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attr\">itemStyle</span>: {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attr\">color</span>: <span class=\"hljs-keyword\">new</span> echarts.graphic.LinearGradient(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, [\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; { <span class=\"hljs-attr\">offset</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">color</span>: <span class=\"hljs-string\">\'#83bff6\'</span> },\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; { <span class=\"hljs-attr\">offset</span>: <span class=\"hljs-number\">0.5</span>, <span class=\"hljs-attr\">color</span>: <span class=\"hljs-string\">\'#188df0\'</span> },\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; { <span class=\"hljs-attr\">offset</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">color</span>: <span class=\"hljs-string\">\'#188df0\'</span> },\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ]),\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attr\">emphasis</span>: {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attr\">itemStyle</span>: {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attr\">color</span>: <span class=\"hljs-keyword\">new</span> echarts.graphic.LinearGradient(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, [\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; { <span class=\"hljs-attr\">offset</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">color</span>: <span class=\"hljs-string\">\'#2378f7\'</span> },\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; { <span class=\"hljs-attr\">offset</span>: <span class=\"hljs-number\">0.7</span>, <span class=\"hljs-attr\">color</span>: <span class=\"hljs-string\">\'#2378f7\'</span> },\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; { <span class=\"hljs-attr\">offset</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">color</span>: <span class=\"hljs-string\">\'#83bff6\'</span> },\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ]),\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; data,\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-comment\">// 控制蓝色柱子样式</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attr\">label</span>: {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attr\">show</span>: <span class=\"hljs-literal\">true</span>,\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attr\">color</span>: <span class=\"hljs-string\">\'#FFF\'</span>,\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attr\">fontSize</span>: fontSize(<span class=\"hljs-number\">0.25</span>),\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-comment\">// position: \'insideTop\',</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-comment\">// 红色柱子</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">\'未完成\'</span>,\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\'bar\'</span>,\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attr\">stack</span>: <span class=\"hljs-string\">\'Ad\'</span>,\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attr\">color</span>: <span class=\"hljs-string\">\'red\'</span>,\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attr\">emphasis</span>: {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attr\">focus</span>: <span class=\"hljs-string\">\'series\'</span>,\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attr\">data</span>: undefinedData,\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-comment\">// 控制红色柱子样式</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attr\">label</span>: {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attr\">show</span>: <span class=\"hljs-literal\">true</span>,\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-comment\">// position: \'insideTop\',</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attr\">fontSize</span>: fontSize(<span class=\"hljs-number\">0.25</span>),\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },\n&nbsp; &nbsp; &nbsp; &nbsp; ],\n&nbsp; &nbsp; &nbsp; };\n\n\n&nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">const</span> zoomSize = <span class=\"hljs-number\">8</span>;\n&nbsp; &nbsp; &nbsp; myChart.on(<span class=\"hljs-string\">\'click\'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">params</span>) </span>{\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-built_in\">console</span>.log(dataAxis[<span class=\"hljs-built_in\">Math</span>.max(params.dataIndex - zoomSize / <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">0</span>)]);\n&nbsp; &nbsp; &nbsp; &nbsp; myChart.dispatchAction({\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\'dataZoom\'</span>,\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attr\">startValue</span>: dataAxis[<span class=\"hljs-built_in\">Math</span>.max(params.dataIndex - zoomSize / <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">0</span>)],\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attr\">endValue</span>: dataAxis[<span class=\"hljs-built_in\">Math</span>.min(params.dataIndex + zoomSize / <span class=\"hljs-number\">2</span>, data.length - <span class=\"hljs-number\">1</span>)],\n&nbsp; &nbsp; &nbsp; &nbsp; });\n&nbsp; &nbsp; &nbsp; });\n\n\n&nbsp; &nbsp; &nbsp; myChart.setOption(option);\n&nbsp; &nbsp; }\n\n\n&nbsp; &nbsp; <span class=\"hljs-comment\">// 执行调用</span>\n&nbsp; &nbsp; showWmsInfo()\n&nbsp; &nbsp; <span class=\"hljs-comment\">// 监听窗口的大小</span>\n&nbsp; &nbsp; <span class=\"hljs-built_in\">window</span>.addEventListener(<span class=\"hljs-string\">\'resize\'</span>, debounce(updateEchat, <span class=\"hljs-number\">500</span>))\n&nbsp; &nbsp; <span class=\"hljs-comment\">// 需要防抖的函数</span>\n&nbsp; &nbsp; <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">updateEchat</span>() </span>{\n&nbsp; &nbsp; &nbsp; myChart.resize() <span class=\"hljs-comment\">// 重新渲染</span>\n&nbsp; &nbsp; &nbsp; <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"resize\"</span>)\n&nbsp; &nbsp; }\n\n\n&nbsp; &nbsp; <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">debounce</span>(<span class=\"hljs-params\">fn, delay</span>) </span>{\n&nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">let</span> timer = <span class=\"hljs-literal\">null</span>\n&nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> () </span>{\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-comment\">// 这里为每次变化要执行旳函数 &nbsp;</span>\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">if</span> (timer) {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-built_in\">clearTimeout</span>(timer)\n&nbsp; &nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; &nbsp; &nbsp; timer = <span class=\"hljs-built_in\">setTimeout</span>(fn, delay)\n&nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; }\n\n\n&nbsp; &nbsp; <span class=\"hljs-comment\">// 采用rem为单位，根据屏幕的宽度调整html的font-size。</span>\n&nbsp; &nbsp; <span class=\"hljs-comment\">//获取屏幕宽度并计算比例：</span>\n&nbsp; &nbsp; <span class=\"hljs-comment\">// 如在: 1920屏宽下字体设置为12px,就可以传入0.12给fontSize fontSize(0.12)</span>\n&nbsp; &nbsp; <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">fontSize</span>(<span class=\"hljs-params\">fontSizeParam</span>) </span>{\n&nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">let</span> docEl = <span class=\"hljs-built_in\">document</span>.documentElement\n&nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">let</span> clientWidth = <span class=\"hljs-built_in\">window</span>.innerWidth || <span class=\"hljs-built_in\">document</span>.documentElement.clientWidth || <span class=\"hljs-built_in\">document</span>.body.clientWidth\n&nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">if</span> (!clientWidth) <span class=\"hljs-keyword\">return</span>;\n&nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">let</span> fontSize = <span class=\"hljs-number\">100</span> * (clientWidth / <span class=\"hljs-number\">1920</span>);\n&nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">return</span> fontSizeParam * fontSize;\n\n\n&nbsp; &nbsp; }\n\n\n&nbsp; <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span>\n\n\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span>\n</pre><p><br></p>', '2021-12-03 15:25:50', '前端', '2021-12-11 15:04:35', 2, 'null', NULL);
INSERT INTO `blog_container` VALUES (145, 'admin', 'js数组去重、填充、排序', 'js数组去掉重复数据，sort、fill、冒泡排序的使用', '<h3><strong style=\"color: rgb(0, 102, 204);\">Set 去重</strong></h3><pre class=\"ql-syntax\" spellcheck=\"false\">cosnt <span class=\"hljs-keyword\">new</span><span class=\"hljs-type\">Arr</span> = [...<span class=\"hljs-keyword\">new</span> <span class=\"hljs-type\">Set</span>(arr)]&nbsp; <span class=\"hljs-comment\">// 数组去重</span>\n[...<span class=\"hljs-keyword\">new</span> <span class=\"hljs-type\">Set</span>(<span class=\"hljs-string\">\'ababbc\'</span>)].join(<span class=\"hljs-string\">\'\'</span>); <span class=\"hljs-comment\">// \"abc\" 字符串去重</span>\n</pre><p><br></p><h3><strong style=\"color: rgb(0, 102, 204);\">Set 并集</strong></h3><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">Set</span>([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>]);\n<span class=\"hljs-keyword\">var</span> b = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">Set</span>([<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span>]);\n<span class=\"hljs-keyword\">var</span> <span class=\"hljs-keyword\">union</span> = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">Set</span>([...a, ...b]); <span class=\"hljs-comment\">// {1, 2, 3, 4}</span>\n</pre><p><br></p><h3><strong style=\"color: rgb(0, 102, 204);\">Set 交集</strong></h3><pre class=\"ql-syntax\" spellcheck=\"false\">var a = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">Set([1, 2, 3])</span>;\nvar b = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">Set([4, 3, 2])</span>;\nvar intersect = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">Set([<span class=\"hljs-operator\">...</span><span class=\"hljs-params\">a</span>].<span class=\"hljs-params\">filter</span>(<span class=\"hljs-params\">x</span> =&gt; <span class=\"hljs-params\">b</span>.<span class=\"hljs-params\">has</span>(<span class=\"hljs-params\">x</span>)</span>)); <span class=\"hljs-comment\">// {2, 3}</span>\n</pre><p><br></p><h3><strong style=\"color: rgb(0, 102, 204);\">Set 差集</strong></h3><pre class=\"ql-syntax\" spellcheck=\"false\">var a = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">Set([1, 2, 3])</span>;\nvar b = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">Set([4, 3, 2])</span>;\nvar difference = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">Set([<span class=\"hljs-operator\">...</span><span class=\"hljs-params\">a</span>].<span class=\"hljs-params\">filter</span>(<span class=\"hljs-params\">x</span> =&gt; !<span class=\"hljs-params\">b</span>.<span class=\"hljs-params\">has</span>(<span class=\"hljs-params\">x</span>)</span>)); <span class=\"hljs-comment\">// {1}</span>\n</pre><p><br></p><p><br></p><h3><strong style=\"color: rgb(0, 102, 204);\">Array.from 去重</strong></h3><pre class=\"ql-syntax\" spellcheck=\"false\">const <span class=\"hljs-keyword\">new</span><span class=\"hljs-type\">Arr</span> = <span class=\"hljs-keyword\">Array</span>.from(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-type\">Set</span>(arr))\n</pre><p><br></p><p><br></p><h3><span style=\"color: rgb(0, 102, 204);\">indexOf 去重</span></h3><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">resetArr</span>(<span class=\"hljs-params\">arr</span>) </span>{\n&nbsp; <span class=\"hljs-keyword\">let</span> res = []\n&nbsp; arr.forEach(<span class=\"hljs-function\"><span class=\"hljs-params\">item</span> =&gt;</span> {\n&nbsp; &nbsp; <span class=\"hljs-keyword\">if</span> (res.indexOf(item) === -<span class=\"hljs-number\">1</span>) {\n&nbsp; &nbsp; &nbsp; res.push(item)\n&nbsp; &nbsp; }\n&nbsp; })\n&nbsp; <span class=\"hljs-keyword\">return</span> res\n}\n\n\n<span class=\"hljs-comment\">// 测试</span>\n<span class=\"hljs-keyword\">const</span> arr = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span>]\n<span class=\"hljs-built_in\">console</span>.log(resetArr(arr)) <span class=\"hljs-comment\">// [1, 2, 3]</span>\n\n</pre><p><br></p><h3><strong style=\"color: rgb(0, 102, 204);\">sort 排序</strong></h3><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-regexp\">//</span> 对数字进行排序，简写\nconst arr = [<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">5</span>]\narr.sort((a, b) =&gt; a - b)\nconsole.log(arr) <span class=\"hljs-regexp\">//</span> [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>]\n\n\n<span class=\"hljs-regexp\">//</span> 对字母进行排序，简写\nconst arr = [<span class=\"hljs-string\">\'b\'</span>, <span class=\"hljs-string\">\'c\'</span>, <span class=\"hljs-string\">\'a\'</span>, <span class=\"hljs-string\">\'e\'</span>, <span class=\"hljs-string\">\'d\'</span>]\narr.sort()\nconsole.log(arr) <span class=\"hljs-regexp\">//</span> [<span class=\"hljs-string\">\'a\'</span>, <span class=\"hljs-string\">\'b\'</span>, <span class=\"hljs-string\">\'c\'</span>, <span class=\"hljs-string\">\'d\'</span>, <span class=\"hljs-string\">\'e\'</span>]\n\n</pre><h3><br></h3><h3><strong style=\"color: rgb(0, 102, 204);\">fill 填充</strong></h3><pre class=\"ql-syntax\" spellcheck=\"false\">let arr <span class=\"hljs-operator\">=</span> [<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">6</span>]\n		\n<span class=\"hljs-operator\">//</span> 全部填充为 <span class=\"hljs-keyword\">null</span>\n<span class=\"hljs-operator\">//</span> 输出 [<span class=\"hljs-keyword\">null</span>,<span class=\"hljs-keyword\">null</span>,<span class=\"hljs-keyword\">null</span>,<span class=\"hljs-keyword\">null</span>,<span class=\"hljs-keyword\">null</span>,<span class=\"hljs-keyword\">null</span>]\n\nconsole.<span class=\"hljs-built_in\">log</span>(arr.fill(<span class=\"hljs-keyword\">null</span>))&nbsp;\n		\n		\n<span class=\"hljs-operator\">//</span> fill(<span class=\"hljs-keyword\">value</span>, <span class=\"hljs-keyword\">start</span>, <span class=\"hljs-keyword\">end</span>)\n<span class=\"hljs-operator\">//</span> 输出 [<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">66</span>,<span class=\"hljs-number\">66</span>,<span class=\"hljs-number\">66</span>,<span class=\"hljs-number\">66</span>]\nconsole.<span class=\"hljs-built_in\">log</span>(arr.fill(<span class=\"hljs-number\">66</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">6</span>))\n<span class=\"hljs-comment\">/*\n参数	描述\nvalue	必需。填充的值。\nstart	可选。开始填充位置。\nend	    可选。停止填充位置 (默认为 array.length)\n*/</span>\n</pre><p><br></p><h3><span style=\"color: rgb(0, 102, 204);\">冒泡排序</span></h3><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">bubbleSort</span>(<span class=\"hljs-params\">arr</span>) </span>{\n&nbsp; <span class=\"hljs-keyword\">let</span> len = arr.length\n&nbsp; <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; len - <span class=\"hljs-number\">1</span>; i++) {\n&nbsp; &nbsp; <span class=\"hljs-comment\">// 从第一个元素开始，比较相邻的两个元素，前者大就交换位置</span>\n&nbsp; &nbsp; <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> j = <span class=\"hljs-number\">0</span>; j &lt; len - <span class=\"hljs-number\">1</span> - i; j++) {\n&nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">if</span> (arr[j] &gt; arr[j + <span class=\"hljs-number\">1</span>]) {\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">let</span> num = arr[j]\n&nbsp; &nbsp; &nbsp; &nbsp; arr[j] = arr[j + <span class=\"hljs-number\">1</span>]\n&nbsp; &nbsp; &nbsp; &nbsp; arr[j + <span class=\"hljs-number\">1</span>] = num\n&nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; }\n&nbsp; &nbsp; <span class=\"hljs-comment\">// 每次遍历结束，都能找到一个最大值，放在数组最后</span>\n&nbsp; }\n&nbsp; <span class=\"hljs-keyword\">return</span> arr\n}\n\n\n<span class=\"hljs-comment\">//测试</span>\n<span class=\"hljs-built_in\">console</span>.log(bubbleSort([<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">4</span>])) <span class=\"hljs-comment\">// [1, 2, 3, 4, 5]</span>\n\n\n</pre>', '2021-12-03 17:12:17', 'javaScript', '2021-12-06 13:21:50', 6, 'null', NULL);
INSERT INTO `blog_container` VALUES (146, 'admin', 'js 解构 ES6', '解构 ：是将一个数据结构分解为更小的部分的过程。ES6 中，从数组和对象中提取值，对变量进行赋值。', '<p><br></p><h3><strong style=\"color: rgb(0, 102, 204);\">变量交换</strong></h3><ol><li>变量交换：看起来如同镜像。赋值语句的左侧的解构模式，右侧是临时创建的数组字面量。x 被赋值为数组中的 y，y 被赋值为数组中的 x。</li></ol><pre class=\"ql-syntax\" spellcheck=\"false\">let x = 1\nlet y = 2\n;[x, y] = [y, x]\n\n// x = 2, y = 1\n\n</pre><p><br></p><h3><strong style=\"color: rgb(0, 102, 204);\">字符串解构</strong></h3><pre class=\"ql-syntax\" spellcheck=\"false\">const [a, b, c, d, e] = \'hello\'\n// a =&gt; h\n// b =&gt; e\n// c =&gt; l\n// d =&gt; l\n// e =&gt; o\n</pre><p><br></p><h3><strong style=\"color: rgb(0, 102, 204);\">扩展运算符提供了数组合并的新写法</strong></h3><pre class=\"ql-syntax\" spellcheck=\"false\">// ES 5\n;[1, 2].concat(more)\n\n// ES 6\n;[1, 2, ...more]﻿\n</pre><p><br></p><h3><strong style=\"color: rgb(0, 102, 204);\">判断数组中是否包含某个值（ </strong><span style=\"color: rgb(51, 51, 51); background-color: rgb(248, 248, 248);\">indexOf 突然不香了 </span><strong style=\"color: rgb(0, 102, 204);\">）</strong></h3><pre class=\"ql-syntax\" spellcheck=\"false\">;[1, 2, 3].includes(2) // true\n;[1, 2, 3].includes(4) // false\n;[1, 2, NaN].includes(NaN) // true\n</pre>', '2021-12-06 15:00:41', 'javaScript', '2021-12-19 09:38:50', 5, 'null', 'null');
INSERT INTO `blog_container` VALUES (150, 'admin', '帖子置顶，SQL语句，数据库表的设计 ', '比如论坛的帖子，现在有帖子名称，帖子内容，是否置顶，写入时间，4个字段。我想输出的时候按时间排序，然后置顶的帖子永远在正常帖子的最上面', '<p><strong>方法一、</strong></p><p><br></p><p><span style=\"color: rgb(51, 51, 51);\">select * from 表 order by 是否置顶 desc, 写入时间项 desc</span></p><p><br></p><p><span style=\"color: rgb(51, 51, 51);\">order by&nbsp;排序，先排是否置顶的，再按时间排序。</span></p><p><br></p><p><strong>方法二、</strong></p><p><br></p><p><span style=\"color: rgb(51, 51, 51);\">嵌套查询</span></p><p><br></p><p><span style=\"color: rgb(51, 51, 51);\">比如置顶为1,非置顶为0</span></p><p><span style=\"color: rgb(51, 51, 51);\">select * from (select * from bbs order&nbsp;by ctime desc) as&nbsp;tableName order by istop&nbsp;desc</span></p><p><span style=\"color: rgb(51, 51, 51);\">1.先查询出按时间倒序结果集</span></p><p><span style=\"color: rgb(51, 51, 51);\">2.在上一个结果集中查询按置顶倒序的结果集</span></p>', '2021-12-11 14:32:46', 'mysql', '2021-12-19 09:39:13', 10, 'null', 'yes');
INSERT INTO `blog_container` VALUES (152, 'admin', '使用vue 过滤器 filters 修改时间', '使用vue 过滤器 filters 修改发帖日期和最后修改日期时间，只保留年、月、日', '<p>使用vue 过滤器<strong> filters</strong> 修改发帖日期和最后修改日期时间，只保留年、月、日</p><p><br></p><p>基本使用方法：中间用管道隔开( | ) , 这里写要处理的值 | 这里写要处理的函数</p><p><br></p><p>修改前</p><p>- <span style=\"color: rgb(0, 0, 128); background-color: rgb(250, 204, 204);\">&lt;div&gt;</span><span style=\"background-color: rgb(250, 204, 204);\">发布日期: </span><span style=\"background-color: rgb(250, 204, 204); color: rgb(0, 0, 128);\">&lt;i</span><span style=\"background-color: rgb(250, 204, 204);\"> </span><span style=\"background-color: rgb(250, 204, 204); color: rgb(0, 128, 128);\">class=</span><span style=\"background-color: rgb(250, 204, 204); color: rgb(221, 34, 0);\">\"el-icon-time\"</span><span style=\"background-color: rgb(250, 204, 204); color: rgb(0, 0, 128);\">&gt;&lt;/i&gt;</span><span style=\"background-color: rgb(250, 204, 204);\">{{ itme.createdate }}</span><span style=\"background-color: rgb(250, 204, 204); color: rgb(0, 0, 128);\">&lt;/div&gt;</span></p><p>- <span style=\"color: rgb(0, 0, 128); background-color: rgb(250, 204, 204);\">&lt;div</span><span style=\"background-color: rgb(250, 204, 204);\"> </span><span style=\"background-color: rgb(250, 204, 204); color: rgb(0, 128, 128);\">v-if=</span><span style=\"background-color: rgb(250, 204, 204); color: rgb(221, 34, 0);\">\"itme.lastdate\"</span><span style=\"background-color: rgb(250, 204, 204); color: rgb(0, 0, 128);\">&gt;</span><span style=\"background-color: rgb(250, 204, 204);\">最后修改: </span><span style=\"background-color: rgb(250, 204, 204); color: rgb(0, 0, 128);\">&lt;i</span><span style=\"background-color: rgb(250, 204, 204);\"> </span><span style=\"background-color: rgb(250, 204, 204); color: rgb(0, 128, 128);\">class=</span><span style=\"background-color: rgb(250, 204, 204); color: rgb(221, 34, 0);\">\"el-icon-time\"</span><span style=\"background-color: rgb(250, 204, 204); color: rgb(0, 0, 128);\">&gt;&lt;/i&gt;</span><span style=\"background-color: rgb(250, 204, 204);\">{{ itme.lastdate }}</span><span style=\"background-color: rgb(250, 204, 204); color: rgb(0, 0, 128);\">&lt;/div&gt;</span></p><p><br></p><p>修改后</p><p>+ <span style=\"color: rgb(0, 0, 128);\">&lt;div&gt;</span>发布日期: <span style=\"color: rgb(0, 0, 128);\">&lt;i</span> <span style=\"color: rgb(0, 128, 128);\">class=</span><span style=\"color: rgb(221, 34, 0);\">\"el-icon-time\"</span><span style=\"color: rgb(0, 0, 128);\">&gt;,&lt;/i&gt;</span>{{ itme.createdate <span style=\"background-color: rgb(170, 255, 170);\">| timeDataFormat </span>}}<span style=\"color: rgb(0, 0, 128);\">&lt;/div&gt;</span></p><p>+ <span style=\"color: rgb(0, 0, 128);\">&lt;div</span> <span style=\"color: rgb(0, 128, 128);\">v-if=</span><span style=\"color: rgb(221, 34, 0);\">\"itme.lastdate\"</span><span style=\"color: rgb(0, 0, 128);\">&gt;</span>最后修改: <span style=\"color: rgb(0, 0, 128);\">&lt;i</span> <span style=\"color: rgb(0, 128, 128);\">class=</span><span style=\"color: rgb(221, 34, 0);\">\"el-icon-time\"</span><span style=\"color: rgb(0, 0, 128);\">&gt;&lt;/i&gt;</span>{{ itme.lastdate <span style=\"background-color: rgb(170, 255, 170);\">| timeDataFormat </span>}}<span style=\"color: rgb(0, 0, 128);\">&lt;/div&gt;</span></p><p><br></p><p>把要处理的函数写在 filters 里面</p><pre class=\"ql-syntax\" spellcheck=\"false\">  filters: {\n    timeDataFormat(str) {\n        // 将字符串转换为Date格式let mt = new Date(str);    \n        //获取年份let year = mt.getFullYear();    \n        //从0开始 获取月份 padStart(2,\'0\') 头部补全,不够两位数，前面补0\n        ﻿let month = (mt.getMonth() + 1).toString().padStart(2,\'0\');\n        // 获取天数let day = mt.getDate().toString().padStart(2,\'0\');\n	  \n        return `${year}-${month}-${day}`;\n\n    }\n\n  },\n</pre>', '2021-12-15 11:17:54', 'javaScript', '2021-12-19 09:19:21', 5, 'null', 'null');

-- ----------------------------
-- Table structure for comment
-- ----------------------------
DROP TABLE IF EXISTS `comment`;
CREATE TABLE `comment`  (
  `id` int(0) NOT NULL AUTO_INCREMENT,
  `blog_container_id` int(0) NOT NULL,
  `username` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `comment` varchar(300) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NOT NULL,
  `createdate` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `browserName` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,
  `broserVersion` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,
  `osName` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,
  `osVersion` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,
  `topic_title` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 62 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of comment
-- ----------------------------
INSERT INTO `comment` VALUES (23, 94, 'admin', '真棒！！！', '2021-09-02 15:27:53', NULL, NULL, NULL, NULL, '');
INSERT INTO `comment` VALUES (24, 94, '游客', '厉害！！', '2021-09-02 15:33:49', NULL, NULL, NULL, NULL, '');
INSERT INTO `comment` VALUES (25, 94, 'admin', '厉害！！', '2021-09-02 16:00:52', NULL, NULL, NULL, NULL, '');
INSERT INTO `comment` VALUES (26, 94, '游客', '牛x！！', '2021-09-02 16:01:29', NULL, NULL, NULL, NULL, '');
INSERT INTO `comment` VALUES (27, 94, '小白', '一般一般', '2021-09-02 16:13:48', NULL, NULL, NULL, NULL, '');
INSERT INTO `comment` VALUES (28, 94, 'admin', '评论测试', '2021-09-02 17:07:18', NULL, NULL, NULL, NULL, '');
INSERT INTO `comment` VALUES (29, 103, 'admin', '牛蛙！真不戳！', '2021-09-02 18:57:10', NULL, NULL, NULL, NULL, '');
INSERT INTO `comment` VALUES (31, 89, 'admin', '正在努力成为一名真正的程序员！！！', '2021-09-03 10:50:08', NULL, NULL, 'Windows  10.0', ' Win64', '');
INSERT INTO `comment` VALUES (32, 104, '游客', 'B站看到，路过康康！', '2021-09-03 11:10:14', NULL, NULL, 'Windows  10.0', ' Win64', '');
INSERT INTO `comment` VALUES (33, 104, '游客', '真的假的？？', '2021-09-03 13:12:35', NULL, NULL, 'Windows  10.0', ' WOW64', '');
INSERT INTO `comment` VALUES (34, 104, 'admin', '二楼这位游客，都出来了，你说真不真！！☺', '2021-09-03 17:27:35', NULL, NULL, 'Windows  10.0', ' Win64', '');
INSERT INTO `comment` VALUES (35, 87, 'admin', '每个开发者必须掌握的技能', '2021-09-03 17:28:42', NULL, NULL, 'Windows  10.0', ' Win64', '');
INSERT INTO `comment` VALUES (36, 105, 'admin', '不错，不错，小伙子，好好加油，你是最棒的！！！(︶.̮︶✽)(￣ェ￣;)', '2021-09-05 10:37:59', NULL, NULL, 'Windows  10.0', ' Win64', '目录处理命令');
INSERT INTO `comment` VALUES (37, 106, 'admin', '在评论不多，不活跃的情况下，可以把评论和回复使用一个表来实现，只需在评论【comment】表，加上保存回复根评论id字段即可，这样就不用增加【comment_replay】表也能实现。', '2021-09-05 12:11:47', NULL, NULL, 'Windows  10.0', ' Win64', '增加回复评论功能');
INSERT INTO `comment` VALUES (38, 107, '游客', '不错！！！', '2021-09-05 19:04:49', NULL, NULL, 'Windows  10.0', ' Win64', '使用PHP爬取Bing每日图形壁纸----作为本网站的壁纸');
INSERT INTO `comment` VALUES (39, 107, '游客', '微信公众号粉丝路过！！', '2021-09-05 19:55:46', NULL, NULL, 'Windows  10.0', ' Win64', '使用PHP爬取Bing每日图形壁纸----作为本网站的壁纸');
INSERT INTO `comment` VALUES (40, 109, 'admin', '嗯！！不错不错', '2021-09-06 10:38:26', NULL, NULL, 'Windows  10.0', ' Win64', 'MySQl的增删查改的几种语法格式');
INSERT INTO `comment` VALUES (41, 113, 'admin', '完成图片上传功能,发帖时支持可插入图片', '2021-09-10 21:23:22', NULL, NULL, 'Windows  10.0', ' Win64', 'vue-quill-editor自定义上传图片事件');
INSERT INTO `comment` VALUES (42, 115, 'admin', '小伙子不错！！！加油哦！！', '2021-09-13 13:59:35', NULL, NULL, 'Windows  10.0', ' Win64', '文件处理命令和链接命令');
INSERT INTO `comment` VALUES (43, 117, '小白', '(*￣︶￣)', '2021-09-14 16:54:32', NULL, NULL, 'Windows  10.0', ' WOW64', 'TypeScript学习记录');
INSERT INTO `comment` VALUES (44, 119, '游客', '牛逼·', '2021-10-06 05:35:20', NULL, NULL, 'Windows  10.0', ' Win64', '本博客源码---gitee');
INSERT INTO `comment` VALUES (45, 106, '游客', '牛B', '2021-10-06 20:16:30', NULL, NULL, 'Windows  10.0', ' Win64', '增加回复评论功能');
INSERT INTO `comment` VALUES (46, 119, '游客', 'B站路过', '2021-10-06 20:16:56', NULL, NULL, 'Windows  10.0', ' Win64', '本博客源码---gitee');
INSERT INTO `comment` VALUES (47, 119, 'admin', '‍测试账号：\n账号：测试号   密码：123456', '2021-10-06 20:29:38', NULL, NULL, 'Windows  10.0', ' Win64', '本博客源码---gitee');
INSERT INTO `comment` VALUES (48, 111, '游客', '3', '2021-10-07 03:17:01', NULL, NULL, 'Windows  10.0', ' Win64', 'php遍历文件夹获取所有文件');
INSERT INTO `comment` VALUES (49, 119, '游客', '666', '2021-10-08 22:52:09', NULL, NULL, 'Windows  10.0', ' Win64', '本博客源码---gitee开源给大家');
INSERT INTO `comment` VALUES (50, 119, '游客', 'B站路过看看，牛逼666', '2021-10-09 10:24:20', NULL, NULL, 'Windows  10.0', ' Win64', '本博客源码---gitee开源给大家');
INSERT INTO `comment` VALUES (51, 106, '游客', '6666', '2021-10-21 14:10:03', NULL, NULL, 'Linux', ' Android 11', '增加回复评论功能');
INSERT INTO `comment` VALUES (52, 119, '游客', '牛啊', '2021-10-23 11:30:56', NULL, NULL, 'Windows  10.0', ' Win64', '本博客源码---gitee开源给大家');
INSERT INTO `comment` VALUES (53, 106, '游客', '6666976494', '2021-10-26 13:10:46', NULL, NULL, 'Windows  10.0', ' Win64', '增加回复评论功能');
INSERT INTO `comment` VALUES (54, 122, '游客', 'B站头号粉丝路过', '2021-10-28 10:01:33', NULL, NULL, 'Windows  10.0', ' Win64', 'php + Socket + WebSocket 编程笔记 （持续更新中）');
INSERT INTO `comment` VALUES (56, 120, '游客', '不错，学到了👍👍👍', '2021-10-28 16:28:23', NULL, NULL, 'Linux', ' Android 10', 'javaScript判断滚动到底');
INSERT INTO `comment` VALUES (57, 119, '游客', '牛逼', '2021-10-31 10:31:07', NULL, NULL, 'Linux', ' Android 10', '本博客源码---gitee开源给大家');
INSERT INTO `comment` VALUES (58, 119, '游客', '下载源码后，如何部署？？', '2021-10-31 15:52:56', NULL, NULL, 'Linux', ' Android 10', '本博客源码---gitee开源给大家');
INSERT INTO `comment` VALUES (59, 126, '游客', '路过看看', '2021-11-06 15:36:06', NULL, NULL, 'Linux', ' Android 10', '使用拼多多组件打印快递面单---webSocket编程');
INSERT INTO `comment` VALUES (60, 145, '游客', '455', '2021-12-05 23:30:35', NULL, NULL, 'Windows  10.0', ' Win64', 'js数组去重、排序');
INSERT INTO `comment` VALUES (61, 147, 'admin', '656565', '2021-12-10 10:10:54', NULL, NULL, 'Windows  10.0', ' Win64', '6666');
INSERT INTO `comment` VALUES (62, 146, 'admin', '666 你哈 啊  ', '2021-12-11 09:47:44', NULL, NULL, 'Windows  10.0', ' Win64', 'js 解构 ES6');

-- ----------------------------
-- Table structure for comment_replay
-- ----------------------------
DROP TABLE IF EXISTS `comment_replay`;
CREATE TABLE `comment_replay`  (
  `id` int(0) NOT NULL AUTO_INCREMENT COMMENT '评论者id',
  `comment_id` int(0) NOT NULL COMMENT '帖子ID',
  `username` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '评论者名称',
  `comment` varchar(300) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NOT NULL,
  `createdate` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `browserName` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,
  `broserVersion` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,
  `osName` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,
  `osVersion` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,
  `topic_title` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL COMMENT '评论的文章标题',
  `blog_container_id` int(0) NOT NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 186 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of comment_replay
-- ----------------------------
INSERT INTO `comment_replay` VALUES (164, 31, '游客', '回复admin: 加油！！', '2021-09-05 10:34:53', NULL, NULL, 'Windows  10.0', ' Win64', 'VUE 返回上一页 不刷新页面实现方法', 89);
INSERT INTO `comment_replay` VALUES (165, 31, 'admin', '回复游客: 欧力给！！', '2021-09-05 10:35:44', NULL, NULL, 'Windows  10.0', ' Win64', 'VUE 返回上一页 不刷新页面实现方法', 89);
INSERT INTO `comment_replay` VALUES (166, 36, '游客', '回复admin: 额额额！！☺☺', '2021-09-05 10:39:39', NULL, NULL, 'Windows  10.0', ' Win64', '目录处理命令', 105);
INSERT INTO `comment_replay` VALUES (167, 37, '游客', '回复admin: 不错！不错！', '2021-09-05 12:13:00', NULL, NULL, 'Windows  10.0', ' Win64', '增加回复评论功能', 106);
INSERT INTO `comment_replay` VALUES (168, 37, 'admin', '回复admin: 如果评论和回复使用一张表来保存，那么使用sql的自连接查询即可', '2021-09-05 12:31:06', NULL, NULL, 'Windows  10.0', ' Win64', '增加回复评论功能', 106);
INSERT INTO `comment_replay` VALUES (169, 37, '游客', '回复admin: 同其它连接相比，SQL自连接查询本身并没有什么特殊的。但是，在应用中，自连接查询因为其语法结构简单，而逻辑结构复杂，语义往往不是那么容易被人理解，因此，在使用时，经常令人觉得迷惑不解。但只要把自连接运用的得当，把单表看成是多表，牢固树立这一思维定式，我们会发现，自连接查询会为我们解决很多复杂的问题。', '2021-09-05 13:42:39', NULL, NULL, 'Windows  10.0', ' WOW64', '增加回复评论功能', 106);
INSERT INTO `comment_replay` VALUES (170, 37, 'admin', '回复游客: 对！☺', '2021-09-05 13:45:05', NULL, NULL, 'Windows  10.0', ' WOW64', '增加回复评论功能', 106);
INSERT INTO `comment_replay` VALUES (171, 33, 'admin', '回复游客: 真过珍珠！！', '2021-09-05 13:49:48', NULL, NULL, 'Windows  10.0', ' WOW64', '使用JavaScript获取设备信息', 104);
INSERT INTO `comment_replay` VALUES (172, 32, 'admin', '回复游客: nice！！', '2021-09-05 13:50:02', NULL, NULL, 'Windows  10.0', ' WOW64', '使用JavaScript获取设备信息', 104);
INSERT INTO `comment_replay` VALUES (173, 27, 'admin', '回复小白: 小伙子，加油！！你是最棒的！！', '2021-09-05 14:02:08', NULL, NULL, 'Windows  10.0', ' Win64', 'Linux目录处理命令ls', 94);
INSERT INTO `comment_replay` VALUES (174, 39, 'admin', '回复游客: 欢迎欢迎！！☺☺☺', '2021-09-05 19:58:33', NULL, NULL, 'Windows  10.0', ' Win64', '使用PHP爬取Bing每日图形壁纸----作为本网站的壁纸', 107);
INSERT INTO `comment_replay` VALUES (175, 35, '游客', '回复admin: B站粉丝路过！！', '2021-09-07 22:39:45', NULL, NULL, 'Windows  10.0', ' Win64', 'GIT常用命令使用教程', 87);
INSERT INTO `comment_replay` VALUES (176, 40, '游客', '回复admin: 666', '2021-09-08 11:28:48', NULL, NULL, 'Windows  10.0', ' Win64', 'MySQl的增删查改的几种语法格式', 109);
INSERT INTO `comment_replay` VALUES (177, 44, '游客', '回复游客: 5点就起床了，牛蛙', '2021-10-06 20:13:06', NULL, NULL, 'Windows  10.0', ' Win64', '本博客源码---gitee', 119);
INSERT INTO `comment_replay` VALUES (178, 48, '游客', '回复游客: 6', '2021-10-07 03:17:18', NULL, NULL, 'Windows  10.0', ' Win64', 'php遍历文件夹获取所有文件', 111);
INSERT INTO `comment_replay` VALUES (179, 48, '游客', '回复游客: 4', '2021-10-07 03:17:24', NULL, NULL, 'Windows  10.0', ' Win64', 'php遍历文件夹获取所有文件', 111);
INSERT INTO `comment_replay` VALUES (180, 37, '游客', '回复admin: ？？？？', '2021-10-19 13:35:25', NULL, NULL, 'Windows  10.0', ' Win64', '增加回复评论功能', 106);
INSERT INTO `comment_replay` VALUES (181, 45, '游客', '回复游客: 是的呢', '2021-10-25 11:58:04', NULL, NULL, 'Linux', ' Android 11', '增加回复评论功能', 106);
INSERT INTO `comment_replay` VALUES (182, 51, '游客', '回复游客: six-six-six', '2021-10-25 20:18:41', NULL, NULL, 'Windows  10.0', ' Win64', '增加回复评论功能', 106);
INSERT INTO `comment_replay` VALUES (183, 53, '游客', '回复游客: m', '2021-10-26 13:11:17', NULL, NULL, 'Windows  10.0', ' Win64', '增加回复评论功能', 106);
INSERT INTO `comment_replay` VALUES (184, 37, '游客', '回复游客: gggv', '2021-10-26 13:11:34', NULL, NULL, 'Linux', ' Android 11', '增加回复评论功能', 106);
INSERT INTO `comment_replay` VALUES (185, 35, '游客', '回复admin: 666', '2021-10-30 10:49:10', NULL, NULL, 'Windows  10.0', ' WOW64', 'GIT常用命令使用教程', 87);
INSERT INTO `comment_replay` VALUES (186, 61, 'admin', '回复admin: 31313', '2021-12-10 10:10:58', NULL, NULL, 'Windows  10.0', ' Win64', '6666', 147);

-- ----------------------------
-- Table structure for login
-- ----------------------------
DROP TABLE IF EXISTS `login`;
CREATE TABLE `login`  (
  `id` int(0) NOT NULL AUTO_INCREMENT,
  `username` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `password` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `createdate` timestamp(0) NOT NULL ON UPDATE CURRENT_TIMESTAMP(0),
  `power` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 5 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of login
-- ----------------------------
INSERT INTO `login` VALUES (1, 'admin', 'cxyCXY@123@###?', '2021-09-01 20:59:48', 'super');
INSERT INTO `login` VALUES (3, '小白', 'cxyCXY@123@#?', '2021-09-01 20:57:43', 'general');
INSERT INTO `login` VALUES (4, '测试号', '123456@@', '2021-10-26 23:04:19', 'general');
SET FOREIGN_KEY_CHECKS = 1;
